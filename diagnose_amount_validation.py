#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ _validate_and_adjust_amount()

–¶–µ–ª—å: 100% –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏ –¥–æ 0.0
"""

import asyncio
from decimal import Decimal, ROUND_DOWN
from config.settings import Config
from core.exchange_manager import ExchangeManager

async def test_validation():
    print("=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: _validate_and_adjust_amount()")
    print("=" * 80)
    print()

    config = Config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º exchange managers
    exchanges = {}
    for name in ['binance', 'bybit']:
        if name in config.exchanges:
            ex_config = config.exchanges[name]
            # Convert ExchangeConfig to dict
            config_dict = {
                'api_key': ex_config.api_key,
                'api_secret': ex_config.api_secret,
                'testnet': ex_config.testnet
            }
            exchanges[name] = ExchangeManager(name, config_dict)
            await exchanges[name].initialize()

    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ª–æ–≥–æ–≤
    test_cases = [
        ('bybit', 'FRAGUSDT', 1298, 'Entry –æ—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, SL failed'),
        ('bybit', 'ORBSUSDT', 11990, 'Entry –æ—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, SL failed'),
        ('bybit', 'PEAQUSDT', 1280, 'Entry –æ—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, SL failed'),
        ('bybit', 'SOLAYERUSDT', 173, 'Entry –æ—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, SL failed'),
        ('bybit', 'WAVESUSDT', 200, 'Entry –æ—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–ª, SL failed'),
    ]

    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
    print()

    failures = []

    for exchange_name, symbol, expected_amount, note in test_cases:
        exchange = exchanges.get(exchange_name)
        if not exchange:
            print(f"‚ö†Ô∏è  {exchange_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}")
            continue

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –±–∏—Ä–∂–∏
        exchange_symbol = exchange.find_exchange_symbol(symbol)
        if not exchange_symbol:
            print(f"‚ùå {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {exchange_name}")
            continue

        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º: {symbol} ({exchange_name})")
        print(f"   –í—Ö–æ–¥–Ω–æ–π amount: {expected_amount}")
        print(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º market info
            market = exchange.exchange.market(exchange_symbol)
            limits = market.get('limits', {})
            amount_limits = limits.get('amount', {})
            min_amount = amount_limits.get('min', 0)
            max_amount = amount_limits.get('max', float('inf'))

            # –ü–æ–ª—É—á–∞–µ–º precision
            precision = market.get('precision', {})
            amount_precision = precision.get('amount', 8)

            print(f"   Market info:")
            print(f"     - Min amount: {min_amount}")
            print(f"     - Max amount: {max_amount}")
            print(f"     - Precision: {amount_precision}")

            # –í—ã–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            validated_amount = await exchange._validate_and_adjust_amount(
                exchange_symbol,
                float(expected_amount)
            )

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validated_amount}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if validated_amount == 0.0:
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê! Amount —Å—Ç–∞–ª 0.0")
                failures.append({
                    'symbol': symbol,
                    'exchange': exchange_name,
                    'input': expected_amount,
                    'output': validated_amount,
                    'min': min_amount,
                    'precision': amount_precision
                })
            elif validated_amount < min_amount:
                print(f"   ‚ö†Ô∏è  Amount {validated_amount} < min {min_amount}")
                failures.append({
                    'symbol': symbol,
                    'exchange': exchange_name,
                    'input': expected_amount,
                    'output': validated_amount,
                    'min': min_amount,
                    'precision': amount_precision
                })
            else:
                print(f"   ‚úÖ OK - Amount –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º quantize –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º quantize —Å ROUND_DOWN:")
            safe_precision = max(0, min(int(amount_precision), 18))
            step_size = 10 ** -safe_precision
            amount_decimal = Decimal(str(expected_amount))
            step_decimal = Decimal(str(step_size))
            quantized = float(amount_decimal.quantize(step_decimal, rounding=ROUND_DOWN))
            print(f"     - Safe precision: {safe_precision}")
            print(f"     - Step size: {step_size}")
            print(f"     - Quantized result: {quantized}")

            print()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            print()
            import traceback
            traceback.print_exc()

    # –ò—Ç–æ–≥–∏
    print("=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó")
    print("=" * 80)
    print()

    if failures:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(failures)} –ø—Ä–æ–±–ª–µ–º:")
        print()
        for f in failures:
            print(f"  {f['symbol']} ({f['exchange']}):")
            print(f"    Input: {f['input']} ‚Üí Output: {f['output']}")
            print(f"    Min required: {f['min']}")
            print(f"    Precision: {f['precision']}")
            print()

        print("üéØ –î–ò–ê–ì–ù–û–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù:")
        print("  - _validate_and_adjust_amount() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0 –∏–ª–∏ amount < min")
        print("  - –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏ —Å ROUND_DOWN")
        print("  - –ù—É–∂–µ–Ω —Ñ–∏–∫—Å!")
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —É—Å–ª–æ–≤–∏—è")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º connections
    for exchange in exchanges.values():
        await exchange.close()

if __name__ == "__main__":
    asyncio.run(test_validation())
