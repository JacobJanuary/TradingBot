#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª—é—á–∏ - Testnet –∏–ª–∏ Mainnet
"""
import asyncio
import aiohttp
import hmac
import hashlib
import time
import os
from dotenv import load_dotenv

load_dotenv()


async def check_endpoint(api_key, api_secret, endpoint_url, endpoint_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ endpoint"""
    
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    param_str = f"{timestamp}{api_key}{recv_window}"
    signature = hmac.new(
        api_secret.encode('utf-8'),
        param_str.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    headers = {
        'X-BAPI-API-KEY': api_key,
        'X-BAPI-SIGN': signature,
        'X-BAPI-TIMESTAMP': timestamp,
        'X-BAPI-RECV-WINDOW': recv_window,
        'Content-Type': 'application/json'
    }
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {endpoint_name}:")
    print(f"   URL: {endpoint_url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{endpoint_url}/v5/account/info", headers=headers) as response:
                data = await response.json()
                
                if data.get('retCode') == 0:
                    result = data.get('result', {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if result.get('uid') or result.get('accountType'):
                        print(f"   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢!")
                        print(f"   Account Type: {result.get('accountType', 'N/A')}")
                        print(f"   UID: {result.get('uid', 'N/A')}")
                        print(f"   Status: {result.get('status', 'N/A')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º unified status
                        unified = result.get('unifiedMarginStatus')
                        if unified == 1:
                            print(f"   ‚úÖ UNIFIED Account –∞–∫—Ç–∏–≤–µ–Ω")
                        elif unified == 0:
                            print(f"   ‚ùå Standard Account (–Ω–µ UNIFIED)")
                        else:
                            print(f"   ‚ö†Ô∏è Unified Status: {unified}")
                        
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
                        balance_url = f"{endpoint_url}/v5/account/wallet-balance?accountType=UNIFIED"
                        async with session.get(balance_url, headers=headers) as bal_response:
                            bal_data = await bal_response.json()
                            if bal_data.get('retCode') == 0:
                                coins = bal_data.get('result', {}).get('list', [])
                                if coins:
                                    for coin_data in coins:
                                        for coin in coin_data.get('coin', []):
                                            if coin['coin'] == 'USDT':
                                                balance = float(coin.get('walletBalance', 0))
                                                print(f"   üí∞ USDT Balance: {balance:.2f}")
                                                break
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
                        return False
                        
                elif data.get('retCode') == 10003:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ endpoint")
                    return False
                elif data.get('retCode') == 10001:
                    print(f"   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è UNIFIED account")
                    return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('retMsg')}")
                    return False
                    
    except Exception as e:
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')
    
    print("="*60)
    print("–ü–†–û–í–ï–†–ö–ê BYBIT API –ö–õ–Æ–ß–ï–ô")
    print("="*60)
    
    if not api_key or not api_secret:
        print("\n‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        print("\n–î–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        print("BYBIT_API_KEY=–≤–∞—à-–∫–ª—é—á")
        print("BYBIT_API_SECRET=–≤–∞—à-—Å–µ–∫—Ä–µ—Ç")
        return
    
    print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏:")
    print(f"API Key: {api_key[:8]}...")
    print(f"API Secret: ***")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ endpoint
    endpoints = [
        ("https://api-testnet.bybit.com", "TESTNET"),
        ("https://api.bybit.com", "MAINNET (Production)")
    ]
    
    working_endpoint = None
    
    for url, name in endpoints:
        result = await check_endpoint(api_key, api_secret, url, name)
        if result:
            working_endpoint = (url, name)
            break
    
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*60)
    
    if working_endpoint:
        url, name = working_endpoint
        print(f"\n‚úÖ –í–∞—à–∏ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å {name}")
        
        if "testnet" in url:
            print("\n‚úÖ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–ª—é—á–∏ –æ—Ç TESTNET")
            print("\n–ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ß—Ç–æ –∞–∫–∫–∞—É–Ω—Ç UNIFIED (–Ω–µ Standard)")
            print("2. –ß—Ç–æ —É –∫–ª—é—á–µ–π –µ—Å—Ç—å trading permissions")
            
        else:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö–ª—é—á–∏ –æ—Ç PRODUCTION (mainnet)")
            print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã –∫–ª—é—á–∏ –æ—Ç TESTNET:")
            print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
            print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (–æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç mainnet)")
            print("3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ UNIFIED account")
            print("4. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á–∏")
            print("5. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
    else:
        print("\n‚ùå –ö–ª—é—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º endpoint")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        print("2. –ö–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/—Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç UNIFIED")
        print("4. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")


if __name__ == "__main__":
    asyncio.run(main())