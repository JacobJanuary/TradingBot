#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Bybit UNIFIED Account
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit Testnet
"""

import asyncio
import ccxt.async_support as ccxt
import os
import sys
import json
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()


class BybitUnifiedSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bybit UNIFIED –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self):
        self.api_key = os.getenv('BYBIT_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET')
        self.exchange = None
        
    def print_header(self, text):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "="*60)
        print(f"  {text}")
        print("="*60)
    
    def print_step(self, number, text):
        """–®–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print(f"\nüìå –®–ê–ì {number}: {text}")
        print("-"*40)
    
    async def check_current_setup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("\n1Ô∏è‚É£ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        if self.api_key:
            print(f"   ‚úÖ BYBIT_API_KEY –Ω–∞–π–¥–µ–Ω: {self.api_key[:8]}...")
        else:
            print("   ‚ùå BYBIT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        if self.api_secret:
            print(f"   ‚úÖ BYBIT_API_SECRET –Ω–∞–π–¥–µ–Ω: ***")
        else:
            print("   ‚ùå BYBIT_API_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not self.api_key or not self.api_secret:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Testnet:")
        
        self.exchange = ccxt.bybit({
            'apiKey': self.api_key,
            'secret': self.api_secret,
            'testnet': True,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
                'accountType': 'UNIFIED'  # –ü—Ä–æ–±—É–µ–º —Å UNIFIED
            }
        })
        
        self.exchange.set_sandbox_mode(True)
        self.exchange.urls['api'] = {
            'public': 'https://api-testnet.bybit.com',
            'private': 'https://api-testnet.bybit.com'
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = await self.exchange.private_get_v5_account_info()
            result = account_info.get('result', {})
            
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            print(f"   Account Type: {result.get('accountType', 'UNKNOWN')}")
            print(f"   Unified Status: {result.get('unifiedMarginStatus', 0)}")
            
            if result.get('accountType') == 'UNIFIED':
                print(f"\n   üéâ –£ –≤–∞—Å —É–∂–µ UNIFIED –∞–∫–∫–∞—É–Ω—Ç!")
                return True
            else:
                print(f"\n   ‚ö†Ô∏è –£ –≤–∞—Å –ù–ï UNIFIED –∞–∫–∫–∞—É–Ω—Ç")
                return False
                
        except Exception as e:
            error_msg = str(e)
            if "accountType only support UNIFIED" in error_msg:
                print(f"   ‚ùå API —Ç—Ä–µ–±—É–µ—Ç UNIFIED –∞–∫–∫–∞—É–Ω—Ç")
                print(f"   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å UNIFIED –Ω–∞ testnet.bybit.com")
                return False
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                return False
    
    def show_manual_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–ö–¢–ò–í–ê–¶–ò–ò UNIFIED ACCOUNT")
        
        print("""
1. –û–¢–ö–†–û–ô–¢–ï –ë–†–ê–£–ó–ï–† –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞:
   üîó https://testnet.bybit.com

2. –í–û–ô–î–ò–¢–ï –≤ —Å–≤–æ–π testnet –∞–∫–∫–∞—É–Ω—Ç
   (–ï—Å–ª–∏ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å)

3. –ü–ï–†–ï–ô–î–ò–¢–ï –≤ —Ä–∞–∑–¥–µ–ª ASSETS (–ê–∫—Ç–∏–≤—ã)
   - –í –≤–µ—Ä—Ö–Ω–µ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "Assets"
   - –ò–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: https://testnet.bybit.com/en-US/assets/overview

4. –ü–†–û–í–ï–†–¨–¢–ï –¢–ò–ü –ê–ö–ö–ê–£–ù–¢–ê
   - –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é "Account Type"
   - –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ "Standard Account" - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è

5. –ê–ö–¢–ò–í–ò–†–£–ô–¢–ï UNIFIED ACCOUNT:
   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Upgrade to Unified Account"
   - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥
   - –ü—Ä–æ—Ü–µ—Å—Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π

6. –°–û–ó–î–ê–ô–¢–ï –ù–û–í–´–ï API –ö–õ–Æ–ß–ò:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "Account & Security" ‚Üí "API Management"
   - –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ —Å permissions:
     ‚úÖ Read-Write
     ‚úÖ Spot Trading - Trade
     ‚úÖ USDT Perpetual - Trade
     ‚úÖ Wallet - Account Transfer (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

7. –°–û–•–†–ê–ù–ò–¢–ï –ö–õ–Æ–ß–ò –≤ —Ñ–∞–π–ª .env:
   BYBIT_API_KEY=–Ω–æ–≤—ã–π-–∫–ª—é—á
   BYBIT_API_SECRET=–Ω–æ–≤—ã–π-—Å–µ–∫—Ä–µ—Ç

8. –ü–û–õ–£–ß–ò–¢–ï –¢–ï–°–¢–û–í–´–ï –°–†–ï–î–°–¢–í–ê:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "Assets" ‚Üí "Faucet"
   - –ó–∞–ø—Ä–æ—Å–∏—Ç–µ 10,000 USDT
   - –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
""")
        
        print("\n" + "="*60)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
    
    async def verify_unified_account(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ UNIFIED –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê UNIFIED ACCOUNT")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv(override=True)
        self.api_key = os.getenv('BYBIT_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET')
        
        if not self.api_key or not self.api_secret:
            print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.exchange = ccxt.bybit({
            'apiKey': self.api_key,
            'secret': self.api_secret,
            'testnet': True,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
                'accountType': 'UNIFIED'
            }
        })
        
        self.exchange.set_sandbox_mode(True)
        self.exchange.urls['api'] = {
            'public': 'https://api-testnet.bybit.com',
            'private': 'https://api-testnet.bybit.com'
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            account_info = await self.exchange.private_get_v5_account_info()
            result = account_info.get('result', {})
            account_type = result.get('accountType', 'UNKNOWN')
            
            if account_type != 'UNIFIED':
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –≤—Å—ë –µ—â—ë –Ω–µ UNIFIED: {account_type}")
                return False
            
            print(f"‚úÖ UNIFIED –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
            balance = await self.exchange.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            
            if usdt_balance > 0:
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
            else:
                print(f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å USDT: 0 (–ø–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞)")
            
            # –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            print("\nüîç –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            positions = await self.exchange.fetch_positions()
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
            ticker = await self.exchange.fetch_ticker('BTC/USDT:USDT')
            print(f"‚úÖ BTC/USDT: ${ticker['last']:,.2f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.exchange.close()
    
    async def create_config_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.print_header("–°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        config = {
            "exchanges": {
                "bybit": {
                    "enabled": True,
                    "testnet": True,
                    "api_key": "${BYBIT_API_KEY}",
                    "api_secret": "${BYBIT_API_SECRET}",
                    "options": {
                        "defaultType": "future",
                        "accountType": "UNIFIED",
                        "recvWindow": 60000,
                        "enableRateLimit": True
                    },
                    "ws_reconnect_delay": 5,
                    "ws_reconnect_delay_max": 60,
                    "ws_max_reconnect_attempts": -1,
                    "ws_heartbeat_interval": 30,
                    "ws_heartbeat_timeout": 60
                }
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        config_path = Path("config/bybit_unified.json")
        config_path.parent.mkdir(exist_ok=True)
        
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π config.yaml
        print("\nüìù –î–æ–±–∞–≤—å—Ç–µ –≤ config/config.yaml:")
        print("""
exchanges:
  bybit:
    enabled: true
    testnet: true
    api_key: ${BYBIT_API_KEY}
    api_secret: ${BYBIT_API_SECRET}
    options:
      defaultType: 'future'
      accountType: 'UNIFIED'  # –í–ê–ñ–ù–û!
""")
    
    async def test_trading(self):
        """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.print_header("–¢–ï–°–¢ –¢–û–†–ì–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
        
        if not self.exchange:
            print("‚ùå Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        try:
            symbol = 'BTC/USDT:USDT'
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {symbol}:")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            side = 'buy'
            amount = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            price = current_price * 0.95  # 5% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            
            print(f"   –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {side.upper()} {amount} BTC")
            print(f"   –õ–∏–º–∏—Ç —Ü–µ–Ω–∞: ${price:,.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.exchange.fetch_balance()
            usdt_free = balance.get('USDT', {}).get('free', 0)
            
            if usdt_free < price * amount:
                print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${usdt_free:.2f} USDT")
                print(f"   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${price * amount:.2f} USDT")
                return
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order = await self.exchange.create_order(
                symbol=symbol,
                type='limit',
                side=side,
                amount=amount,
                price=price
            )
            
            order_id = order['id']
            print(f"   ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω! ID: {order_id}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(2)
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
            await self.exchange.cancel_order(order_id, symbol)
            print(f"   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê BYBIT UNIFIED ACCOUNT")
        
        print("""
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å UNIFIED account
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
""")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        is_unified = await self.check_current_setup()
        
        if not is_unified:
            # –®–∞–≥ 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            self.print_step(2, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è UNIFIED Account")
            self.show_manual_instructions()
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            is_unified = await self.verify_unified_account()
            
            if not is_unified:
                print("\n‚ùå UNIFIED account –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ")
                return False
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.print_step(4, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        await self.create_config_file()
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.print_step(5, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        await self.test_trading()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.print_header("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("""
Bybit UNIFIED account –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py --mode shadow
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/trading_bot.log
3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:8000/metrics

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/BYBIT_UNIFIED_SETUP.md
""")
        
        return True


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    setup = BybitUnifiedSetup()
    
    try:
        success = await setup.run()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)