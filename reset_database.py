#!/usr/bin/env python3
"""
Database Reset Script
–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞

–£–¥–∞–ª—è–µ—Ç:
- –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (monitoring.positions)
- –í—Å–µ –æ—Ä–¥–µ—Ä–∞ (monitoring.orders)
- –í—Å–µ —Å–¥–µ–ª–∫–∏ (monitoring.trades)
- –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–æ–≤ (monitoring.risk_events, monitoring.risk_violations)
- –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ (monitoring.performance_metrics)
- –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (monitoring.event_log, monitoring.sync_status - –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)

–ù–ï —Ç—Ä–æ–≥–∞–µ—Ç:
- fas.scoring_history (—Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ websocket, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
"""

import asyncio
import asyncpg
from config.settings import Config
from datetime import datetime

async def check_tables_data(conn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ"""

    tables_to_check = [
        ('monitoring', 'positions'),
        ('monitoring', 'orders'),
        ('monitoring', 'trades'),
        ('monitoring', 'risk_events'),
        ('monitoring', 'risk_violations'),
        ('monitoring', 'performance_metrics'),
        ('monitoring', 'event_log'),
        ('monitoring', 'sync_status'),
    ]

    print("\n" + "="*60)
    print("üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60 + "\n")

    total_records = 0
    table_counts = []

    for schema, table in tables_to_check:
        try:
            count = await conn.fetchval(
                f"SELECT COUNT(*) FROM {schema}.{table}"
            )
            if count > 0:
                print(f"  {schema}.{table:25} ‚Üí {count:6} –∑–∞–ø–∏—Å–µ–π")
                table_counts.append((schema, table, count))
                total_records += count
        except Exception as e:
            # –¢–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–π)
            if "does not exist" not in str(e):
                print(f"  {schema}.{table:25} ‚Üí ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    print("\n" + "-"*60)
    print(f"  –í–°–ï–ì–û –ó–ê–ü–ò–°–ï–ô: {total_records}")
    print("-"*60 + "\n")

    return table_counts, total_records


async def truncate_all_tables(conn):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""

    tables_to_truncate = [
        ('monitoring', 'positions'),
        ('monitoring', 'orders'),
        ('monitoring', 'trades'),
        ('monitoring', 'risk_events'),
        ('monitoring', 'risk_violations'),
        ('monitoring', 'performance_metrics'),
        ('monitoring', 'event_log'),
        ('monitoring', 'sync_status'),
    ]

    print("\n" + "="*60)
    print("üóëÔ∏è  –û–ß–ò–°–¢–ö–ê –¢–ê–ë–õ–ò–¶")
    print("="*60 + "\n")

    truncated_count = 0

    for schema, table in tables_to_truncate:
        try:
            await conn.execute(
                f"TRUNCATE TABLE {schema}.{table} RESTART IDENTITY CASCADE"
            )
            print(f"  ‚úÖ {schema}.{table:25} ‚Üí –æ—á–∏—â–µ–Ω–∞")
            truncated_count += 1
        except Exception as e:
            if "does not exist" not in str(e):
                print(f"  ‚ö†Ô∏è  {schema}.{table:25} ‚Üí –û—à–∏–±–∫–∞: {e}")
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    print("\n" + "-"*60)
    print(f"  –û—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {truncated_count}")
    print("-"*60 + "\n")


async def verify_cleanup(conn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ"""

    tables_to_check = [
        ('monitoring', 'positions'),
        ('monitoring', 'orders'),
        ('monitoring', 'trades'),
        ('monitoring', 'risk_events'),
        ('monitoring', 'risk_violations'),
        ('monitoring', 'performance_metrics'),
        ('monitoring', 'event_log'),
        ('monitoring', 'sync_status'),
    ]

    print("\n" + "="*60)
    print("‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø")
    print("="*60 + "\n")

    all_clean = True

    for schema, table in tables_to_check:
        try:
            count = await conn.fetchval(
                f"SELECT COUNT(*) FROM {schema}.{table}"
            )
            if count == 0:
                print(f"  ‚úÖ {schema}.{table:25} ‚Üí –ø—É—Å—Ç–∞—è")
            else:
                print(f"  ‚ùå {schema}.{table:25} ‚Üí {count} –∑–∞–ø–∏—Å–µ–π (–ù–ï –û–ß–ò–©–ï–ù–ê!)")
                all_clean = False
        except Exception as e:
            if "does not exist" not in str(e):
                print(f"  ‚ö†Ô∏è  {schema}.{table:25} ‚Üí –û—à–∏–±–∫–∞: {e}")

    print("\n" + "-"*60)
    if all_clean:
        print("  ‚úÖ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –£–°–ü–ï–®–ù–û –û–ß–ò–©–ï–ù–´")
    else:
        print("  ‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ê–ë–õ–ò–¶–´ –ù–ï –û–ß–ò–©–ï–ù–´")
    print("-"*60 + "\n")

    return all_clean


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    config = Config()
    db_config = config.database

    print("\n" + "="*60)
    print("üîÑ –°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    print(f"\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_config.database}")
    print(f"–•–æ—Å—Ç: {db_config.host}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = await asyncpg.connect(
        host=db_config.host,
        port=db_config.port,
        user=db_config.user,
        password=db_config.password,
        database=db_config.database
    )

    try:
        # 1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        table_counts, total_records = await check_tables_data(conn)

        if total_records == 0:
            print("‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞—è. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.\n")
            return

        # 2. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–ê –û–ü–ï–†–ê–¶–ò–Ø –ù–ï–û–ë–†–ê–¢–ò–ú–ê!")
        print("   –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.\n")

        confirmation = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï? (yes/no): ").strip().lower()

        if confirmation != 'yes':
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n")
            return

        # –í—Ç–æ—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        confirmation2 = input(f"\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ {total_records} –∑–∞–ø–∏—Å–µ–π (–≤–≤–µ–¥–∏—Ç–µ 'DELETE'): ").strip()

        if confirmation2 != 'DELETE':
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n")
            return

        # 3. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        await truncate_all_tables(conn)

        # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_clean = await verify_cleanup(conn)

        # 5. –ò—Ç–æ–≥
        print("\n" + "="*60)
        if all_clean:
            print("üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –û–ß–ò–©–ï–ù–ê")
            print("   –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
        else:
            print("‚ö†Ô∏è  –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")
        print("="*60 + "\n")

    finally:
        await conn.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)\n")
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}\n")
        raise
