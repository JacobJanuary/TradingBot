#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è _position_exists()

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ô –∫–æ–¥ –∏–∑ core/position_manager.py
—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
from decimal import Decimal

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from config.settings import TradingConfig
from core.position_manager import PositionManager, PositionState
from database.repository import Repository as TradingRepository
from websocket.event_router import EventRouter


class MockExchangeManager:
    """Mock exchange"""
    def __init__(self, exchange_id: str):
        self.id = exchange_id
        self.exchange = self  # For compatibility

    async def fetch_positions(self, **params):
        return []


class MockRepository:
    """Mock repository"""
    async def get_open_position(self, symbol: str, exchange: str):
        return None


class MockEventRouter:
    """Mock event router"""
    async def route_event(self, event_type, data):
        pass


async def test_fix():
    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø _position_exists()")
    print("=" * 80)
    print()
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô –∫–æ–¥ –∏–∑ core/position_manager.py")
    print()

    # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TradingConfig()

    # –°–æ–∑–¥–∞—ë–º mock exchanges
    exchanges = {
        'binance': MockExchangeManager('binance'),
        'bybit': MockExchangeManager('bybit')
    }

    # –°–æ–∑–¥–∞—ë–º mock repository –∏ event router
    repository = MockRepository()
    event_router = MockEventRouter()

    # –°–æ–∑–¥–∞—ë–º –†–ï–ê–õ–¨–ù–´–ô PositionManager
    pm = PositionManager(
        config=config,
        exchanges=exchanges,
        repository=repository,
        event_router=event_router
    )

    print("‚úÖ PositionManager —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º")
    print()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é B3USDT –Ω–∞ BINANCE –≤ –∫—ç—à
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º B3USDT –ø–æ–∑–∏—Ü–∏—é –Ω–∞ BINANCE –≤ –∫—ç—à")
    position_state = PositionState(
        id=874,
        symbol='B3USDT',
        exchange='binance',
        side='short',
        quantity=Decimal('100'),
        entry_price=Decimal('0.002167'),
        current_price=Decimal('0.002167'),
        unrealized_pnl=Decimal('0'),
        unrealized_pnl_percent=Decimal('0'),
        has_stop_loss=True,
        stop_loss_price=Decimal('0.00221'),
        has_trailing_stop=True,
        trailing_activated=True,
        opened_at=datetime.now(),
        age_hours=1
    )

    pm.positions['B3USDT'] = position_state
    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {position_state.symbol} –Ω–∞ {position_state.exchange}")
    print()

    # –¢–ï–°–¢ #1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–π –∂–µ –±–∏—Ä–∂–µ
    print("=" * 80)
    print("–¢–ï–°–¢ #1: _position_exists('B3USDT', 'binance')")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: TRUE (–ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ binance)")
    print("-" * 80)

    result1 = await pm._position_exists('B3USDT', 'binance')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")

    if result1:
        print("‚úÖ PASS: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª TRUE")
        test1_passed = True
    else:
        print("‚ùå FAIL: –î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å TRUE!")
        test1_passed = False
    print()

    # –¢–ï–°–¢ #2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –î–†–£–ì–û–ô –±–∏—Ä–∂–µ (–ö–†–ò–¢–ò–ß–ù–´–ô!)
    print("=" * 80)
    print("–¢–ï–°–¢ #2: _position_exists('B3USDT', 'bybit') - –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢!")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: FALSE (–ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ binance, –ù–ï –Ω–∞ bybit)")
    print("=" * 80)
    print()

    result2 = await pm._position_exists('B3USDT', 'bybit')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    print()

    if result2:
        print("‚ùå FAIL: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("   –í–µ—Ä–Ω—É–ª TRUE —Ö–æ—Ç—è –ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ binance!")
        print("   –ë–∞–≥ –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        test2_passed = False
        bug_still_exists = True
    else:
        print("‚úÖ PASS: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª FALSE!")
        print("   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        test2_passed = True
        bug_still_exists = False
    print()

    # –¢–ï–°–¢ #3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
    print("=" * 80)
    print("–¢–ï–°–¢ #3: _position_exists('ETHUSDT', 'binance')")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: FALSE (–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç)")
    print("-" * 80)

    result3 = await pm._position_exists('ETHUSDT', 'binance')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")

    if not result3:
        print("‚úÖ PASS: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª FALSE")
        test3_passed = True
    else:
        print("‚ùå FAIL: –î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å FALSE!")
        test3_passed = False
    print()

    # –ò—Ç–æ–≥–∏
    print("=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 80)
    print()

    tests = [
        ("–¢–µ—Å—Ç #1 (—Ç–∞ –∂–µ –±–∏—Ä–∂–∞)", test1_passed),
        ("–¢–µ—Å—Ç #2 (–¥—Ä—É–≥–∞—è –±–∏—Ä–∂–∞) - –ö–†–ò–¢–ò–ß–ù–´–ô", test2_passed),
        ("–¢–µ—Å—Ç #3 (–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)", test3_passed)
    ]

    for name, passed in tests:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status}: {name}")

    passed_count = sum(1 for _, p in tests if p)
    print()
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_count}/3 —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    print()

    if bug_still_exists:
        print("=" * 80)
        print("üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ë–ê–ì –í–°–Å –ï–©–Å –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢!")
        print("=" * 80)
        return 1
    elif passed_count == 3:
        print("=" * 80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("=" * 80)
        return 0
    else:
        print("=" * 80)
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("=" * 80)
        return 2


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(test_fix())
        sys.exit(exit_code)
    except Exception as e:
        print()
        print("=" * 80)
        print("‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê")
        print("=" * 80)
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(2)
