#!/usr/bin/env python3
"""
–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤–∏—Å—è—â–∏—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import ccxt.async_support as ccxt
from config.settings import Config
from datetime import datetime

async def main():
    print("=" * 80)
    print("üßπ –û–¢–ú–ï–ù–ê –í–ò–°–Ø–©–ò–• SL/TP –û–†–î–ï–†–û–í")
    print("=" * 80)
    print()

    config = Config()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Binance
    binance_config = config.exchanges.get('binance')
    if not binance_config:
        print("‚ùå Binance –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance
    exchange = ccxt.binance({
        'apiKey': binance_config.api_key,
        'secret': binance_config.api_secret,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'recvWindow': 60000,
            'warnOnFetchOpenOrdersWithoutSymbol': False,
        }
    })

    if binance_config.testnet:
        exchange.set_sandbox_mode(True)
        print("‚ö†Ô∏è  TESTNET MODE")
        print()

    try:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Futures...")
        print()

        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("=" * 80)
        print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô")
        print("=" * 80)
        print()

        positions = await exchange.fetch_positions()
        open_positions = [p for p in positions if float(p.get('contracts', 0)) != 0]
        open_symbols = {p['symbol'] for p in open_positions}

        print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
        if open_positions:
            print("‚ö†Ô∏è  –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for pos in open_positions:
                print(f"   ‚Ä¢ {pos['symbol']}: {pos['side']} {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        else:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        print()

        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("=" * 80)
        print("2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í")
        print("=" * 80)
        print()

        open_orders = await exchange.fetch_open_orders()
        print(f"üìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
        print()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞
        dangling_orders = []  # –í–∏—Å—è—â–∏–µ (–±–µ–∑ –ø–æ–∑–∏—Ü–∏–π)
        active_orders = []    # –ê–∫—Ç–∏–≤–Ω—ã–µ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏)

        for order in open_orders:
            symbol = order['symbol']
            order_type = order.get('type', 'unknown')
            reduce_only = order.get('reduceOnly', False)

            # SL/TP –æ—Ä–¥–µ—Ä–∞ —Å reduceOnly
            if order_type in ['stop_market', 'take_profit_market', 'stop_loss', 'stop'] and reduce_only:
                if symbol in open_symbols:
                    active_orders.append(order)
                else:
                    dangling_orders.append(order)

        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏): {len(active_orders)}")
        print(f"‚ö†Ô∏è  –í–∏—Å—è—â–∏—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤ (–ë–ï–ó –ø–æ–∑–∏—Ü–∏–π): {len(dangling_orders)}")
        print()

        if not dangling_orders:
            print("üéâ –í–∏—Å—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç! –í—Å–µ —á–∏—Å—Ç–æ.")
            print()
            return

        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º –æ—Ç–º–µ–Ω—è—Ç—å
        print("=" * 80)
        print("3Ô∏è‚É£ –°–ü–ò–°–û–ö –í–ò–°–Ø–©–ò–• –û–†–î–ï–†–û–í –î–õ–Ø –û–¢–ú–ï–ù–´")
        print("=" * 80)
        print()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        by_symbol = {}
        for order in dangling_orders:
            symbol = order['symbol']
            if symbol not in by_symbol:
                by_symbol[symbol] = []
            by_symbol[symbol].append(order)

        print(f"üìä –°–∏–º–≤–æ–ª–æ–≤ —Å –≤–∏—Å—è—â–∏–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏: {len(by_symbol)}")
        print()

        for symbol, orders in sorted(by_symbol.items()):
            print(f"   {symbol}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            for order in orders:
                order_type = order['type']
                side = order['side']
                stop_price = order.get('info', {}).get('stopPrice', 'N/A')
                amount = order['amount']
                print(f"      ‚Ä¢ {order_type} {side} @ {stop_price} ({amount} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤) [ID: {order['id']}]")
        print()

        # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("=" * 80)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
        print("=" * 80)
        print()
        print(f"–ë—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ: {len(dangling_orders)} –≤–∏—Å—è—â–∏—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏): {len(active_orders)} - –ù–ï –±—É–¥—É—Ç —Ç—Ä–æ–Ω—É—Ç—ã")
        print()
        print("–≠—Ç–∏ –æ—Ä–¥–µ—Ä–∞ –≤–∏—Å—è—Ç –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        print()

        confirmation = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
        if confirmation != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return

        print()
        print("=" * 80)
        print("4Ô∏è‚É£ –û–¢–ú–ï–ù–ê –û–†–î–ï–†–û–í")
        print("=" * 80)
        print()

        # 5. –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞
        canceled = 0
        failed = 0
        errors = []

        for i, order in enumerate(dangling_orders, 1):
            symbol = order['symbol']
            order_id = order['id']
            order_type = order['type']
            side = order['side']

            try:
                await exchange.cancel_order(order_id, symbol)
                print(f"   [{i}/{len(dangling_orders)}] ‚úÖ {symbol} - {order_type} {side} (ID: {order_id})")
                canceled += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit
                if i % 10 == 0:
                    await asyncio.sleep(0.5)

            except Exception as e:
                error_msg = str(e)
                print(f"   [{i}/{len(dangling_orders)}] ‚ùå {symbol} - {order_type} {side} (ID: {order_id})")
                print(f"      –û—à–∏–±–∫–∞: {error_msg[:80]}")
                failed += 1
                errors.append({
                    'symbol': symbol,
                    'order_id': order_id,
                    'error': error_msg
                })

        print()
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 80)
        print()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {canceled}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã: {failed}")
        print()

        if errors:
            print("–û—à–∏–±–∫–∏:")
            for err in errors[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"   ‚Ä¢ {err['symbol']} (ID: {err['order_id']}): {err['error'][:60]}")
            if len(errors) > 10:
                print(f"   ... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫")
            print()

        if canceled == len(dangling_orders):
            print("üéâ –í–°–ï –í–ò–°–Ø–©–ò–ï –û–†–î–ï–†–ê –£–°–ü–ï–®–ù–û –û–¢–ú–ï–ù–ï–ù–´!")
        elif canceled > 0:
            print("‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")

        print()

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("=" * 80)
        print("5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        print("=" * 80)
        print()

        final_orders = await exchange.fetch_open_orders()
        final_sl_tp = [o for o in final_orders
                       if o['type'] in ['stop_market', 'take_profit_market', 'stop_loss', 'stop']
                       and o.get('reduceOnly', False)
                       and o['symbol'] not in open_symbols]

        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∏—Å—è—â–∏—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤: {len(final_sl_tp)}")
        print()

        if len(final_sl_tp) == 0:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û! –í–∏—Å—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        else:
            print("‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –≤–∏—Å—è—â–∏–µ –æ—Ä–¥–µ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å):")
            for order in final_sl_tp[:10]:
                print(f"   ‚Ä¢ {order['symbol']}: {order['type']} {order['side']} (ID: {order['id']})")

        print()
        print("=" * 80)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

if __name__ == "__main__":
    asyncio.run(main())
