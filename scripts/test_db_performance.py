#!/usr/bin/env python3
"""
–¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DB –º–µ—Ç–æ–¥–æ–≤

–ò–∑–º–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ repository.py:
- get_open_positions()
- save_trailing_stop_state()
- create_position()
- update_position()
- get_position_by_id()

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û –ò–ó–ú–ï–†–ï–ù–ò–ï! –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê!
"""
import asyncio
import sys
import time
from pathlib import Path
from typing import Dict, List

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from dotenv import load_dotenv
load_dotenv()

from config.settings import Config
from database.repository import Repository


class PerformanceTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DB"""

    def __init__(self, repository: Repository):
        self.repo = repository
        self.results: List[Dict] = []

    async def measure_method(self, method_name: str, coro, timeout: float = 10.0) -> Dict:
        """
        –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º

        Returns:
            {
                'method': str,
                'duration': float,
                'success': bool,
                'error': str or None,
                'timed_out': bool
            }
        """
        result = {
            'method': method_name,
            'duration': 0.0,
            'success': False,
            'error': None,
            'timed_out': False
        }

        start = time.time()
        try:
            await asyncio.wait_for(coro, timeout=timeout)
            result['duration'] = time.time() - start
            result['success'] = True
        except asyncio.TimeoutError:
            result['duration'] = time.time() - start
            result['timed_out'] = True
            result['error'] = f"Timeout after {timeout}s"
        except Exception as e:
            result['duration'] = time.time() - start
            result['error'] = str(e)

        return result

    async def test_get_open_positions(self) -> Dict:
        """–¢–µ—Å—Ç: get_open_positions()"""
        print("\nüìä Testing: get_open_positions()")

        async def run():
            positions = await self.repo.get_open_positions()
            print(f"  ‚úÖ Fetched {len(positions)} positions")
            return positions

        result = await self.measure_method('get_open_positions', run(), timeout=5.0)
        self.results.append(result)

        if result['success']:
            print(f"  ‚è±Ô∏è  Duration: {result['duration']*1000:.2f}ms")
        elif result['timed_out']:
            print(f"  ‚ùå TIMED OUT after {result['duration']:.2f}s")
        else:
            print(f"  ‚ùå ERROR: {result['error']}")

        return result

    async def test_get_position_by_id(self, position_id: int) -> Dict:
        """–¢–µ—Å—Ç: get_position_by_id()"""
        print(f"\nüìä Testing: get_position_by_id({position_id})")

        async def run():
            position = await self.repo.get_position_by_id(position_id)
            if position:
                print(f"  ‚úÖ Found position: {position.get('symbol')}")
            else:
                print(f"  ‚ö†Ô∏è  Position not found")
            return position

        result = await self.measure_method('get_position_by_id', run(), timeout=3.0)
        self.results.append(result)

        if result['success']:
            print(f"  ‚è±Ô∏è  Duration: {result['duration']*1000:.2f}ms")
        elif result['timed_out']:
            print(f"  ‚ùå TIMED OUT after {result['duration']:.2f}s")
        else:
            print(f"  ‚ùå ERROR: {result['error']}")

        return result

    async def test_get_trailing_stop_state(self, symbol: str, exchange: str) -> Dict:
        """–¢–µ—Å—Ç: get_trailing_stop_state()"""
        print(f"\nüìä Testing: get_trailing_stop_state({symbol}, {exchange})")

        async def run():
            state = await self.repo.get_trailing_stop_state(symbol, exchange)
            if state:
                print(f"  ‚úÖ Found TS state: {state.get('state')}")
            else:
                print(f"  ‚ö†Ô∏è  TS state not found")
            return state

        result = await self.measure_method('get_trailing_stop_state', run(), timeout=3.0)
        self.results.append(result)

        if result['success']:
            print(f"  ‚è±Ô∏è  Duration: {result['duration']*1000:.2f}ms")
        elif result['timed_out']:
            print(f"  ‚ùå TIMED OUT after {result['duration']:.2f}s")
        else:
            print(f"  ‚ùå ERROR: {result['error']}")

        return result

    async def test_multiple_get_open_positions(self, count: int = 10) -> Dict:
        """–¢–µ—Å—Ç: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã get_open_positions() –ø–æ–¥—Ä—è–¥"""
        print(f"\nüìä Testing: {count} sequential get_open_positions() calls")

        durations = []
        errors = 0
        timeouts = 0

        for i in range(count):
            async def run():
                return await self.repo.get_open_positions()

            result = await self.measure_method(f'get_open_positions_{i}', run(), timeout=5.0)

            if result['success']:
                durations.append(result['duration'])
            elif result['timed_out']:
                timeouts += 1
            else:
                errors += 1

        if durations:
            avg = sum(durations) / len(durations)
            min_time = min(durations)
            max_time = max(durations)

            print(f"  ‚úÖ Successful calls: {len(durations)}/{count}")
            print(f"  ‚è±Ô∏è  Average: {avg*1000:.2f}ms")
            print(f"  ‚è±Ô∏è  Min: {min_time*1000:.2f}ms")
            print(f"  ‚è±Ô∏è  Max: {max_time*1000:.2f}ms")

            if timeouts > 0:
                print(f"  ‚ö†Ô∏è  Timeouts: {timeouts}")
            if errors > 0:
                print(f"  ‚ùå Errors: {errors}")

        result = {
            'method': 'get_open_positions_sequential',
            'count': count,
            'successful': len(durations),
            'timeouts': timeouts,
            'errors': errors,
            'avg_duration': sum(durations) / len(durations) if durations else 0,
            'min_duration': min(durations) if durations else 0,
            'max_duration': max(durations) if durations else 0
        }
        self.results.append(result)

        return result

    async def test_concurrent_get_open_positions(self, count: int = 5) -> Dict:
        """–¢–µ—Å—Ç: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã get_open_positions()"""
        print(f"\nüìä Testing: {count} concurrent get_open_positions() calls")

        async def single_call():
            start = time.time()
            try:
                positions = await asyncio.wait_for(
                    self.repo.get_open_positions(),
                    timeout=5.0
                )
                duration = time.time() - start
                return {'success': True, 'duration': duration, 'count': len(positions)}
            except asyncio.TimeoutError:
                duration = time.time() - start
                return {'success': False, 'duration': duration, 'timed_out': True}
            except Exception as e:
                duration = time.time() - start
                return {'success': False, 'duration': duration, 'error': str(e)}

        start_all = time.time()
        results = await asyncio.gather(*[single_call() for _ in range(count)])
        total_duration = time.time() - start_all

        successful = [r for r in results if r['success']]
        timeouts = [r for r in results if r.get('timed_out')]
        errors = [r for r in results if not r['success'] and not r.get('timed_out')]

        print(f"  ‚úÖ Successful calls: {len(successful)}/{count}")
        print(f"  ‚è±Ô∏è  Total time: {total_duration*1000:.2f}ms")

        if successful:
            avg = sum(r['duration'] for r in successful) / len(successful)
            print(f"  ‚è±Ô∏è  Average per call: {avg*1000:.2f}ms")

        if timeouts:
            print(f"  ‚ö†Ô∏è  Timeouts: {len(timeouts)}")
        if errors:
            print(f"  ‚ùå Errors: {len(errors)}")

        result = {
            'method': 'get_open_positions_concurrent',
            'count': count,
            'successful': len(successful),
            'timeouts': len(timeouts),
            'errors': len(errors),
            'total_duration': total_duration,
            'avg_duration': sum(r['duration'] for r in successful) / len(successful) if successful else 0
        }
        self.results.append(result)

        return result

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("SUMMARY REPORT")
        print("="*80)

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
        critical_methods = ['get_open_positions', 'get_position_by_id', 'get_trailing_stop_state']

        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´:")
        print(f"{'Method':<40} {'Duration':<15} {'Status':<15}")
        print("-"*80)

        for result in self.results:
            method = result.get('method', 'unknown')
            if any(m in method for m in critical_methods):
                duration = result.get('duration', 0) * 1000

                if result.get('success'):
                    status = "‚úÖ OK"
                    if duration < 50:
                        status += " (FAST)"
                    elif duration < 200:
                        status += " (NORMAL)"
                    else:
                        status += " (SLOW)"
                elif result.get('timed_out'):
                    status = "‚ùå TIMEOUT"
                else:
                    status = f"‚ùå ERROR: {result.get('error', 'unknown')[:20]}"

                print(f"{method:<40} {duration:>10.2f}ms    {status:<15}")

        # –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        print("\nüîÑ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –í–´–ó–û–í–´:")
        for result in self.results:
            if 'sequential' in result.get('method', '') or 'concurrent' in result.get('method', ''):
                print(f"\n{result['method']}:")
                print(f"  Total: {result.get('count', 0)} calls")
                print(f"  Successful: {result.get('successful', 0)}")
                print(f"  Average: {result.get('avg_duration', 0)*1000:.2f}ms")
                if result.get('timeouts', 0) > 0:
                    print(f"  ‚ö†Ô∏è  Timeouts: {result['timeouts']}")
                if result.get('errors', 0) > 0:
                    print(f"  ‚ùå Errors: {result['errors']}")

        # –í—ã–≤–æ–¥—ã
        print("\nüìã –í–´–í–û–î–´:")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è
        timeouts = [r for r in self.results if r.get('timed_out')]
        if timeouts:
            print(f"  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: {len(timeouts)} –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–∏—Å–ª–∏!")
            for t in timeouts:
                print(f"     - {t['method']}")
        else:
            print(f"  ‚úÖ –ó–∞–≤–∏—Å–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        slow_methods = [r for r in self.results
                       if r.get('success') and r.get('duration', 0) > 0.2]  # >200ms
        if slow_methods:
            print(f"  ‚ö†Ô∏è  {len(slow_methods)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (>200ms):")
            for s in slow_methods:
                print(f"     - {s['method']}: {s['duration']*1000:.2f}ms")
        else:
            print(f"  ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –±—ã—Å—Ç—Ä—ã–µ (<200ms)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        errors = [r for r in self.results if r.get('error') and not r.get('timed_out')]
        if errors:
            print(f"  ‚ùå {len(errors)} –º–µ—Ç–æ–¥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏:")
            for e in errors:
                print(f"     - {e['method']}: {e['error'][:50]}")
        else:
            print(f"  ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")


async def main():
    print("="*80)
    print("–¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*80)
    print()
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö DB –º–µ—Ç–æ–¥–æ–≤")
    print("–¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π.")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¢–û–õ–¨–ö–û –ß–ò–¢–ê–ï–¢ –¥–∞–Ω–Ω—ã–µ, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –¥–µ–ª–∞–µ—Ç!")
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = Config()
    db_config = {
        'host': config.database.host,
        'port': config.database.port,
        'database': config.database.database,
        'user': config.database.user,
        'password': config.database.password,
        'pool_size': config.database.pool_size,
        'max_overflow': config.database.max_overflow
    }
    repo = Repository(db_config)
    await repo.initialize()

    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db_config['host']}:{db_config['port']}/{db_config['database']}")
    print()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = PerformanceTest(repo)

    # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω—ã–π get_open_positions()
    await tester.test_get_open_positions()

    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    await tester.test_multiple_get_open_positions(count=10)

    # –¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã (–∫–∞–∫ –≤ –≤–æ–ª–Ω–µ)
    await tester.test_concurrent_get_open_positions(count=5)

    # –¢–µ—Å—Ç 4: get_position_by_id (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏)
    positions = await repo.get_open_positions()
    if positions:
        first_position = positions[0]
        await tester.test_get_position_by_id(first_position['id'])

        # –¢–µ—Å—Ç 5: get_trailing_stop_state
        await tester.test_get_trailing_stop_state(
            first_position['symbol'],
            first_position['exchange']
        )
    else:
        print("\n‚ö†Ô∏è  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è get_position_by_id()")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    tester.print_summary()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await repo.close()

    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("="*80)


if __name__ == '__main__':
    asyncio.run(main())
