#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ maxNotionalValue –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
–¶–µ–ª—å: –ø–æ–Ω—è—Ç—å –∫–æ–≥–¥–∞ Binance –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 vs —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
"""
import asyncio
import os
from dotenv import load_dotenv
import ccxt.async_support as ccxt

load_dotenv()

async def test_multiple_symbols():
    """Test maxNotionalValue for multiple symbols"""

    exchange = ccxt.binanceusdm({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_API_SECRET'),
        'options': {
            'defaultType': 'future',
            'testnet': True
        }
    })

    try:
        print("="*80)
        print("TEST: maxNotionalValue –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        print("="*80)

        # Test symbols: some with open positions, some without
        test_symbols = [
            'NEWTUSDT',       # Filtered (maxNotional=0)
            '1000RATSUSDT',   # Successfully opened
            'FLRUSDT',        # Failed (no liquidity on Bybit, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º Binance)
            'BTCUSDT',        # Popular symbol
            'ETHUSDT',        # Popular symbol
        ]

        results = []

        for symbol_clean in test_symbols:
            try:
                print(f"\n{'='*60}")
                print(f"Symbol: {symbol_clean}")
                print(f"{'='*60}")

                position_risk = await exchange.fapiPrivateV2GetPositionRisk({
                    'symbol': symbol_clean
                })

                if isinstance(position_risk, list) and len(position_risk) > 0:
                    risk = position_risk[0]

                    max_notional_str = risk.get('maxNotionalValue', 'INF')
                    notional = risk.get('notional', '0')
                    position_amt = risk.get('positionAmt', '0')
                    leverage = risk.get('leverage', '0')

                    print(f"  maxNotionalValue: {max_notional_str}")
                    print(f"  notional:         {notional}")
                    print(f"  positionAmt:      {position_amt}")
                    print(f"  leverage:         {leverage}")

                    max_val = float(max_notional_str) if max_notional_str != 'INF' else float('inf')

                    results.append({
                        'symbol': symbol_clean,
                        'maxNotional': max_val,
                        'notional': float(notional),
                        'positionAmt': float(position_amt),
                        'has_position': float(position_amt) != 0
                    })

                    if max_val == 0:
                        print(f"  ‚ö†Ô∏è maxNotionalValue = 0 (has_position={float(position_amt) != 0})")
                    elif max_val == float('inf'):
                        print(f"  ‚úÖ maxNotionalValue = INF")
                    else:
                        print(f"  ‚úÖ maxNotionalValue = ${max_val:.2f}")

            except Exception as e:
                print(f"  üî¥ ERROR: {e}")

        # Summary
        print(f"\n{'='*80}")
        print("SUMMARY:")
        print(f"{'='*80}")

        zero_notionals = [r for r in results if r['maxNotional'] == 0]
        non_zero_notionals = [r for r in results if r['maxNotional'] > 0 and r['maxNotional'] != float('inf')]

        print(f"\n–°–∏–º–≤–æ–ª—ã —Å maxNotional = 0:")
        for r in zero_notionals:
            print(f"  - {r['symbol']}: position_amt={r['positionAmt']}, has_position={r['has_position']}")

        print(f"\n–°–∏–º–≤–æ–ª—ã —Å maxNotional > 0:")
        for r in non_zero_notionals:
            print(f"  - {r['symbol']}: ${r['maxNotional']:.2f} (position_amt={r['positionAmt']})")

        print(f"\n{'='*80}")
        print("–í–´–í–û–î:")
        print(f"{'='*80}")

        if all(r['maxNotional'] == 0 and not r['has_position'] for r in zero_notionals):
            print("‚úÖ –ì–ò–ü–û–¢–ï–ó–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
            print("   maxNotional = 0 –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –ë–ï–ó –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π!")
            print("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–æ–¥ –î–û–õ–ñ–ï–ù –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å maxNotional=0")
            print("   –∏ —Å—á–∏—Ç–∞—Ç—å –µ–≥–æ –∫–∞–∫ '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'.")
        elif any(r['maxNotional'] == 0 and r['has_position'] for r in zero_notionals):
            print("‚ùå –ì–ò–ü–û–¢–ï–ó–ê –û–ü–†–û–í–ï–†–ì–ù–£–¢–ê:")
            print("   maxNotional = 0 –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!")
        else:
            print("‚ö†Ô∏è –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–û: –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        print(f"\nüî¥ EXCEPTION: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

if __name__ == '__main__':
    asyncio.run(test_multiple_symbols())
