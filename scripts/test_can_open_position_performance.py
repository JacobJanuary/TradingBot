#!/usr/bin/env python3
"""
–¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ can_open_position()

–ò–∑–º–µ—Ä—è–µ—Ç:
1. –í—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ API –≤—ã–∑–æ–≤–∞ (fetch_balance, fetch_positions, positionRisk)
2. –û–±—â–µ–µ –≤—Ä–µ–º—è can_open_position()
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö vs –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
4. –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û –ò–ó–ú–ï–†–ï–ù–ò–ï! –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê!
"""
import asyncio
import sys
import time
from pathlib import Path
from typing import Dict, List

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from dotenv import load_dotenv
load_dotenv()

from config.settings import Config
from core.exchange_manager import ExchangeManager


async def measure_api_call(name: str, coro, timeout: float = 10.0) -> Dict:
    """–ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è API –≤—ã–∑–æ–≤–∞"""
    start = time.time()
    try:
        result = await asyncio.wait_for(coro, timeout=timeout)
        duration = time.time() - start
        return {
            'name': name,
            'success': True,
            'duration': duration,
            'result_size': len(result) if isinstance(result, (list, dict)) else 1
        }
    except asyncio.TimeoutError:
        duration = time.time() - start
        return {
            'name': name,
            'success': False,
            'duration': duration,
            'error': f'Timeout after {timeout}s'
        }
    except Exception as e:
        duration = time.time() - start
        return {
            'name': name,
            'success': False,
            'duration': duration,
            'error': str(e)[:100]
        }


async def test_individual_api_calls(exchange: ExchangeManager):
    """–¢–µ—Å—Ç 1: –ò–∑–º–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π API –≤—ã–∑–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 1: –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï API –í–´–ó–û–í–´")
    print("="*80)

    results = []

    # Test 1.1: fetch_balance()
    print("\nüìä Testing: fetch_balance()")
    result = await measure_api_call(
        'fetch_balance',
        exchange.exchange.fetch_balance()
    )
    results.append(result)

    if result['success']:
        print(f"  ‚úÖ Success: {result['duration']*1000:.2f}ms")
    else:
        print(f"  ‚ùå Error: {result['error']}")

    # Test 1.2: fetch_positions()
    print("\nüìä Testing: fetch_positions()")
    result = await measure_api_call(
        'fetch_positions',
        exchange.exchange.fetch_positions()
    )
    results.append(result)

    if result['success']:
        print(f"  ‚úÖ Success: {result['duration']*1000:.2f}ms ({result['result_size']} positions)")
    else:
        print(f"  ‚ùå Error: {result['error']}")

    # Test 1.3: fapiPrivateV2GetPositionRisk() (Binance specific)
    if exchange.name == 'binance':
        print("\nüìä Testing: fapiPrivateV2GetPositionRisk()")
        try:
            result = await measure_api_call(
                'fapiPrivateV2GetPositionRisk',
                exchange.exchange.fapiPrivateV2GetPositionRisk({})
            )
            results.append(result)

            if result['success']:
                print(f"  ‚úÖ Success: {result['duration']*1000:.2f}ms")
            else:
                print(f"  ‚ùå Error: {result['error']}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Skipped: {e}")

    # Summary
    print("\n" + "-"*80)
    print("–ò–¢–û–ì–ò:")
    successful = [r for r in results if r['success']]
    if successful:
        total_time = sum(r['duration'] for r in successful)
        print(f"  –í—Å–µ–≥–æ API –≤—ã–∑–æ–≤–æ–≤: {len(successful)}")
        print(f"  –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_time*1000:.2f}ms")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(total_time/len(successful))*1000:.2f}ms")

    return results


async def test_can_open_position_single(exchange: ExchangeManager, symbol: str, size_usd: float):
    """–¢–µ—Å—Ç 2: –û–¥–∏–Ω–æ—á–Ω—ã–π can_open_position()"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 2: –û–î–ò–ù–û–ß–ù–´–ô can_open_position()")
    print("="*80)
    print(f"Symbol: {symbol}, Size: ${size_usd}")

    start = time.time()
    try:
        can_open, reason = await asyncio.wait_for(
            exchange.can_open_position(symbol, size_usd),
            timeout=10.0
        )
        duration = time.time() - start

        print(f"\n  ‚úÖ Result: {can_open}")
        print(f"  Reason: {reason}")
        print(f"  ‚è±Ô∏è  Duration: {duration*1000:.2f}ms")

        return {
            'success': True,
            'duration': duration,
            'can_open': can_open,
            'reason': reason
        }
    except asyncio.TimeoutError:
        duration = time.time() - start
        print(f"\n  ‚ùå TIMEOUT after {duration:.2f}s")
        return {
            'success': False,
            'duration': duration,
            'error': 'Timeout'
        }
    except Exception as e:
        duration = time.time() - start
        print(f"\n  ‚ùå ERROR: {e}")
        return {
            'success': False,
            'duration': duration,
            'error': str(e)[:100]
        }


async def test_can_open_position_sequential(exchange: ExchangeManager, symbols: List[str], size_usd: float):
    """–¢–µ—Å—Ç 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ can_open_position() (–∫–∞–∫ —Å–µ–π—á–∞—Å)"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 3: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ï can_open_position()")
    print("="*80)
    print(f"Symbols: {', '.join(symbols)}, Size: ${size_usd}")

    results = []
    start_total = time.time()

    for i, symbol in enumerate(symbols, 1):
        print(f"\n  [{i}/{len(symbols)}] Checking {symbol}...")
        start = time.time()

        try:
            can_open, reason = await asyncio.wait_for(
                exchange.can_open_position(symbol, size_usd),
                timeout=10.0
            )
            duration = time.time() - start

            print(f"    ‚úÖ {can_open}: {reason} ({duration*1000:.2f}ms)")

            results.append({
                'symbol': symbol,
                'success': True,
                'duration': duration,
                'can_open': can_open
            })
        except Exception as e:
            duration = time.time() - start
            print(f"    ‚ùå ERROR: {e} ({duration*1000:.2f}ms)")
            results.append({
                'symbol': symbol,
                'success': False,
                'duration': duration,
                'error': str(e)[:50]
            })

    total_duration = time.time() - start_total

    # Summary
    print("\n" + "-"*80)
    print("–ò–¢–û–ì–ò:")
    successful = [r for r in results if r['success']]
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(successful)}/{len(symbols)}")
    print(f"  –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_duration*1000:.2f}ms")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–∏–º–≤–æ–ª: {(total_duration/len(symbols))*1000:.2f}ms")

    if successful:
        durations = [r['duration'] for r in successful]
        print(f"  Min: {min(durations)*1000:.2f}ms")
        print(f"  Max: {max(durations)*1000:.2f}ms")

    return {
        'total_duration': total_duration,
        'avg_duration': total_duration / len(symbols),
        'results': results
    }


async def test_can_open_position_parallel(exchange: ExchangeManager, symbols: List[str], size_usd: float):
    """–¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ can_open_position() (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 4: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï can_open_position() (–µ—Å–ª–∏ –±—ã –¥–µ–ª–∞–ª–∏)")
    print("="*80)
    print(f"Symbols: {', '.join(symbols)}, Size: ${size_usd}")

    async def check_single(symbol):
        start = time.time()
        try:
            can_open, reason = await asyncio.wait_for(
                exchange.can_open_position(symbol, size_usd),
                timeout=10.0
            )
            duration = time.time() - start
            return {
                'symbol': symbol,
                'success': True,
                'duration': duration,
                'can_open': can_open,
                'reason': reason
            }
        except Exception as e:
            duration = time.time() - start
            return {
                'symbol': symbol,
                'success': False,
                'duration': duration,
                'error': str(e)[:50]
            }

    start_total = time.time()
    results = await asyncio.gather(*[check_single(s) for s in symbols])
    total_duration = time.time() - start_total

    # Display results
    print()
    for r in results:
        if r['success']:
            print(f"  ‚úÖ {r['symbol']}: {r['can_open']} ({r['duration']*1000:.2f}ms)")
        else:
            print(f"  ‚ùå {r['symbol']}: ERROR ({r['duration']*1000:.2f}ms)")

    # Summary
    print("\n" + "-"*80)
    print("–ò–¢–û–ì–ò:")
    successful = [r for r in results if r['success']]
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(successful)}/{len(symbols)}")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ): {total_duration*1000:.2f}ms")

    if successful:
        durations = [r['duration'] for r in successful]
        avg_duration = sum(durations) / len(durations)
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–∏–º–≤–æ–ª: {avg_duration*1000:.2f}ms")
        print(f"  Max: {max(durations)*1000:.2f}ms (—ç—Ç–æ –∏ –µ—Å—Ç—å wall-clock time)")

    return {
        'total_duration': total_duration,
        'results': results
    }


async def main():
    print("="*80)
    print("–¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò can_open_position()")
    print("="*80)
    print()
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ can_open_position() –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–ª–Ω—ã")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¢–û–õ–¨–ö–û –ò–ó–ú–ï–†–Ø–ï–¢, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –¥–µ–ª–∞–µ—Ç!")
    print()

    # Initialize exchange
    config = Config()
    binance_config = config.get_exchange_config('binance')

    exchange = ExchangeManager('binance', {
        'api_key': binance_config.api_key,
        'api_secret': binance_config.api_secret,
        'testnet': binance_config.testnet,
        'rate_limit': binance_config.rate_limit
    })
    await exchange.initialize()

    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Binance (testnet={binance_config.testnet})")

    # Test symbols (–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω—ã)
    test_symbols = ['FORMUSDT', 'ALICEUSDT', 'BNBUSDT', 'NEOUSDT', 'ALGOUSDT', 'FILUSDT']
    test_size = 200.0  # $200 –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω–µ

    # Run tests
    api_results = await test_individual_api_calls(exchange)

    single_result = await test_can_open_position_single(exchange, 'FORMUSDT', test_size)

    sequential_result = await test_can_open_position_sequential(exchange, test_symbols, test_size)

    parallel_result = await test_can_open_position_parallel(exchange, test_symbols, test_size)

    # FINAL COMPARISON
    print("\n" + "="*80)
    print("–§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï")
    print("="*80)

    print("\nüìä –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï API –í–´–ó–û–í–´:")
    successful_api = [r for r in api_results if r['success']]
    if successful_api:
        total_api = sum(r['duration'] for r in successful_api)
        print(f"  –í—Ä–µ–º—è –Ω–∞ 1 –ø–æ–∑–∏—Ü–∏—é (3 API): {total_api*1000:.2f}ms")
        print(f"  –í—Ä–µ–º—è –Ω–∞ 6 –ø–æ–∑–∏—Ü–∏–π: {total_api*6*1000:.2f}ms")

    print("\nüìä can_open_position() –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û (—Ç–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥):")
    print(f"  –í—Ä–µ–º—è –Ω–∞ 6 –ø–æ–∑–∏—Ü–∏–π: {sequential_result['total_duration']*1000:.2f}ms")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {sequential_result['avg_duration']*1000:.2f}ms")

    print("\nüìä can_open_position() –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è):")
    print(f"  –í—Ä–µ–º—è –Ω–∞ 6 –ø–æ–∑–∏—Ü–∏–π: {parallel_result['total_duration']*1000:.2f}ms")

    # Calculate speedup
    if sequential_result['total_duration'] > 0 and parallel_result['total_duration'] > 0:
        speedup = sequential_result['total_duration'] / parallel_result['total_duration']
        saved_time = sequential_result['total_duration'] - parallel_result['total_duration']

        print("\nüöÄ –í–´–ò–ì–†–´–® –û–¢ –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ê–¶–ò–ò:")
        print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
        print(f"  –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {saved_time*1000:.2f}ms ({saved_time:.2f}s)")

    # Recommendations
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if sequential_result['total_duration'] > 2.0:  # >2s —Å—á–∏—Ç–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–º
        print("  ‚ö†Ô∏è  can_open_position() –ú–ï–î–õ–ï–ù–ù–´–ô (>2s –¥–ª—è 6 –ø–æ–∑–∏—Ü–∏–π)")
        print("  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
        print("     1. –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å fetch_positions() –Ω–∞ –≤—Ä–µ–º—è –≤–æ–ª–Ω—ã")
        print("     2. –î–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        print("     3. –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å positionRisk –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω")
    else:
        print("  ‚úÖ can_open_position() –ø—Ä–∏–µ–º–ª–µ–º–æ –±—ã—Å—Ç—Ä—ã–π (<2s)")

    if parallel_result['total_duration'] < sequential_result['total_duration'] * 0.5:
        print("  üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –¥–∞—Å—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à (>50%)")
    else:
        print("  ‚ö†Ô∏è  –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç (—É–∑–∫–æ–µ –º–µ—Å—Ç–æ –≤ –¥—Ä—É–≥–æ–º)")

    await exchange.close()

    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("="*80)


if __name__ == '__main__':
    asyncio.run(main())
