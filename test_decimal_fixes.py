#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Decimal –æ—à–∏–±–æ–∫ –≤ aged_position_monitor_v2
"""

import os
import sys
from decimal import Decimal
from datetime import datetime, timezone, timedelta
from unittest.mock import Mock

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
from dotenv import load_dotenv
load_dotenv(override=True)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
sys.path.insert(0, '/Users/evgeniyyanvarskiy/PycharmProjects/TradingBot')

print("=" * 60)
print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô DECIMAL")
print("=" * 60)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
from core.aged_position_monitor_v2 import AgedPositionMonitorV2

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
aged_monitor = AgedPositionMonitorV2(
    exchange_managers={'test': Mock()},
    repository=None,
    position_manager=None
)

print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
print(f"   max_age_hours: {aged_monitor.max_age_hours} (type: {type(aged_monitor.max_age_hours)})")
print(f"   grace_period_hours: {aged_monitor.grace_period_hours} (type: {type(aged_monitor.grace_period_hours)})")
print(f"   loss_step_percent: {aged_monitor.loss_step_percent} (type: {type(aged_monitor.loss_step_percent)})")
print(f"   max_loss_percent: {aged_monitor.max_loss_percent} (type: {type(aged_monitor.max_loss_percent)})")
print(f"   commission_percent: {aged_monitor.commission_percent} (type: {type(aged_monitor.commission_percent)})")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
assert isinstance(aged_monitor.loss_step_percent, Decimal), "loss_step_percent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
assert isinstance(aged_monitor.max_loss_percent, Decimal), "max_loss_percent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
assert isinstance(aged_monitor.commission_percent, Decimal), "commission_percent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
print("   ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º _calculate_age_hours
print("\n2. –¢–µ—Å—Ç _calculate_age_hours...")
position = Mock()
position.opened_at = datetime.now(timezone.utc) - timedelta(hours=4.5)
age = aged_monitor._calculate_age_hours(position)
print(f"   –í–æ–∑—Ä–∞—Å—Ç –ø–æ–∑–∏—Ü–∏–∏: {age:.2f} —á–∞—Å–æ–≤ (type: {type(age)})")
assert isinstance(age, float), "age –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å float"
assert age > 4.4 and age < 4.6, f"age –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–∫–æ–ª–æ 4.5 —á–∞—Å–æ–≤, –∞ –Ω–µ {age}"
print("   ‚úÖ _calculate_age_hours —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º _calculate_pnl_percent
print("\n3. –¢–µ—Å—Ç _calculate_pnl_percent...")
position = Mock()
position.entry_price = 100.0
position.side = 'long'

current_price = Decimal('110')
pnl = aged_monitor._calculate_pnl_percent(position, current_price)
print(f"   PnL –¥–ª—è long: {pnl}% (type: {type(pnl)})")
assert isinstance(pnl, Decimal), "pnl –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
assert pnl == Decimal('10'), f"PnL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10%, –∞ –Ω–µ {pnl}"

position.side = 'short'
pnl = aged_monitor._calculate_pnl_percent(position, current_price)
print(f"   PnL –¥–ª—è short: {pnl}% (type: {type(pnl)})")
assert pnl == Decimal('-10'), f"PnL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å -10%, –∞ –Ω–µ {pnl}"
print("   ‚úÖ _calculate_pnl_percent —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º _calculate_target
print("\n4. –¢–µ—Å—Ç _calculate_target...")
position = Mock()
position.entry_price = 100.0
position.side = 'long'

# Grace period
hours_over_limit = 0.5
phase, target_price, loss_tolerance = aged_monitor._calculate_target(position, hours_over_limit)
print(f"   Grace period:")
print(f"     phase: {phase}")
print(f"     target_price: {target_price} (type: {type(target_price)})")
print(f"     loss_tolerance: {loss_tolerance}% (type: {type(loss_tolerance)})")
assert isinstance(target_price, Decimal), "target_price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
assert isinstance(loss_tolerance, Decimal), "loss_tolerance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
assert phase == 'grace', "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å grace —Ñ–∞–∑–∞"
assert loss_tolerance == Decimal('0'), "Loss tolerance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –≤ grace –ø–µ—Ä–∏–æ–¥–µ"

# Progressive liquidation
hours_over_limit = 10
phase, target_price, loss_tolerance = aged_monitor._calculate_target(position, hours_over_limit)
print(f"   Progressive liquidation:")
print(f"     phase: {phase}")
print(f"     target_price: {target_price} (type: {type(target_price)})")
print(f"     loss_tolerance: {loss_tolerance}% (type: {type(loss_tolerance)})")
assert phase == 'progressive', "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å progressive —Ñ–∞–∑–∞"
assert loss_tolerance > Decimal('0'), "Loss tolerance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"
print("   ‚úÖ _calculate_target —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
print("\n5. –¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
try:
    # –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω—å—à–µ –≤—ã–∑—ã–≤–∞–ª–∏ –æ—à–∏–±–∫–∏
    result1 = Decimal('2') * aged_monitor.commission_percent
    print(f"   2 * commission_percent = {result1}")

    hours = 5.5
    result2 = Decimal(str(hours)) * aged_monitor.loss_step_percent
    print(f"   {hours} * loss_step_percent = {result2}")

    result3 = Decimal('1') + aged_monitor.commission_percent
    print(f"   1 + commission_percent = {result3}")

    result4 = aged_monitor.loss_step_percent / Decimal('100')
    print(f"   loss_step_percent / 100 = {result4}")

    print("   ‚úÖ –í—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
except TypeError as e:
    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")

print("\n" + "=" * 60)
print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
print("=" * 60)
print("\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print("  ‚Ä¢ float –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ Decimal –ø–µ—Ä–µ–¥ —É–º–Ω–æ–∂–µ–Ω–∏–µ–º")
print("  ‚Ä¢ –ß–∏—Å–ª–∞ (1, 2, 100) –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ Decimal('1'), Decimal('2'), Decimal('100')")
print("  ‚Ä¢ commission_percent –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
print("  ‚Ä¢ –í—Å–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å Decimal")
print("\n‚ö° Unified Protection V2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")