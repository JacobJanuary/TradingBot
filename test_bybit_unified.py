#!/usr/bin/env python3
"""
Test Bybit UNIFIED Account Connection
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Testnet —Å UNIFIED –∞–∫–∫–∞—É–Ω—Ç–æ–º
"""

import asyncio
import ccxt.async_support as ccxt
import os
import sys
from dotenv import load_dotenv
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class BybitUnifiedTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Bybit UNIFIED Account"""
    
    def __init__(self):
        self.api_key = os.getenv('BYBIT_API_KEY') or os.getenv('BYBIT_TESTNET_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET') or os.getenv('BYBIT_TESTNET_API_SECRET')
        self.exchange = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("=" * 60)
        logger.info("BYBIT UNIFIED ACCOUNT CONNECTION TEST")
        logger.info("=" * 60)
        
        if not self.api_key or not self.api_secret:
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("–î–æ–±–∞–≤—å—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET –≤ .env")
            return False
        
        logger.info("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        logger.info(f"   API Key: {self.api_key[:8]}...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ exchange –æ–±—ä–µ–∫—Ç–∞
        self.exchange = ccxt.bybit({
            'apiKey': self.api_key,
            'secret': self.api_secret,
            'testnet': True,  # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º testnet
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',    # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'accountType': 'UNIFIED',   # –í–ê–ñ–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º UNIFIED
                'recvWindow': 60000,
            }
        })
        
        # –í–∫–ª—é—á–∞–µ–º sandbox mode –¥–ª—è CCXT
        self.exchange.set_sandbox_mode(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è testnet
        self.exchange.urls['api'] = {
            'public': 'https://api-testnet.bybit.com',
            'private': 'https://api-testnet.bybit.com',
        }
        
        logger.info("‚úÖ Exchange –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å UNIFIED –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        return True
    
    async def test_connection(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            server_time = await self.exchange.fetch_time()
            server_dt = datetime.fromtimestamp(server_time / 1000)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            logger.info(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_dt}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
            status = await self.exchange.fetch_status()
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def test_account_info(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = await self.exchange.private_get_v5_account_info()
            
            result = account_info.get('result', {})
            account_type = result.get('accountType', 'UNKNOWN')
            unified_status = result.get('unifiedMarginStatus', 0)
            
            logger.info(f"   Account Type: {account_type}")
            logger.info(f"   Unified Status: {unified_status} (1=UNIFIED, 0=Classic)")
            
            if account_type == 'UNIFIED':
                logger.info("‚úÖ UNIFIED –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ UNIFIED!")
                logger.warning("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å UNIFIED account –Ω–∞ testnet.bybit.com")
                return False
                
        except Exception as e:
            error_msg = str(e)
            
            if "accountType only support UNIFIED" in error_msg:
                logger.error("‚ùå –û–®–ò–ë–ö–ê: API —Ç—Ä–µ–±—É–µ—Ç UNIFIED –∞–∫–∫–∞—É–Ω—Ç!")
                logger.info("\nüìã –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:")
                logger.info("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
                logger.info("2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                logger.info("3. Assets ‚Üí Account Type")
                logger.info("4. –í—ã–±–µ—Ä–∏—Ç–µ 'Unified Trading Account'")
                logger.info("5. –ù–∞–∂–º–∏—Ç–µ 'Upgrade Now'")
                logger.info("6. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏")
                logger.info("7. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            
            return False
    
    async def test_balance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
        
        try:
            balance = await self.exchange.fetch_balance()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            currencies = ['USDT', 'BTC', 'ETH']
            has_funds = False
            
            for currency in currencies:
                if currency in balance:
                    free = balance[currency].get('free', 0)
                    used = balance[currency].get('used', 0)
                    total = balance[currency].get('total', 0)
                    
                    if total > 0:
                        has_funds = True
                        logger.info(f"   {currency}:")
                        logger.info(f"      Free: {free:.4f}")
                        logger.info(f"      Used: {used:.4f}")
                        logger.info(f"      Total: {total:.4f}")
            
            if not has_funds:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ!")
                logger.info("\nüìã –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –¢–ï–°–¢–û–í–´–ï –°–†–ï–î–°–¢–í–ê:")
                logger.info("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
                logger.info("2. Assets ‚Üí Faucet (–∏–ª–∏ Test Coins)")
                logger.info("3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ USDT (10,000)")
                logger.info("4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
            else:
                logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False
    
    async def test_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–æ–≤...")
        
        try:
            markets = await self.exchange.fetch_markets()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä—ã–Ω–∫–∏
            spot_markets = [m for m in markets if m.get('spot', False)]
            futures_markets = [m for m in markets if m.get('future', False)]
            active_markets = [m for m in markets if m.get('active', False)]
            
            logger.info(f"   –í—Å–µ–≥–æ —Ä—ã–Ω–∫–æ–≤: {len(markets)}")
            logger.info(f"   –°–ø–æ—Ç —Ä—ã–Ω–∫–æ–≤: {len(spot_markets)}")
            logger.info(f"   –§—å—é—á–µ—Ä—Å —Ä—ã–Ω–∫–æ–≤: {len(futures_markets)}")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(active_markets)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã
            popular = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT']
            logger.info("\n   –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã:")
            
            for symbol in popular:
                market = self.exchange.market(symbol) if symbol in self.exchange.markets else None
                if market:
                    logger.info(f"      ‚úÖ {symbol} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.info(f"      ‚ùå {symbol} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            logger.info("‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤: {e}")
            return False
    
    async def test_ticker(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤...")
        
        try:
            symbol = 'BTC/USDT:USDT'
            ticker = await self.exchange.fetch_ticker(symbol)
            
            logger.info(f"   {symbol}:")
            logger.info(f"      Last: ${ticker.get('last', 0):,.2f}")
            logger.info(f"      Bid: ${ticker.get('bid', 0):,.2f}")
            logger.info(f"      Ask: ${ticker.get('ask', 0):,.2f}")
            logger.info(f"      Volume 24h: {ticker.get('quoteVolume', 0):,.0f} USDT")
            logger.info(f"      Change 24h: {ticker.get('percentage', 0):.2f}%")
            
            logger.info("‚úÖ –¢–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
            return False
    
    async def test_order_placement(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (dry run)"""
        logger.info("\nüîç –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)...")
        
        try:
            symbol = 'BTC/USDT:USDT'
            ticker = await self.exchange.fetch_ticker(symbol)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–¥–∞–ª–µ–∫–æ –æ—Ç —Ä—ã–Ω–∫–∞)
            side = 'buy'
            order_type = 'limit'
            amount = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            price = ticker['last'] * 0.8  # 20% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            
            logger.info(f"   –°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞:")
            logger.info(f"      Symbol: {symbol}")
            logger.info(f"      Side: {side}")
            logger.info(f"      Type: {order_type}")
            logger.info(f"      Amount: {amount} BTC")
            logger.info(f"      Price: ${price:,.2f}")
            logger.info(f"      Value: ${price * amount:,.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.exchange.fetch_balance()
            usdt_free = balance.get('USDT', {}).get('free', 0)
            
            if usdt_free >= price * amount:
                logger.info(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: ${usdt_free:,.2f} USDT")
                
                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä
                logger.info("\n   –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
                try:
                    order = await self.exchange.create_order(
                        symbol=symbol,
                        type=order_type,
                        side=side,
                        amount=amount,
                        price=price
                    )
                    
                    order_id = order.get('id')
                    logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω! ID: {order_id}")
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                    await asyncio.sleep(1)
                    await self.exchange.cancel_order(order_id, symbol)
                    logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                    
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {e}")
            else:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${usdt_free:,.2f} USDT")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    async def test_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π"""
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...")
        
        try:
            positions = await self.exchange.fetch_positions()
            
            if positions:
                logger.info(f"   –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                for pos in positions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    logger.info(f"   {pos['symbol']}:")
                    logger.info(f"      Side: {pos.get('side', 'N/A')}")
                    logger.info(f"      Contracts: {pos.get('contracts', 0)}")
                    logger.info(f"      Entry: ${pos.get('entryPrice', 0):,.2f}")
                    logger.info(f"      PnL: ${pos.get('unrealizedPnl', 0):,.2f}")
            else:
                logger.info("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
            logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            return False
        
        results = {}
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("Connection", self.test_connection),
            ("Account Info", self.test_account_info),
            ("Balance", self.test_balance),
            ("Markets", self.test_markets),
            ("Ticker", self.test_ticker),
            ("Positions", self.test_positions),
            ("Order Placement", self.test_order_placement),
        ]
        
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results[test_name] = "PASSED" if result else "FAILED"
            except Exception as e:
                logger.error(f"Test {test_name} crashed: {e}")
                results[test_name] = "ERROR"
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.exchange.close()
        
        # –ò—Ç–æ–≥–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        
        all_passed = True
        for test_name, result in results.items():
            emoji = "‚úÖ" if result == "PASSED" else "‚ùå"
            logger.info(f"{emoji} {test_name}: {result}")
            if result != "PASSED":
                all_passed = False
        
        if all_passed:
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            logger.info("Bybit UNIFIED account –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            logger.warning("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ docs/BYBIT_UNIFIED_SETUP.md")
        
        return all_passed


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BybitUnifiedTester()
    
    try:
        success = await tester.run_all_tests()
        return 0 if success else 1
    except KeyboardInterrupt:
        logger.info("\n–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)