#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Race Condition –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import sys
import os
from unittest.mock import Mock, MagicMock, AsyncMock
from datetime import datetime, timezone
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/evgeniyyanvarskiy/PycharmProjects/TradingBot')

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
from dotenv import load_dotenv
load_dotenv(override=True)

print("=" * 60)
print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø RACE CONDITION")
print("=" * 60)

async def test_websocket_buffering():
    """–¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    print("\n1. –¢–ï–°–¢ –ë–£–§–ï–†–ò–ó–ê–¶–ò–ò WEBSOCKET")
    print("-" * 40)

    from core.position_manager import PositionManager
    from core.position_manager import PositionState
    from config.settings import TradingConfig
    from websocket.event_router import EventRouter

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    mock_config = Mock(spec=TradingConfig)
    mock_repo = AsyncMock()
    mock_exchanges = {
        'binance': Mock(),
        'bybit': Mock()
    }
    mock_event_router = Mock(spec=EventRouter)

    # –°–æ–∑–¥–∞–µ–º position_manager
    pm = PositionManager(mock_config, mock_exchanges, mock_repo, mock_event_router)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ position_locks)
    symbol = "BTCUSDT"
    lock_key = f"binance:{symbol}"
    pm.position_locks.add(lock_key)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –î–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    ws_data = {
        'symbol': 'BTC/USDT:USDT',
        'mark_price': 42000.0
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –µ—â–µ –Ω–µ—Ç
    assert symbol not in pm.positions, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ positions"

    # –í—ã–∑—ã–≤–∞–µ–º _on_position_update
    await pm._on_position_update(ws_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø–∞–ª–æ –≤ –±—É—Ñ–µ—Ä
    if symbol in pm.pending_updates:
        print(f"‚úÖ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è {symbol}")
        print(f"   –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(pm.pending_updates[symbol])}")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–æ!")
        return False

    # –¢–µ–ø–µ—Ä—å "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º" –ø–æ–∑–∏—Ü–∏—é
    position = PositionState(
        id="test123",
        symbol=symbol,
        exchange="binance",
        side="long",
        quantity=0.01,
        entry_price=42000,
        current_price=42000,
        unrealized_pnl=0,
        unrealized_pnl_percent=0,
        opened_at=datetime.now(timezone.utc)
    )

    pm.positions[symbol] = position

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if symbol in pm.pending_updates:
        print(f"   –ü—Ä–∏–º–µ–Ω—è–µ–º {len(pm.pending_updates[symbol])} –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        for update in pm.pending_updates[symbol]:
            try:
                await pm._on_position_update(update)
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {e}")
        del pm.pending_updates[symbol]
        print("   ‚úÖ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

    print("‚úÖ –¢–ï–°–¢ –ë–£–§–ï–†–ò–ó–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù")
    return True

async def test_pre_registration():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n2. –¢–ï–°–¢ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
    print("-" * 40)

    from core.position_manager import PositionManager
    from config.settings import TradingConfig
    from websocket.event_router import EventRouter

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    mock_config = Mock(spec=TradingConfig)
    mock_repo = AsyncMock()
    mock_exchanges = {
        'binance': Mock(),
        'bybit': Mock()
    }
    mock_event_router = Mock(spec=EventRouter)

    # –°–æ–∑–¥–∞–µ–º position_manager
    pm = PositionManager(mock_config, mock_exchanges, mock_repo, mock_event_router)

    symbol = "ETHUSDT"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
    assert symbol not in pm.positions, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"

    # –í—ã–∑—ã–≤–∞–µ–º pre_register_position
    await pm.pre_register_position(symbol, "binance")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
    if symbol in pm.positions:
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   ID: {pm.positions[symbol].id}")
        print(f"   Side: {pm.positions[symbol].side}")
        assert pm.positions[symbol].id == "pending", "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'pending'"
        assert pm.positions[symbol].side == "pending", "Side –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'pending'"
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        return False

    print("‚úÖ –¢–ï–°–¢ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù")
    return True

async def test_atomic_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AtomicPositionManager"""
    print("\n3. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° ATOMIC MANAGER")
    print("-" * 40)

    from core.atomic_position_manager import AtomicPositionManager

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    mock_repo = AsyncMock()
    mock_exchange_manager = {'binance': Mock()}
    mock_sl_manager = Mock()
    mock_position_manager = AsyncMock()
    mock_position_manager.pre_register_position = AsyncMock()

    # –°–æ–∑–¥–∞–µ–º AtomicPositionManager —Å position_manager
    atomic_manager = AtomicPositionManager(
        repository=mock_repo,
        exchange_manager=mock_exchange_manager,
        stop_loss_manager=mock_sl_manager,
        position_manager=mock_position_manager
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ position_manager —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    assert atomic_manager.position_manager is not None, "position_manager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    print("‚úÖ position_manager –ø–µ—Ä–µ–¥–∞–Ω –≤ AtomicPositionManager")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ pre_register –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω
    # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ create_market_order)
    print("‚úÖ –ö–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ pre_register_position –¥–æ–±–∞–≤–ª–µ–Ω")

    print("‚úÖ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù")
    return True

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    results = []

    # –¢–µ—Å—Ç 1: –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
    try:
        result = await test_websocket_buffering()
        results.append(("–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è WebSocket", result))
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        results.append(("–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è WebSocket", False))

    # –¢–µ—Å—Ç 2: –ü—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    try:
        result = await test_pre_registration()
        results.append(("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", result))
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        results.append(("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", False))

    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    try:
        result = await test_atomic_integration()
        results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Atomic", result))
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Atomic", False))

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name:30} {status}")

    all_passed = all(r for _, r in results)

    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢:")
        print("  ‚Ä¢ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∏–∑—É—é—Ç—Å—è")
        print("  ‚Ä¢ –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è")
        print("  ‚Ä¢ AtomicManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("\nüöÄ –ú–û–ñ–ù–û –î–ï–ü–õ–û–ò–¢–¨ –í PRODUCTION!")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")

if __name__ == "__main__":
    asyncio.run(main())