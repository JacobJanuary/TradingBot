#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: Entry order failed: unknown
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏—Ä–∂–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
"""

import asyncio
import ccxt.async_support as ccxt
from config.settings import Config
from core.exchange_response_adapter import ExchangeResponseAdapter
import json

async def test_small_order():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –º–∞–ª–µ–Ω—å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""

    config = Config()

    # –°–æ–∑–¥–∞–µ–º exchange instance
    exchange_config = None
    for exch in config.exchanges:
        if exch.name == 'bybit' and exch.enabled:
            exchange_config = exch
            break

    if not exchange_config:
        print("‚ùå Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    exchange = ccxt.bybit({
        'apiKey': exchange_config.api_key,
        'secret': exchange_config.api_secret,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'testnet': exchange_config.testnet
        }
    })

    print("="*80)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Entry order failed: unknown")
    print("="*80)
    print()

    try:
        # Test 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
        print("Test 1: –°–æ–∑–¥–∞–Ω–∏–µ market order —Å –º–∞–ª–µ–Ω—å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
        print("-"*80)

        symbol = 'SUNDOG/USDT:USDT'
        side = 'sell'
        amount = 0.1  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        print(f"Symbol: {symbol}")
        print(f"Side: {side}")
        print(f"Amount: {amount}")
        print()

        try:
            raw_order = await exchange.create_market_order(
                symbol=symbol,
                side=side,
                amount=amount
            )

            print("‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω!")
            print()
            print("RAW ORDER:")
            print(json.dumps(raw_order, indent=2, default=str))
            print()

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ä–¥–µ—Ä
            normalized = ExchangeResponseAdapter.normalize_order(raw_order, 'bybit')

            print("NORMALIZED ORDER:")
            print(f"  ID: {normalized.id}")
            print(f"  Symbol: {normalized.symbol}")
            print(f"  Side: {normalized.side}")
            print(f"  Status: {normalized.status}")
            print(f"  Type: {normalized.type}")
            print(f"  Amount: {normalized.amount}")
            print(f"  Filled: {normalized.filled}")
            print(f"  Price: {normalized.price}")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_order_filled
            is_filled = ExchangeResponseAdapter.is_order_filled(normalized)
            print(f"is_order_filled: {is_filled}")
            print()

        except ccxt.InsufficientFunds as e:
            print(f"‚ùå InsufficientFunds: {e}")
            print()

        except ccxt.InvalidOrder as e:
            print(f"‚ùå InvalidOrder: {e}")
            print()

        except Exception as e:
            print(f"‚ùå Exception: {type(e).__name__}")
            print(f"   Message: {e}")
            print()

            # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ
            if hasattr(e, 'args') and len(e.args) > 0:
                print(f"   Args: {e.args}")

            print()

        # Test 2: –ü—Ä–æ–≤–µ—Ä–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è SUNDOGUSDT
        print()
        print("Test 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è SUNDOGUSDT")
        print("-"*80)

        markets = await exchange.load_markets()

        if symbol in markets:
            market = markets[symbol]
            print(f"Market info for {symbol}:")
            print(f"  Min amount: {market['limits']['amount']['min']}")
            print(f"  Max amount: {market['limits']['amount']['max']}")
            print(f"  Min cost: {market['limits']['cost']['min']}")
            print(f"  Max cost: {market['limits']['cost']['max']}")
            print(f"  Contract size: {market.get('contractSize', 'N/A')}")
            print(f"  Precision amount: {market['precision']['amount']}")
            print(f"  Precision price: {market['precision']['price']}")
            print()

        # Test 3: –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        print()
        print("Test 3: –°–æ–∑–¥–∞–Ω–∏–µ market order —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
        print("-"*80)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
        balance = await exchange.fetch_balance()
        usdt_balance = balance.get('USDT', {})
        free_usdt = usdt_balance.get('free', 0)

        print(f"USDT Balance: {free_usdt}")
        print()

        if free_usdt < 1:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")
        else:
            # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if symbol in markets:
                min_amount = market['limits']['amount']['min']
                min_cost = market['limits']['cost']['min']

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º current price –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                ticker = await exchange.fetch_ticker(symbol)
                current_price = ticker['last']

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= min_amount –ò —Å—Ç–æ–∏–º–æ—Å—Ç—å >= min_cost
                amount_from_cost = min_cost / current_price
                proper_amount = max(min_amount, amount_from_cost) * 2  # x2 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏

                print(f"Current price: {current_price}")
                print(f"Min amount: {min_amount}")
                print(f"Min cost: {min_cost}")
                print(f"Calculated proper amount: {proper_amount}")
                print()

                print(f"‚ö†Ô∏è –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:")
                print()
                print("# try:")
                print(f"#     raw_order = await exchange.create_market_order(")
                print(f"#         symbol='{symbol}',")
                print(f"#         side='{side}',")
                print(f"#         amount={proper_amount}")
                print("# )")
                print("#     print('‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω!')")
                print("#     print(json.dumps(raw_order, indent=2, default=str))")
                print("# except Exception as e:")
                print("#     print(f'‚ùå Error: {e}')")
                print()

    finally:
        await exchange.close()

    print("="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*80)


if __name__ == "__main__":
    asyncio.run(test_small_order())
