#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ Bybit 170003 "unknown parameter"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ market –æ—Ä–¥–µ—Ä–∞
"""
import sys
import os
import asyncio
import json
from decimal import Decimal

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import ccxt.async_support as ccxt


async def test_bybit_market_order():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è market –æ—Ä–¥–µ—Ä–∞ Bybit"""

    print("\n" + "=" * 70)
    print("–¢–ï–°–¢: Bybit Market Order Parameters")
    print("=" * 70)

    # Initialize Bybit testnet
    exchange = ccxt.bybit({
        'apiKey': 'test_key',  # Replace with your testnet API key if testing
        'secret': 'test_secret',
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'accountType': 'UNIFIED',
        }
    })

    # Set to testnet (if you have credentials)
    exchange.set_sandbox_mode(True)

    test_symbol = 'BTC/USDT:USDT'
    test_side = 'sell'
    test_amount = 0.001

    # Test cases
    test_cases = [
        {
            'name': 'CURRENT CODE (reduceOnly: True)',
            'params': {'reduceOnly': True}
        },
        {
            'name': 'Empty params',
            'params': {}
        },
        {
            'name': 'reduceOnly as string "true"',
            'params': {'reduceOnly': 'true'}
        },
        {
            'name': 'reduceOnly: False',
            'params': {'reduceOnly': False}
        },
        {
            'name': 'reduce_only (snake_case)',
            'params': {'reduce_only': True}
        },
        {
            'name': 'With positionIdx=0',
            'params': {'reduceOnly': True, 'positionIdx': 0}
        },
        {
            'name': 'With category=linear',
            'params': {'reduceOnly': True, 'category': 'linear'}
        },
        {
            'name': 'Without reduceOnly, with category',
            'params': {'category': 'linear'}
        },
    ]

    for i, test_case in enumerate(test_cases, 1):
        print(f"\n--- –¢–ï–°–¢ {i}: {test_case['name']} ---")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(test_case['params'], indent=2)}")

        try:
            # Note: This will fail without valid API keys
            # But we can see what CCXT sends

            # Enable verbose mode to see requests
            exchange.verbose = True

            # Try to create order (will fail on testnet without position)
            result = await exchange.create_order(
                symbol=test_symbol,
                type='market',
                side=test_side,
                amount=test_amount,
                params=test_case['params']
            )

            print(f"‚úÖ SUCCESS: {result}")

        except ccxt.AuthenticationError as e:
            print(f"‚ö†Ô∏è  AUTH ERROR (expected –±–µ–∑ API –∫–ª—é—á–µ–π): {e}")
            # This is expected without real API keys

        except ccxt.ExchangeError as e:
            error_str = str(e)
            print(f"‚ùå EXCHANGE ERROR: {error_str}")

            # Check for error code 170003
            if '170003' in error_str or 'unknown parameter' in error_str.lower():
                print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê! –≠—Ç–æ —Ç–æ—Ç –∂–µ error 170003!")
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É: {test_case['params']}")

        except Exception as e:
            print(f"‚ùå ERROR: {type(e).__name__}: {e}")

        finally:
            exchange.verbose = False

    await exchange.close()

    print("\n" + "=" * 70)
    print("–¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("=" * 70)


async def test_ccxt_param_conversion():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ CCXT –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Bybit"""

    print("\n" + "=" * 70)
    print("–¢–ï–°–¢: CCXT Parameter Conversion –¥–ª—è Bybit")
    print("=" * 70)

    exchange = ccxt.bybit({
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'accountType': 'UNIFIED',
        }
    })

    # Check if CCXT has any built-in transformations
    print("\nCCXT Bybit options:")
    print(json.dumps(exchange.options, indent=2, default=str))

    print("\nCCXT Bybit default params:")
    if hasattr(exchange, 'defaultParams'):
        print(json.dumps(exchange.defaultParams, indent=2, default=str))
    else:
        print("No defaultParams attribute")

    # Check if there's a method that shows what params will be sent
    print("\nCCXT Bybit has_feature:")
    features = [
        'createMarketOrder',
        'createOrder',
        'reduceOnly',
    ]
    for feature in features:
        if hasattr(exchange, 'has'):
            print(f"  {feature}: {exchange.has.get(feature, 'N/A')}")

    await exchange.close()


async def main():
    """Run all tests"""
    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: Bybit Error 170003 - Unknown Parameter")

    # Test 1: CCXT param conversion
    await test_ccxt_param_conversion()

    # Test 2: Market order with different params
    # Note: Comment out if you don't have API keys
    # await test_bybit_market_order()

    print("\n" + "=" * 70)
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("=" * 70)
    print("1. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å Bybit testnet API –∫–ª—é—á–∏:")
    print("   - –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ await test_bybit_market_order()")
    print("   - –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
    print("")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ CCXT options")
    print("   - –ò—â–∏—Ç–µ –ª—é–±—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("")
    print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å Bybit API –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ CCXT)")
    print("=" * 70)


if __name__ == "__main__":
    asyncio.run(main())
