#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ Bybit API

–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É extract_execution_price –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –¥–ª—è Bybit market orders
"""
import json

# –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Bybit API v5 –¥–ª—è create_market_order
# –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://bybit-exchange.github.io/docs/v5/order/create-order

# THEORY 1: Bybit API v5 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
bybit_create_order_response_v5 = {
    'id': '1234567890',
    'clientOrderId': 'my-order-123',
    'timestamp': 1729000000000,
    'datetime': '2024-10-15T12:00:00.000Z',
    'lastTradeTimestamp': None,
    'symbol': 'BLAST/USDT:USDT',
    'type': 'market',
    'timeInForce': 'GTC',
    'postOnly': False,
    'reduceOnly': False,
    'side': 'sell',
    'price': None,  # Market order –Ω–µ –∏–º–µ–µ—Ç price
    'stopPrice': None,
    'triggerPrice': None,
    'amount': 10.0,
    'cost': None,  # –ù–ï –ò–ó–í–ï–°–¢–ù–û —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!
    'average': None,  # –ù–ï –ò–ó–í–ï–°–¢–ù–û —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!
    'filled': None,  # –ù–ï –ò–ó–í–ï–°–¢–ù–û —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!
    'remaining': None,
    'status': 'open',  # –∏–ª–∏ None –¥–ª—è v5
    'fee': None,
    'trades': None,
    'fees': [],
    'info': {
        'retCode': 0,
        'retMsg': 'OK',
        'result': {
            'orderId': '1234567890',
            'orderLinkId': 'my-order-123',
            # –ö–†–ò–¢–ò–ß–ù–û: avgPrice –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ create_order!
            # –û–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ get_order –∏–ª–∏ –≤ websocket updates!
        },
        'retExtInfo': {},
        'time': 1729000000000
    }
}

# THEORY 2: –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ get_order
bybit_get_order_response_v5 = {
    'id': '1234567890',
    'clientOrderId': 'my-order-123',
    'timestamp': 1729000000000,
    'datetime': '2024-10-15T12:00:00.000Z',
    'lastTradeTimestamp': 1729000001000,
    'symbol': 'BLAST/USDT:USDT',
    'type': 'market',
    'side': 'sell',
    'price': None,
    'amount': 10.0,
    'cost': 0.01696,  # –¢–ï–ü–ï–†–¨ –ò–ó–í–ï–°–¢–ù–û!
    'average': 0.001696,  # –¢–ï–ü–ï–†–¨ –ò–ó–í–ï–°–¢–ù–û!
    'filled': 10.0,  # –¢–ï–ü–ï–†–¨ –ò–ó–í–ï–°–¢–ù–û!
    'remaining': 0.0,
    'status': 'closed',  # Filled
    'fee': {
        'cost': 0.00001696,
        'currency': 'USDT'
    },
    'info': {
        'retCode': 0,
        'retMsg': 'OK',
        'result': {
            'orderId': '1234567890',
            'orderLinkId': 'my-order-123',
            'symbol': 'BLASTUSDT',
            'price': '0',
            'qty': '10',
            'side': 'Sell',
            'orderType': 'Market',
            'orderStatus': 'Filled',
            'cumExecQty': '10',
            'cumExecValue': '0.01696',
            'avgPrice': '0.001696',  # –í–û–¢ –û–ù–ê –¶–ï–ù–ê!
            'timeInForce': 'GTC',
            'orderCategory': 'linear',
            'createdTime': '1729000000000',
            'updatedTime': '1729000001000'
        }
    }
}


def test_extract_execution_price_from_create():
    """
    –¢–µ—Å—Ç: —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç extract_execution_price –¥–ª—è –æ—Ç–≤–µ—Ç–∞ create_order
    """
    print("=" * 100)
    print("TEST 1: extract_execution_price from create_market_order response")
    print("=" * 100)

    data = bybit_create_order_response_v5
    info = data.get('info', {})

    print(f"\nChecking fields:")
    print(f"  data['average']: {data.get('average')}")
    print(f"  data['price']: {data.get('price')}")
    print(f"  info.get('avgPrice'): {info.get('result', {}).get('avgPrice')}")
    print(f"  info.get('lastExecPrice'): {info.get('result', {}).get('lastExecPrice')}")
    print(f"  data.get('lastTradePrice'): {data.get('lastTradePrice')}")

    # –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ extract_execution_price
    if data.get('average') and data.get('average') > 0:
        result = data.get('average')
    elif data.get('price') and data.get('price') > 0:
        result = data.get('price')
    else:
        # Fallback
        possible_prices = [
            info.get('result', {}).get('avgPrice'),
            info.get('result', {}).get('lastExecPrice'),
            info.get('result', {}).get('price'),
            data.get('lastTradePrice')
        ]
        result = None
        for p in possible_prices:
            if p:
                try:
                    p_float = float(p)
                    if p_float > 0:
                        result = p_float
                        break
                except (ValueError, TypeError):
                    continue

        if result is None:
            result = 0.0

    print(f"\nüéØ RESULT: {result}")
    print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è = {result} (–ù–ï–¢ –î–ê–ù–ù–´–• –í create_order!)")


def test_extract_execution_price_from_get():
    """
    –¢–µ—Å—Ç: —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç extract_execution_price –¥–ª—è –æ—Ç–≤–µ—Ç–∞ get_order
    """
    print("\n" + "=" * 100)
    print("TEST 2: extract_execution_price from get_order response")
    print("=" * 100)

    data = bybit_get_order_response_v5
    info = data.get('info', {})

    print(f"\nChecking fields:")
    print(f"  data['average']: {data.get('average')}")
    print(f"  data['price']: {data.get('price')}")
    print(f"  info['result']['avgPrice']: {info.get('result', {}).get('avgPrice')}")

    # –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ extract_execution_price
    if data.get('average') and data.get('average') > 0:
        result = data.get('average')
    else:
        result = 0.0

    print(f"\nüéØ RESULT: {result}")
    print(f"‚úÖ –£–°–ü–ï–•: –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è = {result}")


def analyze_problem():
    """
    –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
    """
    print("\n" + "=" * 100)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 100)

    print("""
üî¥ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:

1. AtomicPositionManager –≤—ã–∑—ã–≤–∞–µ—Ç exchange.create_market_order()
2. Bybit API v5 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç:
   - orderId: –µ—Å—Ç—å
   - avgPrice: –û–¢–°–£–¢–°–¢–í–£–ï–¢! (–±—É–¥–µ—Ç –ø–æ–∑–∂–µ)
   - average: None
   - filled: None

3. ExchangeResponseAdapter.normalize_order():
   - –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å average –∏–∑ data['average'] ‚Üí None
   - –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ info['avgPrice'] ‚Üí –û–¢–°–£–¢–°–¢–í–£–ï–¢
   - –†–µ–∑—É–ª—å—Ç–∞—Ç: average = None, price = None

4. ExchangeResponseAdapter.extract_execution_price():
   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç order.average ‚Üí None
   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç order.price ‚Üí None
   - Fallback –≤ raw_data ‚Üí –ù–ï–¢ –î–ê–ù–ù–´–•
   - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0 ‚ùå

5. atomic_position_manager.py:229
   - exec_price = 0.0

6. position_manager.py:1029
   - entry_price=position.entry_price ‚Üí 0.0

7. –†–µ–∑—É–ª—å—Ç–∞—Ç: TS —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å entry_price=0 ‚ùå

üìä –ü–û–ß–ï–ú–£ –î–õ–Ø BINANCE –†–ê–ë–û–¢–ê–ï–¢:

Binance API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç avgPrice —Å—Ä–∞–∑—É –≤ –æ—Ç–≤–µ—Ç–µ create_order –¥–ª—è FILLED orders!

üéØ –†–ï–®–ï–ù–ò–ï:

–í–ê–†–ò–ê–ù–¢ 1: Fetch order after creation (–¥–ª—è Bybit)
   –ü–æ—Å–ª–µ create_market_order –¥–µ–ª–∞—Ç—å get_order() —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å avgPrice

–í–ê–†–ò–ê–ù–¢ 2: Extract from position
   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å exchange.fetch_position() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real entry price

–í–ê–†–ò–ê–ù–¢ 3: Use WebSocket update
   –î–æ–∂–¥–∞—Ç—å—Å—è WebSocket update —Å execution details

–í–ê–†–ò–ê–ù–¢ 4 (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô): Immediate fetch for Bybit
   if exchange == 'bybit' and exec_price == 0:
       order = await exchange.fetch_order(order_id, symbol)
       exec_price = extract_execution_price(order)

‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å):
   –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ entry_price –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï:
   –î–æ–±–∞–≤–∏—Ç—å fetch_order –¥–ª—è Bybit —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ create_market_order
    """)


def test_theories():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–æ—Ä–∏–π –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    """
    print("\n" + "=" * 100)
    print("–ü–†–û–í–ï–†–ö–ê –¢–ï–û–†–ò–ô")
    print("=" * 100)

    theories = [
        {
            'name': 'THEORY 1: Wait for WebSocket',
            'pros': ['–ù–µ –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API call', 'Real-time data'],
            'cons': ['–ó–∞–¥–µ—Ä–∂–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ–∫—É–Ω–¥—ã)', '–ù—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', '–°–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è'],
            'verdict': '‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - TS —Å–æ–∑–¥–∞–µ—Ç—Å—è –ù–ï–ú–ï–î–õ–ï–ù–ù–û'
        },
        {
            'name': 'THEORY 2: Fetch order after creation',
            'pros': ['–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞', '–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', '–ù–∞–¥–µ–∂–Ω–æ'],
            'cons': ['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API call', '+100-200ms –∑–∞–¥–µ—Ä–∂–∫–∞'],
            'verdict': '‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å'
        },
        {
            'name': 'THEORY 3: Fetch position',
            'pros': ['–ü–æ–ª—É—á–∞–µ–º entry price –∏–∑ –ø–æ–∑–∏—Ü–∏–∏'],
            'cons': ['–ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞', '–ü–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è', '–ù–µ–Ω–∞–¥–µ–∂–Ω–æ'],
            'verdict': '‚ö†Ô∏è –ù–µ–Ω–∞–¥–µ–∂–Ω–æ - race condition'
        },
        {
            'name': 'THEORY 4: Use signal entry_price',
            'pros': ['–£–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö', '–ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏'],
            'cons': ['–ù–ï –†–ï–ê–õ–¨–ù–ê–Ø —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è!', 'Slippage –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è', '–ú–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞ 0.1-1%'],
            'verdict': '‚ùå –ù–µ—Ç–æ—á–Ω–æ - –Ω—É–∂–Ω–∞ –†–ï–ê–õ–¨–ù–ê–Ø —Ü–µ–Ω–∞'
        }
    ]

    for i, theory in enumerate(theories, 1):
        print(f"\n{i}. {theory['name']}")
        print(f"   –ü–ª—é—Å—ã: {', '.join(theory['pros'])}")
        print(f"   –ú–∏–Ω—É—Å—ã: {', '.join(theory['cons'])}")
        print(f"   {theory['verdict']}")


if __name__ == '__main__':
    test_extract_execution_price_from_create()
    test_extract_execution_price_from_get()
    analyze_problem()
    test_theories()

    print("\n" + "=" * 100)
    print("üéØ –ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
    print("=" * 100)
    print("""
–ú–ï–°–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: core/atomic_position_manager.py:229

–¢–ï–ö–£–©–ò–ô –ö–û–î:
    exec_price = ExchangeResponseAdapter.extract_execution_price(entry_order)

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:
    exec_price = ExchangeResponseAdapter.extract_execution_price(entry_order)

    # FIX: Bybit API v5 –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç avgPrice –≤ create_order
    # –ù—É–∂–Ω–æ fetch order –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    if exchange == 'bybit' and (not exec_price or exec_price == 0):
        logger.info(f"üìä Fetching order details for {symbol} to get execution price")
        try:
            fetched_order = await exchange_instance.fetch_order(entry_order.id, symbol)
            fetched_normalized = ExchangeResponseAdapter.normalize_order(fetched_order, exchange)
            exec_price = ExchangeResponseAdapter.extract_execution_price(fetched_normalized)
            logger.info(f"‚úÖ Got execution price from fetch_order: {exec_price}")
        except Exception as e:
            logger.error(f"‚ùå Failed to fetch order for execution price: {e}")
            # Fallback: use position entry price from signal
            exec_price = entry_price

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- Bybit –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π entry_price
- TS –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç corrupted data —Å entry_price=0
    """)
