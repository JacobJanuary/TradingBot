#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π aged –º–µ—Ç–æ–¥–æ–≤
–ù–ï –ú–ï–ù–Ø–ï–¢ –ö–û–î - –¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê
"""
import sys
import os
import subprocess
import inspect

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_database_schema():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ 1: –ê–Ω–∞–ª–∏–∑ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")

    # Check migration 008 (public.aged_positions)
    migration_008_path = 'database/migrations/008_create_aged_tables.sql'
    if os.path.exists(migration_008_path):
        with open(migration_008_path, 'r') as f:
            content = f.read()

        print("‚úì –ú–∏–≥—Ä–∞—Ü–∏—è 008 –Ω–∞–π–¥–µ–Ω–∞ (public.aged_positions)")

        # Check for expected columns in migration 008
        assert 'phase VARCHAR(50)' in content, "‚ùå phase –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 008"
        assert 'loss_tolerance' in content, "‚ùå loss_tolerance –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 008"
        assert 'hours_aged INTEGER' in content, "‚ùå hours_aged –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 008"

        print("  ‚úì –ö–æ–ª–æ–Ω–∫–∏: phase, loss_tolerance, hours_aged")

    # Check migration 009 (monitoring.aged_positions)
    migration_009_path = 'database/migrations/009_create_aged_positions_tables.sql'
    if os.path.exists(migration_009_path):
        with open(migration_009_path, 'r') as f:
            content = f.read()

        print("‚úì –ú–∏–≥—Ä–∞—Ü–∏—è 009 –Ω–∞–π–¥–µ–Ω–∞ (monitoring.aged_positions)")
        print("  ‚ö†Ô∏è  –ù–û –≤–µ—Ä–æ—è—Ç–Ω–æ –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (—Ç–∞–±–ª–∏—Ü–∞ –≤ monitoring)")

        # Check that 009 has DIFFERENT structure
        assert 'side VARCHAR(10)' in content, "‚ùå side –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 009"
        assert 'quantity DECIMAL' in content, "‚ùå quantity –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 009"
        assert 'status VARCHAR(30)' in content, "‚ùå status –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ 009"

        # Check that 009 does NOT have phase as column
        if 'current_phase' not in content:
            print("  ‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è 009 –ù–ï –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ 'current_phase'")

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True


def test_repository_create_aged_position_signature():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã create_aged_position"""
    print("\n=== –¢–ï–°–¢ 2: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ create_aged_position ===")

    from database.repository import Repository

    sig = inspect.signature(Repository.create_aged_position)
    params = list(sig.parameters.keys())

    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞: {params}")

    # Check for parameters that aged_position_monitor_v2.py tries to pass
    monitor_params = ['position_id', 'symbol', 'exchange', 'entry_price',
                     'target_price', 'phase', 'loss_tolerance', 'age_hours']

    for param in monitor_params:
        if param not in params:
            print(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: monitor –ø–µ—Ä–µ–¥–∞–µ—Ç '{param}', –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç!")

    # Check for parameters that method requires but monitor doesn't provide
    required_params = ['side', 'quantity', 'position_opened_at', 'detected_at',
                      'status', 'breakeven_price', 'config']

    for param in required_params:
        if param in params:
            param_obj = sig.parameters[param]
            if param_obj.default == inspect.Parameter.empty:
                print(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç '{param}', –Ω–æ monitor –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç!")

    # Check SQL syntax
    source = inspect.getsource(Repository.create_aged_position)
    if '%(name)s' in source:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %(name)s –≤–º–µ—Å—Ç–æ $1 (asyncpg –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)!")

    if 'monitoring.aged_positions' in source:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: SQL –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ monitoring.aged_positions (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)!")

    print("\n‚ö†Ô∏è –ú–µ—Ç–æ–¥ –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤—ã–∑–æ–≤–æ–º –∏–∑ aged_position_monitor_v2.py")
    return True


def test_repository_mark_aged_position_closed_signature():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã mark_aged_position_closed"""
    print("\n=== –¢–ï–°–¢ 3: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ mark_aged_position_closed ===")

    from database.repository import Repository

    sig = inspect.signature(Repository.mark_aged_position_closed)
    params = list(sig.parameters.keys())

    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞: {params}")

    # Check for mismatch with call from aged_position_monitor_v2.py
    call_params = ['position_id', 'order_id', 'close_price', 'close_reason']
    method_params = params[1:]  # Skip 'self'

    print(f"–í—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç: {call_params}")
    print(f"–ú–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–µ—Ç: {method_params}")

    if 'position_id' in call_params and 'position_id' not in method_params:
        print("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç 'position_id', –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç!")

    if 'aged_id' in method_params:
        print("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç 'aged_id', –Ω–æ –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç 'position_id'!")

    if 'order_id' in call_params and 'close_order_id' in method_params:
        print("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç 'order_id', –Ω–æ –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç 'close_order_id'!")

    # Check for missing required parameters
    required_in_method = ['actual_pnl', 'actual_pnl_percent']
    for param in required_in_method:
        if param in method_params:
            param_obj = sig.parameters[param]
            if param_obj.default == inspect.Parameter.empty:
                print(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç '{param}', –Ω–æ –≤—ã–∑–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç!")

    # Check SQL syntax
    source = inspect.getsource(Repository.mark_aged_position_closed)
    if '%(name)s' in source:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %(name)s –≤–º–µ—Å—Ç–æ $1 (asyncpg –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)!")

    if 'monitoring.aged_positions' in source:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: SQL –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ monitoring.aged_positions (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)!")

    print("\n‚ö†Ô∏è –ú–µ—Ç–æ–¥ –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤—ã–∑–æ–≤–æ–º –∏–∑ aged_position_monitor_v2.py")
    return True


def test_aged_monitor_calls():
    """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –≤—ã–∑–æ–≤–æ–≤ –≤ aged_position_monitor_v2.py"""
    print("\n=== –¢–ï–°–¢ 4: –í—ã–∑–æ–≤—ã –≤ aged_position_monitor_v2.py ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    # Check create_aged_position call
    source = inspect.getsource(AgedPositionMonitorV2.add_aged_position)

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ create_aged_position...")
    call_indicators = [
        ('position_id=', '‚úì'),
        ('symbol=', '‚úì'),
        ('exchange=', '‚úì'),
        ('phase=', '‚úì'),
        ('loss_tolerance=', '‚úì'),
        ('age_hours=', '‚úì')
    ]

    for indicator, mark in call_indicators:
        if indicator in source:
            print(f"  {mark} –ü–µ—Ä–µ–¥–∞–µ—Ç {indicator[:-1]}")

    # Check mark_aged_position_closed call
    source_full = inspect.getsource(AgedPositionMonitorV2)

    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ mark_aged_position_closed...")
    if 'mark_aged_position_closed' in source_full:
        print("  ‚úì –í—ã–∑–æ–≤ mark_aged_position_closed –Ω–∞–π–¥–µ–Ω")

        if 'position_id=' in source_full and 'mark_aged_position_closed' in source_full:
            print("  ‚ö†Ô∏è –ü–µ—Ä–µ–¥–∞–µ—Ç position_id (–º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–µ—Ç aged_id)")

        if 'order_id=' in source_full:
            print("  ‚ö†Ô∏è –ü–µ—Ä–µ–¥–∞–µ—Ç order_id (–º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–µ—Ç close_order_id)")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–∑–æ–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True


if __name__ == "__main__":
    print("üîç –¢–ï–°–¢–´ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ aged –º–µ—Ç–æ–¥–æ–≤")
    print("=" * 70)
    print("‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–∏ —Ç–µ—Å—Ç—ã –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    print("‚ö†Ô∏è  –ù–ï –≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥!")
    print("=" * 70)

    all_passed = True

    try:
        # Run all tests
        test_database_schema()
        test_repository_create_aged_position_signature()
        test_repository_mark_aged_position_closed_signature()
        test_aged_monitor_calls()

        print("\n" + "=" * 70)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 70)
        print("\nüìã –í–´–í–û–î–´:")
        print("1. ‚ùå public.aged_positions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–º–∏–≥—Ä–∞—Ü–∏—è 008)")
        print("2. ‚ùå monitoring.aged_positions –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–º–∏–≥—Ä–∞—Ü–∏—è 009 –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)")
        print("3. ‚ùå repository.py –º–µ—Ç–æ–¥—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ –≤—ã–∑–æ–≤–∞–º–∏")
        print("4. ‚ùå SQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %(name)s –≤–º–µ—Å—Ç–æ $1 (asyncpg)")
        print("\nüìÑ –°–º. INVESTIGATION_AGED_METHODS_MISMATCH_20251023.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        all_passed = False
        sys.exit(1)

    sys.exit(0 if all_passed else 1)
