#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö 2025-10-23
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –û—à–∏–±–∫—É Json vs json –≤ repository.py
2. –û—à–∏–±–∫—É —Ä–∞—Å—á–µ—Ç–∞ SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π –≤ trailing_stop
"""

import pytest
import asyncio
from decimal import Decimal
from unittest.mock import AsyncMock, Mock, MagicMock, patch
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.repository import Repository
# from protection.trailing_stop import TrailingStop  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
from core.exchange_manager import ExchangeManager


class TestJsonImportBug:
    """–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã #1: Json –≤–º–µ—Å—Ç–æ json –≤ repository.py"""

    @pytest.mark.asyncio
    async def test_json_import_error(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Json –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞"""

        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Json –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞
        test_code = """
def test_func():
    data = {'test': 'value'}
    result = Json(data)  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç NameError
    return result
"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É–¥–µ—Ç NameError
        with pytest.raises(NameError) as exc_info:
            exec(test_code)
            exec("test_func()")

        assert "name 'Json' is not defined" in str(exc_info.value)

    @pytest.mark.asyncio
    async def test_repository_json_usage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Json –≤ repository.py"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ 1094 –∏ 1261 –≤ repository.py
        with open('database/repository.py', 'r') as f:
            content = f.read()

        # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Json —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        json_capital_count = content.count('Json(')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        assert json_capital_count > 0, "Json —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–∞–π–¥–µ–Ω –≤ repository.py"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        has_json_import = 'import json' in content or 'from json' in content
        assert not has_json_import, "json –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ repository.py"

        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {json_capital_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 'Json(' –≤–º–µ—Å—Ç–æ 'json.dumps('")
        print("‚ùå –ú–æ–¥—É–ª—å json –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("  1. –î–æ–±–∞–≤–∏—Ç—å: import json")
        print("  2. –ó–∞–º–µ–Ω–∏—Ç—å: Json( –Ω–∞ json.dumps(")


class TestShortPositionSLBug:
    """–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã #2: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""

    @pytest.mark.asyncio
    async def test_short_position_sl_validation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""

        # –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–∞ –æ—à–∏–±–∫–∏
        symbol = 'SAROSUSDT'
        position_side = 'sell'  # SHORT –ø–æ–∑–∏—Ü–∏—è
        current_price = Decimal('0.18334')  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        wrong_sl = Decimal('0.17686')  # –ù–µ–≤–µ—Ä–Ω—ã–π SL (–Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)
        correct_sl = Decimal('0.18700')  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π SL (–≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)

        # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏:
        # - SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–æ—Å—Ç–∞)
        # - –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –º—ã –≤ –ø—Ä–∏–±—ã–ª–∏
        # - –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –º—ã –≤ —É–±—ã—Ç–∫–µ –∏ –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä—ã—Ç—å—Å—è –ø–æ SL

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π SL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Ü–µ–Ω—ã
        assert wrong_sl < current_price, "–ù–µ–≤–µ—Ä–Ω—ã–π SL –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è SHORT"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –≤—ã—à–µ —Ü–µ–Ω—ã
        assert correct_sl > current_price, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –¥–ª—è SHORT"

        print(f"üìä SHORT –ø–æ–∑–∏—Ü–∏—è {symbol}")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}")
        print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π SL: {wrong_sl} (–Ω–∏–∂–µ —Ü–µ–Ω—ã - –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π SL: {correct_sl} (–≤—ã—à–µ —Ü–µ–Ω—ã - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")

    @pytest.mark.asyncio
    async def test_bybit_sl_validation_error(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É Bybit –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º SL –¥–ª—è SHORT"""

        # –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Bybit –∏–∑ –ª–æ–≥–∞
        bybit_error = {
            "retCode": 10001,
            "retMsg": "StopLoss:17686000 set for Sell position should greater base_price:18334000??LastPrice",
            "result": {},
            "retExtInfo": {},
            "time": 1761231878819
        }

        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É
        sl_price_raw = 17686000
        base_price_raw = 18334000

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
        sl_price = Decimal(sl_price_raw) / Decimal(1000000000)  # 0.017686
        base_price = Decimal(base_price_raw) / Decimal(1000000000)  # 0.018334

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ Bybit
        assert sl_price < base_price, "SL –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã"

        # –î–ª—è SELL –ø–æ–∑–∏—Ü–∏–∏ SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ
        error_msg = bybit_error['retMsg']
        assert 'should greater' in error_msg, "Bybit —Ç—Ä–µ–±—É–µ—Ç SL > base_price –¥–ª—è SELL"

        print("üî¥ –û—à–∏–±–∫–∞ Bybit –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:")
        print(f"   SL: {sl_price} < Base: {base_price}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}")

    @pytest.mark.asyncio
    async def test_trailing_stop_sl_calculation_for_short(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç SL –≤ trailing_stop –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
        position = {
            'symbol': 'SAROSUSDT',
            'side': 'sell',  # SHORT
            'entry_price': Decimal('0.19000'),
            'mark_price': Decimal('0.18334'),
            'amount': Decimal('100'),
            'exchange': 'bybit'
        }

        # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–∏–±—ã–ª–∏:
        # - –í—Ö–æ–¥: 0.19000 (–ø—Ä–æ–¥–∞–ª–∏ –ø–æ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–µ)
        # - –¢–µ–∫—É—â–∞—è: 0.18334 (—Ü–µ–Ω–∞ —É–ø–∞–ª–∞ - –º—ã –≤ –ø—Ä–∏–±—ã–ª–∏)
        # - PNL = (entry - current) / entry = (0.19 - 0.18334) / 0.19 = 3.5%

        pnl_percent = (position['entry_price'] - position['mark_price']) / position['entry_price'] * 100
        assert pnl_percent > 0, "SHORT –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º trailing stop (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
        trail_percent = Decimal('2.0')

        # –î–ª—è SHORT: SL = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ * (1 + trail%)
        # –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
        calculated_sl = position['mark_price'] * (Decimal('1') + trail_percent / Decimal('100'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SL –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        assert calculated_sl > position['mark_price'], "SL –¥–ª—è SHORT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"

        print(f"üìà –†–∞—Å—á–µ—Ç SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –í—Ö–æ–¥: {position['entry_price']}")
        print(f"   –¢–µ–∫—É—â–∞—è: {position['mark_price']}")
        print(f"   PNL: +{pnl_percent:.2f}%")
        print(f"   Trail: {trail_percent}%")
        print(f"   SL: {calculated_sl} (–≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –Ω–∞ {trail_percent}%)")


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ–±–µ–∏—Ö –ø—Ä–æ–±–ª–µ–º"""

    @pytest.mark.asyncio
    async def test_full_error_scenario(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—à–∏–±–æ–∫ –∏–∑ –ª–æ–≥–æ–≤"""

        print("\n" + "="*60)
        print("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–∑ production")
        print("="*60)

        # –ü—Ä–æ–±–ª–µ–º–∞ 1: Json –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        print("\n1Ô∏è‚É£ –ü—Ä–æ–±–ª–µ–º–∞ —Å Json –≤ repository.py")

        # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ create_aged_monitoring_event
        mock_metadata = {'test': 'data'}

        try:
            # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ Json –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            result = eval("Json(mock_metadata)")
            print("   ‚ùå Json —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
        except NameError as e:
            print(f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: {e}")

        # –ü—Ä–æ–±–ª–µ–º–∞ 2: SL –¥–ª—è SHORT
        print("\n2Ô∏è‚É£ –ü—Ä–æ–±–ª–µ–º–∞ —Å SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π")

        # –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–∞
        saros_data = {
            'symbol': 'SAROSUSDT',
            'side': 'sell',
            'current_price': Decimal('0.18334'),
            'attempted_sl': Decimal('0.17686'),
            'old_sl': Decimal('0.18058845')
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        is_short = saros_data['side'] == 'sell'
        sl_below_price = saros_data['attempted_sl'] < saros_data['current_price']

        if is_short and sl_below_price:
            print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL –Ω–∏–∂–µ —Ü–µ–Ω—ã –¥–ª—è SHORT")
            print(f"      –¶–µ–Ω–∞: {saros_data['current_price']}")
            print(f"      –ü–æ–ø—ã—Ç–∫–∞ SL: {saros_data['attempted_sl']} ‚ùå")
            print(f"      –°—Ç–∞—Ä—ã–π SL: {saros_data['old_sl']} (–æ—Ç–∫–∞—Ç)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        correct_sl_logic = """
        –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏:
        - –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã: –º—ã –≤ –ø—Ä–∏–±—ã–ª–∏, SL –æ–ø—É—Å–∫–∞–µ—Ç—Å—è (–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π)
        - –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã: –º—ã –≤ —É–±—ã—Ç–∫–µ, SL –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è
        - SL –í–°–ï–ì–î–ê –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–æ—Å—Ç–∞
        """

        print("\n   üìã –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ SL –¥–ª—è SHORT:")
        print(correct_sl_logic)

        print("\n" + "="*60)
        print("‚úÖ –û–±–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã")
        print("="*60)


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í\n")

    # –¢–µ—Å—Ç 1: Json –ø—Ä–æ–±–ª–µ–º–∞
    test1 = TestJsonImportBug()
    asyncio.run(test1.test_json_import_error())
    asyncio.run(test1.test_repository_json_usage())

    # –¢–µ—Å—Ç 2: SHORT SL –ø—Ä–æ–±–ª–µ–º–∞
    test2 = TestShortPositionSLBug()
    asyncio.run(test2.test_short_position_sl_validation())
    asyncio.run(test2.test_bybit_sl_validation_error())
    asyncio.run(test2.test_trailing_stop_sl_calculation_for_short())

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    test3 = TestIntegration()
    asyncio.run(test3.test_full_error_scenario())

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")