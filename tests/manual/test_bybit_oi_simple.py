#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á—Ç–æ Bybit OI fix —Ä–∞–±–æ—Ç–∞–µ—Ç.

–î–∞—Ç–∞: 2025-10-29
"""

import asyncio
import ccxt.pro as ccxt

async def test_bybit_oi():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Bybit OI —á–µ—Ä–µ–∑ ticker."""

    print("=" * 80)
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ BYBIT OI")
    print("=" * 80)

    # Test symbols
    symbols = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT']

    # Create Bybit exchange
    exchange = ccxt.bybit()

    try:
        await exchange.load_markets()

        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è OI —á–µ—Ä–µ–∑ ticker['info']['openInterest']")
        print("=" * 80)

        for symbol in symbols:
            print(f"\nüîç {symbol}:")

            try:
                ticker = await exchange.fetch_ticker(symbol)
                price = ticker.get('last', 0)

                # Method –∏–∑ —Ñ–∏–∫—Å–∞: ticker['info']['openInterest']
                oi_contracts = float(ticker.get('info', {}).get('openInterest', 0))
                oi_usd = oi_contracts * price if oi_contracts and price else 0

                print(f"  üí∞ Price: ${price:,.2f}")
                print(f"  üì¶ OI (contracts): {oi_contracts:,.2f}")
                print(f"  üíµ OI (USD): ${oi_usd:,.0f}")

                if oi_usd >= 1_000_000:
                    print(f"  ‚úÖ OI >= $1M - PASS")
                else:
                    print(f"  ‚ùå OI < $1M - FAIL")

            except Exception as e:
                print(f"  ‚ùå Error: {e}")

        print("\n" + "=" * 80)
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("=" * 80)

    finally:
        await exchange.close()


if __name__ == '__main__':
    asyncio.run(test_bybit_oi())
