#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∏–∫—Å–∞ Bybit OI –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–±–æ—Ç–µ.

–î–∞—Ç–∞: 2025-10-29
–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–µ—Ç–æ–¥ _fetch_open_interest_usdt –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Bybit
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))


async def test_bybit_oi_fix():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å–∞ Bybit OI."""

    print("=" * 80)
    print("üß™ –¢–ï–°–¢ BYBIT OI FIX")
    print("=" * 80)

    try:
        # Import –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ path
        from core.wave_signal_processor import WaveSignalProcessor
        from core.exchange_manager import ExchangeManager
        from config.settings import config

        # Create instances
        processor = WaveSignalProcessor(config)

        # Test Bybit symbols
        test_symbols = [
            'BTC/USDT:USDT',
            'ETH/USDT:USDT',
            'SOL/USDT:USDT'
        ]

        # Create Bybit exchange manager
        print("\nüì° –°–æ–∑–¥–∞–Ω–∏–µ Bybit exchange manager...")
        exchange_manager = ExchangeManager('bybit', config)
        await exchange_manager.initialize()

        print("\n" + "=" * 80)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BYBIT OI –ü–û–õ–£–ß–ï–ù–ò–Ø")
        print("=" * 80)

        results = []

        for symbol in test_symbols:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {symbol}")
            print("-" * 80)

            try:
                # Get current price first
                ticker = await exchange_manager.fetch_ticker(symbol)
                current_price = ticker.get('last', 0)

                print(f"  üí∞ Current Price: ${current_price:,.2f}")

                # Test OI fetch
                oi_usdt = await processor._fetch_open_interest_usdt(
                    exchange_manager,
                    symbol,
                    'bybit',
                    current_price
                )

                if oi_usdt is not None and oi_usdt > 0:
                    print(f"  ‚úÖ OI (USDT): ${oi_usdt:,.0f}")
                    print(f"  ‚úÖ OI >= $1M: {oi_usdt >= 1_000_000}")
                    results.append({
                        'symbol': symbol,
                        'success': True,
                        'oi_usdt': oi_usdt,
                        'price': current_price
                    })
                else:
                    print(f"  ‚ùå OI fetch failed: {oi_usdt}")
                    results.append({
                        'symbol': symbol,
                        'success': False,
                        'oi_usdt': oi_usdt,
                        'price': current_price
                    })

            except Exception as e:
                print(f"  ‚ùå ERROR: {e}")
                results.append({
                    'symbol': symbol,
                    'success': False,
                    'error': str(e)
                })

        # Close exchange
        await exchange_manager.close()

        # Summary
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 80)

        success_count = sum(1 for r in results if r.get('success'))
        total_count = len(results)

        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")

        if success_count == total_count:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Bybit OI fix —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return 0
        elif success_count > 0:
            print("\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")
            return 1
        else:
            print("\n‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
            return 2

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 3


if __name__ == '__main__':
    exit_code = asyncio.run(test_bybit_oi_fix())
    sys.exit(exit_code)
