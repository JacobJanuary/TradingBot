#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def integration_test():
    """–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""

    print("=" * 60)
    print("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ aged –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 60)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    from core.position_manager import PositionManager, PositionState
    from core.aged_position_monitor_v2 import AgedPositionMonitorV2
    from core.unified_protection import UnifiedProtection
    from config.settings import TradingConfig
    from unittest.mock import Mock, AsyncMock

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = TradingConfig()
    config.max_position_age_hours = 3

    # –ú–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    mock_repo = AsyncMock()
    mock_exchanges = {
        'binance': Mock(),
        'bybit': Mock()
    }
    mock_event_router = Mock()

    # –°–æ–∑–¥–∞–µ–º PositionManager
    position_manager = PositionManager(
        config,
        mock_exchanges,
        mock_repo,
        mock_event_router
    )

    # –°–æ–∑–¥–∞–µ–º AgedPositionMonitorV2
    aged_monitor = AgedPositionMonitorV2(
        repository=mock_repo,
        exchange_manager=mock_exchanges,
        position_manager=position_manager
    )

    # –°–æ–∑–¥–∞–µ–º UnifiedProtection
    unified_protection = UnifiedProtection(
        repository=mock_repo,
        exchanges=mock_exchanges,
        position_manager=position_manager,
        config=config
    )

    # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    position_manager.unified_protection = {
        'aged_monitor': aged_monitor
    }

    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    test_positions = [
        ("BTCUSDT", 1.5, "–º–æ–ª–æ–¥–∞—è (1.5—á)"),    # –ù–µ aged
        ("ETHUSDT", 2.9, "–ø–æ—á—Ç–∏ aged (2.9—á)"),  # –ù–µ aged
        ("SOLUSDT", 3.1, "—Ç–æ–ª—å–∫–æ —á—Ç–æ aged (3.1—á)"),  # Aged!
        ("AVAXUSDT", 5.0, "–¥–∞–≤–Ω–æ aged (5—á)"),   # Aged!
        ("DOTUSDT", 8.5, "–æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è (8.5—á)")  # Aged!
    ]

    detection_results = []

    for symbol, age_hours, description in test_positions:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        position = PositionState(
            id=f"test_{symbol}",
            symbol=symbol,
            exchange="binance",
            side="long",
            quantity=Decimal("1"),
            entry_price=Decimal("100"),
            current_price=Decimal("95"),
            unrealized_pnl=Decimal("-5"),
            unrealized_pnl_percent=Decimal("-5"),
            opened_at=datetime.now(timezone.utc) - timedelta(hours=age_hours)
        )

        position_manager.positions[symbol] = position
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}: {description}")

    print("\n2. –°–∏–º—É–ª—è—Ü–∏—è WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

    # –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –¥–æ
    initial_count = getattr(position_manager, 'instant_aged_detections', 0)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    for symbol, age_hours, description in test_positions:
        ws_data = {
            'symbol': f'{symbol[:-4]}/USDT:USDT',
            'mark_price': 95.0
        }

        print(f"\n  –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol} ({description})...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await position_manager._on_position_update(ws_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        is_tracked = symbol in aged_monitor.aged_targets
        should_be_aged = age_hours > 3.0

        if is_tracked:
            print(f"    ‚ö° –û–ë–ù–ê–†–£–ñ–ï–ù–ê –∫–∞–∫ aged!")
        else:
            print(f"    ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ aged)")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        detection_results.append({
            'symbol': symbol,
            'age_hours': age_hours,
            'description': description,
            'should_be_aged': should_be_aged,
            'is_tracked': is_tracked,
            'correct': is_tracked == should_be_aged
        })

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    final_count = getattr(position_manager, 'instant_aged_detections', 0)

    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    print("\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:")
    for result in detection_results:
        status = "‚úÖ" if result['correct'] else "‚ùå"
        print(f"{status} {result['symbol']:10} {result['description']:20} "
              f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å aged: {result['should_be_aged']:5} "
              f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {result['is_tracked']:5}")

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_positions = len(detection_results)
    correct_detections = sum(1 for r in detection_results if r['correct'])
    aged_positions = sum(1 for r in detection_results if r['should_be_aged'])
    detected_aged = sum(1 for r in detection_results if r['is_tracked'])

    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_positions}")
    print(f"  –î–æ–ª–∂–Ω–æ –±—ã—Ç—å aged: {aged_positions}")
    print(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ aged: {detected_aged}")
    print(f"  –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {correct_detections}/{total_positions}")
    print(f"  –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {initial_count} ‚Üí {final_count} (+{final_count - initial_count})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    all_correct = all(r['correct'] for r in detection_results)

    if all_correct:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        print("–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    start_time = asyncio.get_event_loop().time()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    for i in range(100):
        ws_data = {
            'symbol': 'BTC/USDT:USDT',
            'mark_price': 95000 + i
        }
        await position_manager._on_position_update(ws_data)

    elapsed = asyncio.get_event_loop().time() - start_time
    avg_time = elapsed / 100 * 1000  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ {elapsed:.3f} —Å–µ–∫")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_time:.2f} –º—Å")

    if avg_time < 10:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10–º—Å
        print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
    else:
        print("  ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    print("\n" + "=" * 60)
    print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
    print("=" * 60)

    return True


if __name__ == "__main__":
    import sys
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    result = asyncio.run(integration_test())

    if result:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ.")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
        sys.exit(1)