#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø type error –≤ create_aged_monitoring_event
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –§–ò–ö –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
import sys
import os
import inspect
from decimal import Decimal

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_fix_aged_target_creation():
    """–§–ò–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ position_id –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ str –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
    print("\n=== –§–ò–ö: –°–æ–∑–¥–∞–Ω–∏–µ AgedPositionTarget —Å str() ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    source = inspect.getsource(AgedPositionMonitorV2.add_aged_position)

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è target...")

    # Check that str() is used
    assert 'str(getattr(position, \'id\'' in source, \
        "‚ùå position_id –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å str(getattr(...))"

    # More specific check
    if 'position_id=str(getattr(position, \'id\'' in source or \
       'position_id = str(getattr(position, \'id\'' in source:
        print("‚úÖ position_id=str(getattr(position, 'id', symbol))")
    else:
        print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û: position_id=str(getattr(...))")
        return False

    print("‚úÖ –§–ò–ö –ö–û–†–†–ï–ö–¢–ï–ù: position_id –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ str")
    return True


def test_monitoring_event_calls_after_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ –≤—Å–µ –≤—ã–∑–æ–≤—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"""
    print("\n=== –í–´–ó–û–í–´ create_aged_monitoring_event ===")

    # After fix, target.position_id will ALWAYS be str
    # So all 4 calls will work correctly

    from core.aged_position_monitor_v2 import AgedPositionTarget

    # Simulate what happens AFTER fix
    target = AgedPositionTarget(
        symbol='BTCUSDT',
        entry_price=Decimal('50000'),
        target_price=Decimal('49000'),
        phase='grace',
        loss_tolerance=Decimal('0.5'),
        hours_aged=2.5,
        position_id=str(2745)  # After fix: always str
    )

    # Verify type
    assert isinstance(target.position_id, str), \
        f"‚ùå target.position_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω {type(target.position_id)}"

    print(f"‚úÖ target.position_id = '{target.position_id}' (type: str)")
    print("‚úÖ –í—Å–µ 4 –≤—ã–∑–æ–≤–∞ create_aged_monitoring_event –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

    return True


def test_integration_str_conversion():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: str() –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\n=== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: str() –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ===")

    # Case 1: int (most common)
    position_id_int = 2745
    result1 = str(position_id_int)
    assert result1 == "2745", f"‚ùå str(int) –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {result1}"
    assert isinstance(result1, str), f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str: {type(result1)}"
    print(f"‚úÖ str(2745) = '{result1}' (int ‚Üí str)")

    # Case 2: str (fallback case)
    position_id_str = "BTCUSDT"
    result2 = str(position_id_str)
    assert result2 == "BTCUSDT", f"‚ùå str(str) –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {result2}"
    assert isinstance(result2, str), f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str: {type(result2)}"
    print(f"‚úÖ str('BTCUSDT') = '{result2}' (str ‚Üí str)")

    # Case 3: getattr with fallback
    class MockPosition:
        id = 2745

    result3 = str(getattr(MockPosition(), 'id', 'BTCUSDT'))
    assert result3 == "2745", f"‚ùå str(getattr) –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {result3}"
    assert isinstance(result3, str), f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str: {type(result3)}"
    print(f"‚úÖ str(getattr(position, 'id', ...)) = '{result3}' (with id)")

    class MockPositionNoId:
        pass

    result4 = str(getattr(MockPositionNoId(), 'id', 'BTCUSDT'))
    assert result4 == "BTCUSDT", f"‚ùå str(getattr fallback) –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {result4}"
    assert isinstance(result4, str), f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str: {type(result4)}"
    print(f"‚úÖ str(getattr(position, 'id', 'symbol')) = '{result4}' (fallback)")

    print("\n‚úÖ str() –ë–ï–ó–û–ü–ê–°–ù–ê –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤")
    return True


def test_all_calls_validated():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ 4 –≤—ã–∑–æ–≤–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å str"""
    print("\n=== –í–ê–õ–ò–î–ê–¶–ò–Ø: –í—Å–µ 4 –≤—ã–∑–æ–≤–∞ ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    source = inspect.getsource(AgedPositionMonitorV2)

    # Find all calls to create_aged_monitoring_event
    import re
    calls = re.findall(
        r'aged_position_id\s*=\s*target\.position_id',
        source
    )

    call_count = len(calls)
    print(f"–ù–∞–π–¥–µ–Ω–æ {call_count} –≤—ã–∑–æ–≤–æ–≤ —Å aged_position_id=target.position_id")

    # After fix, target.position_id will be str
    print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞: target.position_id –í–°–ï–ì–î–ê str")
    print(f"‚úÖ –í—Å–µ {call_count} –≤—ã–∑–æ–≤–∞ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    return True


if __name__ == "__main__":
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: Type Error –≤ create_aged_monitoring_event")
    print("=" * 70)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –§–ò–ö –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("=" * 70)

    all_passed = True
    failed_tests = []

    try:
        # Run all validation tests
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ target —Å str()", test_fix_aged_target_creation),
            ("–í—ã–∑–æ–≤—ã –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞", test_monitoring_event_calls_after_fix),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å str()", test_integration_str_conversion),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤", test_all_calls_validated),
        ]

        for name, test_func in tests:
            try:
                result = test_func()
                if not result:
                    failed_tests.append(name)
                    all_passed = False
            except Exception as e:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{name}': {e}")
                import traceback
                traceback.print_exc()
                failed_tests.append(name)
                all_passed = False

        print("\n" + "=" * 70)
        if all_passed:
            print("üéâ –í–°–ï –í–ê–õ–ò–î–ê–¶–ò–ò –£–°–ü–ï–®–ù–´!")
            print("=" * 70)
            print("\nüìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
            print("‚úÖ –§–ò–ö –ö–û–†–†–ï–ö–¢–ï–ù: position_id=str(getattr(...))")
            print("‚úÖ target.position_id –í–°–ï–ì–î–ê str")
            print("‚úÖ –í—Å–µ 4 –≤—ã–∑–æ–≤–∞ create_aged_monitoring_event —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚úÖ str() –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è int –∏ str")
            print("\nüöÄ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ")
        else:
            print(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {', '.join(failed_tests)}")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        all_passed = False
        sys.exit(1)

    sys.exit(0 if all_passed else 1)
