#!/usr/bin/env python3
"""
Comprehensive health check –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
–ó–ê–ü–£–°–ö–ê–¢–¨ –ü–û–°–õ–ï –ö–ê–ñ–î–û–ì–û COMMIT!

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
- Database connection
- Decimal utils
- Exchange manager
- Models schema
- Repository SQL injection protection
- CryptoManager salt
"""
import asyncio
import sys
import os
from pathlib import Path
from decimal import Decimal

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

class HealthChecker:
    def __init__(self):
        self.passed = []
        self.failed = []
        self.warnings = []

    async def check_imports(self):
        """TEST 1: –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è"""
        critical_modules = [
            'database.repository',
            'database.models',
            'core.exchange_manager',
            'core.position_manager',
            'core.risk_manager',
            'utils.decimal_utils',
            'utils.crypto_manager',
            'protection.stop_loss_manager',
        ]

        for module in critical_modules:
            try:
                __import__(module)
                self.passed.append(f"‚úÖ Import {module}")
            except Exception as e:
                self.failed.append(f"‚ùå Import {module}: {e}")

    async def check_database(self):
        """TEST 2: Database connection –∏ schema"""
        try:
            from database.repository import Repository

            repo = Repository()
            await repo.connect()

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ positions table —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            result = await repo.pool.fetchval("""
                SELECT COUNT(*) FROM information_schema.tables
                WHERE table_schema = 'monitoring' AND table_name = 'positions'
            """)

            if result == 1:
                self.passed.append("‚úÖ Database: monitoring.positions exists")
            else:
                self.failed.append("‚ùå Database: monitoring.positions NOT found")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            positions = await repo.get_all_positions(limit=1)
            self.passed.append(f"‚úÖ Database: Can read positions")

            await repo.disconnect()

        except Exception as e:
            self.failed.append(f"‚ùå Database: {e}")

    async def check_decimal_utils(self):
        """TEST 3: Decimal utils —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
        try:
            from utils.decimal_utils import to_decimal

            # Test to_decimal
            result = to_decimal("123.456", precision=2)
            if result == Decimal("123.46"):
                self.passed.append("‚úÖ Decimal: to_decimal works")
            else:
                self.failed.append(f"‚ùå Decimal: to_decimal returned {result}")

            # Test safe_decimal (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                from utils.decimal_utils import safe_decimal
                result = safe_decimal("invalid", default=Decimal("0"))
                if result == Decimal("0"):
                    self.passed.append("‚úÖ Decimal: safe_decimal works")
                else:
                    self.failed.append(f"‚ùå Decimal: safe_decimal returned {result}")
            except ImportError:
                self.warnings.append("‚ö†Ô∏è  Decimal: safe_decimal not implemented yet")

        except Exception as e:
            self.failed.append(f"‚ùå Decimal utils: {e}")

    async def check_exchange_manager(self):
        """TEST 4: Exchange manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è"""
        try:
            from core.exchange_manager import ExchangeManager

            # –°–æ–∑–¥–∞—Ç—å manager (–ù–ï –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ!)
            em = ExchangeManager('binance', testnet=True)

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ rate_limiter –µ—Å—Ç—å
            if hasattr(em, 'rate_limiter'):
                self.passed.append("‚úÖ ExchangeManager: has rate_limiter")
            else:
                self.failed.append("‚ùå ExchangeManager: NO rate_limiter")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            required_methods = [
                'create_market_order',
                'cancel_order',
                'fetch_balance',
                'set_leverage'
            ]

            for method in required_methods:
                if hasattr(em, method):
                    self.passed.append(f"‚úÖ ExchangeManager: has {method}")
                else:
                    self.failed.append(f"‚ùå ExchangeManager: NO {method}")

        except Exception as e:
            self.failed.append(f"‚ùå ExchangeManager: {e}")

    async def check_models_schema(self):
        """TEST 5: models.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É"""
        try:
            from database.models import Position

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å schema –≤ __table_args__
            if hasattr(Position, '__table_args__'):
                args = Position.__table_args__

                # –ù–∞–π—Ç–∏ schema –≤ tuple –∏–ª–∏ dict
                schema = None
                if isinstance(args, dict):
                    schema = args.get('schema')
                elif isinstance(args, tuple):
                    for item in args:
                        if isinstance(item, dict):
                            schema = item.get('schema')
                            break

                if schema == 'monitoring':
                    self.passed.append("‚úÖ Models: Position uses 'monitoring' schema")
                else:
                    self.failed.append(f"‚ùå Models: Position uses '{schema}' schema (should be 'monitoring')")
            else:
                self.failed.append("‚ùå Models: Position has no __table_args__")

        except Exception as e:
            self.failed.append(f"‚ùå Models: {e}")

    async def check_repository_sql_injection_protection(self):
        """TEST 6: Repository –∑–∞—â–∏—â–µ–Ω –æ—Ç SQL injection"""
        try:
            from database.repository import Repository

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å ALLOWED_FIELDS
            if hasattr(Repository, 'ALLOWED_POSITION_FIELDS'):
                self.passed.append("‚úÖ Repository: SQL injection protection exists")

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å SQL injection
                repo = Repository()
                await repo.connect()

                try:
                    await repo.update_position(
                        9999,
                        **{'malicious_field; DROP TABLE': 'value'}
                    )
                    self.failed.append("‚ùå Repository: SQL injection NOT blocked!")
                except ValueError as e:
                    if 'Invalid field' in str(e):
                        self.passed.append("‚úÖ Repository: SQL injection blocked")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è  Repository: Unexpected error: {e}")
                except Exception:
                    # Position not found is OK - we're just testing validation
                    self.passed.append("‚úÖ Repository: SQL injection blocked")

                await repo.disconnect()

            else:
                self.warnings.append("‚ö†Ô∏è  Repository: SQL injection protection NOT implemented yet")

        except Exception as e:
            self.warnings.append(f"‚ö†Ô∏è  Repository check: {e}")

    async def check_crypto_manager_salt(self):
        """TEST 7: CryptoManager –∏—Å–ø–æ–ª—å–∑—É–µ—Ç random salt"""
        try:
            from utils.crypto_manager import CryptoManager

            cm = CryptoManager()

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ salt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ù–ï fixed
            if hasattr(cm, 'salt'):
                if cm.salt != b'trading_bot_salt':
                    self.passed.append("‚úÖ CryptoManager: Uses random salt")
                else:
                    self.failed.append("‚ùå CryptoManager: Still uses FIXED salt!")
            else:
                self.warnings.append("‚ö†Ô∏è  CryptoManager: salt attribute not found (not fixed yet)")

        except Exception as e:
            # CryptoManager –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–º
            self.warnings.append(f"‚ö†Ô∏è  CryptoManager: {e}")

    async def check_position_manager(self):
        """TEST 8: Position manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è"""
        try:
            from core.position_manager import PositionManager

            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
            self.passed.append("‚úÖ PositionManager: Import OK")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            if hasattr(PositionManager, 'open_position'):
                self.passed.append("‚úÖ PositionManager: has open_position")
            else:
                self.failed.append("‚ùå PositionManager: NO open_position")

        except Exception as e:
            self.failed.append(f"‚ùå PositionManager: {e}")

    async def run_all_checks(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("="*80)
        print("üè• COMPREHENSIVE HEALTH CHECK")
        print("="*80)
        print()

        await self.check_imports()
        await self.check_database()
        await self.check_decimal_utils()
        await self.check_exchange_manager()
        await self.check_models_schema()
        await self.check_repository_sql_injection_protection()
        await self.check_crypto_manager_salt()
        await self.check_position_manager()

        # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*80)
        print("RESULTS")
        print("="*80)

        if self.passed:
            print(f"\n‚úÖ PASSED ({len(self.passed)}):")
            for item in self.passed:
                print(f"   {item}")

        if self.warnings:
            print(f"\n‚ö†Ô∏è  WARNINGS ({len(self.warnings)}):")
            for item in self.warnings:
                print(f"   {item}")

        if self.failed:
            print(f"\n‚ùå FAILED ({len(self.failed)}):")
            for item in self.failed:
                print(f"   {item}")

        print("\n" + "="*80)
        total = len(self.passed) + len(self.warnings) + len(self.failed)
        print(f"TOTAL: {len(self.passed)}/{total} passed, {len(self.warnings)} warnings, {len(self.failed)} failed")
        print("="*80)

        # Warnings OK, –Ω–æ failures - STOP
        return len(self.failed) == 0

async def main():
    checker = HealthChecker()
    success = await checker.run_all_checks()

    if success:
        print("\n‚úÖ HEALTH CHECK PASSED - safe to continue")
        return 0
    else:
        print("\n‚ùå HEALTH CHECK FAILED - DO NOT CONTINUE!")
        print("   Review errors above and fix before proceeding")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
