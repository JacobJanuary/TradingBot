import time
import subprocess
import sys
from datetime import datetime

def get_tail(file, lines=100):
    """Get last N lines from file"""
    try:
        result = subprocess.run(['tail', f'-{lines}', file], 
                              capture_output=True, text=True, timeout=5)
        return result.stdout
    except:
        return ""

def monitor():
    """Live monitoring of the bot"""
    print("\n" + "="*80)
    print("üìä LIVE MONITORING - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥")
    print("="*80 + "\n")
    
    iteration = 0
    while True:
        iteration += 1
        now = datetime.now().strftime("%H:%M:%S")
        
        print(f"\nüïê [{now}] –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}")
        print("-" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        ps_result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        bot_running = 'main.py --mode production' in ps_result.stdout
        gen_running = 'signal_generator' in ps_result.stdout
        
        print(f"ü§ñ –ë–æ—Ç: {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if bot_running else '‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üì° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if gen_running else '‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        if not bot_running:
            print("\n‚ùå –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            break
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        log = get_tail('tests/integration/bot_test_NEW.log', 200)
        
        # –í–æ–ª–Ω—ã
        waves = [line for line in log.split('\n') if 'Wave detected' in line or 'Wave.*complete' in line]
        if waves:
            print(f"\nüåä –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–ª–Ω–∞:")
            print(f"   {waves[-1][-100:]}")
        
        # –ü–æ–∑–∏—Ü–∏–∏
        positions_opened = [line for line in log.split('\n') if 'Position opened:' in line]
        if positions_opened:
            recent = positions_opened[-5:]
            print(f"\nüìà –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ (–≤—Å–µ–≥–æ {len(positions_opened)}, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
            for pos in recent:
                symbol = pos.split('Position opened:')[1].split()[0] if 'Position opened:' in pos else '?'
                print(f"   ‚Ä¢ {symbol}")
        
        # SL –æ—Ä–¥–µ—Ä–∞
        sl_created = len([line for line in log.split('\n') if 'Stop Loss order created' in line])
        sl_cancelled = len([line for line in log.split('\n') if 'Cancelled orphaned order' in line and 'STOP' in line])
        
        print(f"\nüõ°Ô∏è SL –æ—Ä–¥–µ—Ä–∞:")
        print(f"   –°–æ–∑–¥–∞–Ω–æ: {sl_created}")
        print(f"   –£–¥–∞–ª–µ–Ω–æ: {sl_cancelled}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ: {sl_created - sl_cancelled}")
        
        # –û—à–∏–±–∫–∏
        errors = [line for line in log.split('\n')[-50:] if 'ERROR' in line or 'Failed to open' in line]
        if errors:
            print(f"\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ ({len(errors)}):")
            for err in errors[-3:]:
                print(f"   {err[-100:]}")
        
        # –°–ª–µ–¥—É—é—â–∞—è –≤–æ–ª–Ω–∞
        waiting = [line for line in log.split('\n') if 'Waiting' in line and 'until next wave' in line]
        if waiting:
            print(f"\n‚è∞ {waiting[-1].split('INFO - ')[1] if 'INFO - ' in waiting[-1] else waiting[-1][-80:]}")
        
        print("\n" + "="*80)
        print("Press Ctrl+C to stop monitoring")
        print("="*80)
        
        time.sleep(15)

if __name__ == "__main__":
    try:
        monitor()
    except KeyboardInterrupt:
        print("\n\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
