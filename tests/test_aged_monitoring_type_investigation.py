#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è type error –≤ create_aged_monitoring_event
–ù–ï –ú–ï–ù–Ø–ï–¢ –ö–û–î - –¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê
"""
import sys
import os
import inspect
from decimal import Decimal

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_repository_method_signature():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã create_aged_monitoring_event"""
    print("\n=== –¢–ï–°–¢ 1: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ create_aged_monitoring_event ===")

    from database.repository import Repository

    sig = inspect.signature(Repository.create_aged_monitoring_event)
    params = sig.parameters

    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞: {list(params.keys())}")

    # Check first parameter type annotation
    aged_position_id_param = params['aged_position_id']
    print(f"aged_position_id –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {aged_position_id_param.annotation}")

    assert aged_position_id_param.annotation == str, \
        f"‚ùå aged_position_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω {aged_position_id_param.annotation}"

    print("‚úÖ –ú–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–µ—Ç aged_position_id: str")

    # Check SQL uses $1
    source = inspect.getsource(Repository.create_aged_monitoring_event)
    assert '$1' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $1 –¥–ª—è asyncpg"
    print("‚úÖ SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç $1 –¥–ª—è aged_position_id")

    return True


def test_database_schema():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã aged_monitoring_events ===")

    migration_path = 'database/migrations/008_create_aged_tables.sql'
    if os.path.exists(migration_path):
        with open(migration_path, 'r') as f:
            content = f.read()

        print("‚úì –ú–∏–≥—Ä–∞—Ü–∏—è 008 –Ω–∞–π–¥–µ–Ω–∞")

        # Check aged_position_id column type
        assert 'aged_position_id VARCHAR(255)' in content, \
            "‚ùå aged_position_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å VARCHAR(255)"
        print("‚úÖ aged_position_id VARCHAR(255) NOT NULL –≤ —Ç–∞–±–ª–∏—Ü–µ")

    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è 008 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    return True


def test_aged_position_target_definition():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è AgedPositionTarget dataclass"""
    print("\n=== –¢–ï–°–¢ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ AgedPositionTarget ===")

    from core.aged_position_monitor_v2 import AgedPositionTarget

    # Check type hints
    hints = AgedPositionTarget.__annotations__
    print(f"Type hints: {hints}")

    assert 'position_id' in hints, "‚ùå position_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ dataclass"
    assert hints['position_id'] == str, \
        f"‚ùå position_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω–∞ {hints['position_id']}"

    print("‚úÖ AgedPositionTarget.position_id –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ str")

    # Note: Python dataclass does NOT enforce type checking by default!
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: dataclass –ù–ï –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
    print("‚ö†Ô∏è  position_id: str - —ç—Ç–æ –¢–û–õ–¨–ö–û –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è, –ù–ï –ø—Ä–æ–≤–µ—Ä–∫–∞!")

    return True


def test_aged_target_creation_source():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AgedPositionTarget –≤ –∫–æ–¥–µ"""
    print("\n=== –¢–ï–°–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ AgedPositionTarget ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    source = inspect.getsource(AgedPositionMonitorV2.add_aged_position)

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è target...")

    # Find the line where position_id is assigned
    if 'position_id=getattr(position, \'id\'' in source or \
       'position_id = getattr(position, \'id\'' in source:
        print("‚úì –ù–∞–π–¥–µ–Ω–æ: position_id=getattr(position, 'id', symbol)")

        # Check if str() is used
        if 'str(getattr(position, \'id\'' in source:
            print("‚úÖ position_id –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ str()")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: position_id –ù–ï –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ str!")
            print("‚ùå position.id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int, –Ω–æ –Ω—É–∂–µ–Ω str!")
            return False
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ position_id=getattr(...)")

    return True


def test_create_monitoring_event_calls():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ create_aged_monitoring_event"""
    print("\n=== –¢–ï–°–¢ 5: –í—ã–∑–æ–≤—ã create_aged_monitoring_event ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    source = inspect.getsource(AgedPositionMonitorV2)

    # Find all calls to create_aged_monitoring_event
    import re
    calls = re.findall(
        r'create_aged_monitoring_event\([^)]+\)',
        source,
        re.DOTALL
    )

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(calls)} –≤—ã–∑–æ–≤–æ–≤ create_aged_monitoring_event")

    problematic_calls = 0
    for i, call in enumerate(calls, 1):
        # Check if aged_position_id uses target.position_id
        if 'aged_position_id=target.position_id' in call or \
           'aged_position_id = target.position_id' in call:
            print(f"  {i}. ‚ùå –ü–†–û–ë–õ–ï–ú–ê: aged_position_id=target.position_id (–º–æ–∂–µ—Ç –±—ã—Ç—å int)")
            problematic_calls += 1
        elif 'aged_position_id=str(target.position_id)' in call:
            print(f"  {i}. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: aged_position_id=str(target.position_id)")
        elif 'aged_position_id=' in call:
            # Extract what is passed
            match = re.search(r'aged_position_id\s*=\s*(\w+)', call)
            if match:
                value = match.group(1)
                print(f"  {i}. ? –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è: aged_position_id={value}")

    if problematic_calls > 0:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {problematic_calls} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–∞(–æ–≤)")
        print("‚ùå target.position_id –º–æ–∂–µ—Ç –±—ã—Ç—å int, –Ω–æ –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç str!")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –≤—ã–∑–æ–≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç str)")

    return True


def test_type_conversion_simulation():
    """–¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–æ–º"""
    print("\n=== –¢–ï–°–¢ 6: –°–∏–º—É–ª—è—Ü–∏—è type error ===")

    # Simulate what happens with position.id
    position_id_int = 2745  # This is what position.id returns
    position_id_str = str(2745)  # This is what we need

    print(f"position.id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {position_id_int} (type: {type(position_id_int).__name__})")
    print(f"str(position.id) –¥–∞–µ—Ç: {position_id_str} (type: {type(position_id_str).__name__})")

    # Check asyncpg expectation
    print("\n–ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç asyncpg –¥–ª—è VARCHAR(255):")
    print("  ‚úÖ str: '2745'")
    print("  ‚ùå int: 2745 ‚Üí ERROR: invalid input for query argument $1: 2745 (expected str, got int)")

    # Demonstrate dataclass does NOT enforce type
    from core.aged_position_monitor_v2 import AgedPositionTarget

    target_bad = AgedPositionTarget(
        symbol='BTCUSDT',
        entry_price=Decimal('50000'),
        target_price=Decimal('49000'),
        phase='grace',
        loss_tolerance=Decimal('0.5'),
        hours_aged=2.5,
        position_id=2745  # ‚ùå int, –Ω–æ dataclass –Ω–µ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç!
    )

    print(f"\n‚ö†Ô∏è  target.position_id = {target_bad.position_id} (type: {type(target_bad.position_id).__name__})")
    print("‚ö†Ô∏è  dataclass –ü–†–ò–ù–ò–ú–ê–ï–¢ int, —Ö–æ—Ç—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è str!")
    print("‚ö†Ô∏è  –ù–æ asyncpg –û–¢–ö–õ–û–ù–ò–¢ int –ø—Ä–∏ INSERT!")

    target_good = AgedPositionTarget(
        symbol='BTCUSDT',
        entry_price=Decimal('50000'),
        target_price=Decimal('49000'),
        phase='grace',
        loss_tolerance=Decimal('0.5'),
        hours_aged=2.5,
        position_id=str(2745)  # ‚úÖ str
    )

    print(f"\n‚úÖ target.position_id = '{target_good.position_id}' (type: {type(target_good.position_id).__name__})")
    print("‚úÖ asyncpg –ü–†–ò–ú–ï–¢ str –ø—Ä–∏ INSERT")

    return True


if __name__ == "__main__":
    print("üîç –¢–ï–°–¢–´ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: Type Error –≤ create_aged_monitoring_event")
    print("=" * 70)
    print("‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–∏ —Ç–µ—Å—Ç—ã –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    print("‚ö†Ô∏è  –ù–ï –≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥!")
    print("=" * 70)

    all_passed = True
    failed_tests = []

    try:
        # Run all tests
        tests = [
            ("–°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞", test_repository_method_signature),
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã", test_database_schema),
            ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ dataclass", test_aged_position_target_definition),
            ("–°–æ–∑–¥–∞–Ω–∏–µ target", test_aged_target_creation_source),
            ("–í—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–∞", test_create_monitoring_event_calls),
            ("–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã", test_type_conversion_simulation),
        ]

        for name, test_func in tests:
            try:
                result = test_func()
                if not result:
                    failed_tests.append(name)
                    all_passed = False
            except Exception as e:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{name}': {e}")
                import traceback
                traceback.print_exc()
                failed_tests.append(name)
                all_passed = False

        print("\n" + "=" * 70)
        if all_passed:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        else:
            print(f"‚ö†Ô∏è  –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò: {', '.join(failed_tests)}")
        print("=" * 70)

        print("\nüìã –í–´–í–û–î–´:")
        print("1. ‚úÖ –ú–µ—Ç–æ–¥ create_aged_monitoring_event —Ç—Ä–µ–±—É–µ—Ç str")
        print("2. ‚úÖ –¢–∞–±–ª–∏—Ü–∞ aged_monitoring_events –∏—Å–ø–æ–ª—å–∑—É–µ—Ç VARCHAR(255)")
        print("3. ‚úÖ AgedPositionTarget.position_id –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ str")
        print("4. ‚ùå –ù–û: dataclass –ù–ï –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø—ã!")
        print("5. ‚ùå position.id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–µ–∑ str()")
        print("6. ‚ùå asyncpg –æ—Ç–∫–ª–æ–Ω—è–µ—Ç int –¥–ª—è VARCHAR –∫–æ–ª–æ–Ω–∫–∏")
        print("\nüí° –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å str() –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è AgedPositionTarget")
        print("   position_id=str(getattr(position, 'id', symbol))")
        print("\nüìÑ –°–º. INVESTIGATION_AGED_MONITORING_TYPE_ERROR_20251023.md")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        all_passed = False
        sys.exit(1)

    sys.exit(0 if all_passed else 1)
