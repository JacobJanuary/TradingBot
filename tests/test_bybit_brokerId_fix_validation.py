#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: Bybit brokerId Error 170003
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –§–ò–ö –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
import sys
import os
import inspect

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_fix_exchange_manager_source():
    """–§–ò–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ brokerId –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ"""
    print("\n=== –§–ò–ö: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ exchange_manager.py ===")

    from core.exchange_manager import ExchangeManager

    # Get source code
    source = inspect.getsource(ExchangeManager.__init__)

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è brokerId...")

    # Check that brokerId is set to empty string for Bybit
    if "self.name == 'bybit'" in source:
        # Find the bybit section
        lines = source.split('\n')
        in_bybit_section = False
        found_broker_id = False

        for i, line in enumerate(lines):
            if "self.name == 'bybit'" in line:
                in_bybit_section = True

            if in_bybit_section:
                if 'brokerId' in line and ("''" in line or '""' in line):
                    found_broker_id = True
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ brokerId –Ω–∞ —Å—Ç—Ä–æ–∫–µ: {line.strip()}")
                    break

                # End of bybit section
                if 'self.exchange = exchange_class' in line:
                    break

        if not found_broker_id:
            print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ brokerId –≤ —Å–µ–∫—Ü–∏–∏ Bybit!")
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞: exchange_options['options']['brokerId'] = ''")
            return False

    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è –¥–ª—è Bybit!")
        return False

    print("‚úÖ –§–ò–ö –ö–û–†–†–ï–ö–¢–ï–ù: brokerId –æ—Ç–∫–ª—é—á–µ–Ω –≤ exchange_manager.py")
    return True


def test_fix_runtime_verification():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ runtime - brokerId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"""
    print("\n=== RUNTIME: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–π Bybit ===")

    try:
        import ccxt.async_support as ccxt

        # Simulate how ExchangeManager creates Bybit exchange
        exchange_options = {
            'apiKey': 'test',
            'secret': 'test',
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
                'adjustForTimeDifference': True,
                'recvWindow': 10000,
            }
        }

        # Apply Bybit-specific settings (–∫–∞–∫ –≤ –∫–æ–¥–µ)
        exchange_options['options']['accountType'] = 'UNIFIED'
        exchange_options['options']['defaultType'] = 'future'

        # This is the FIX:
        exchange_options['options']['brokerId'] = ''

        exchange = ccxt.bybit(exchange_options)

        # Check brokerId
        broker_id = exchange.options.get('brokerId', 'NOT FOUND')

        assert broker_id == '', \
            f"‚ùå brokerId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: '{broker_id}'"

        print(f"‚úÖ brokerId = '{broker_id}' (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")

        # Verify it's not the default 'CCXT'
        assert broker_id != 'CCXT', "‚ùå brokerId –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'CCXT'!"

        print("‚úÖ brokerId –ù–ï 'CCXT' (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")

        return True

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_comparison_before_after():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –î–æ –∏ –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞"""
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï: –î–æ vs –ü–æ—Å–ª–µ ===")

    import ccxt.async_support as ccxt

    # BEFORE FIX
    print("\n--- –î–û –§–ò–ö–°–ê ---")
    exchange_before = ccxt.bybit({
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'accountType': 'UNIFIED',
            # No brokerId override - uses default 'CCXT'
        }
    })

    broker_id_before = exchange_before.options.get('brokerId', 'NOT FOUND')
    print(f"brokerId –î–û: '{broker_id_before}'")
    if broker_id_before == 'CCXT':
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: brokerId='CCXT' –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ Bybit ‚Üí Error 170003")

    # AFTER FIX
    print("\n--- –ü–û–°–õ–ï –§–ò–ö–°–ê ---")
    exchange_after = ccxt.bybit({
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'accountType': 'UNIFIED',
            'brokerId': '',  # FIX: Disable CCXT default
        }
    })

    broker_id_after = exchange_after.options.get('brokerId', 'NOT FOUND')
    print(f"brokerId –ü–û–°–õ–ï: '{broker_id_after}'")
    if broker_id_after == '':
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: brokerId='' –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ Bybit ‚Üí No Error!")

    print("\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    return True


def test_all_bybit_order_types():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ fix –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\n=== –¢–ò–ü–´ –û–†–î–ï–†–û–í: –í—Å–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π brokerId ===")

    import ccxt.async_support as ccxt

    exchange = ccxt.bybit({
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'accountType': 'UNIFIED',
            'brokerId': '',  # FIX
        }
    })

    # All order types use the same exchange instance
    order_types = ['market', 'limit', 'limit_maker']

    for order_type in order_types:
        broker_id = exchange.options.get('brokerId', 'NOT FOUND')
        print(f"  {order_type}: brokerId = '{broker_id}'")

        assert broker_id == '', f"‚ùå {order_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—É—Å—Ç–æ–π brokerId!"

    print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—É—Å—Ç–æ–π brokerId")
    return True


if __name__ == "__main__":
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: Bybit brokerId Error 170003")
    print("=" * 70)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –§–ò–ö –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("=" * 70)

    all_passed = True
    failed_tests = []

    try:
        # Run all validation tests
        tests = [
            ("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", test_fix_exchange_manager_source),
            ("Runtime verification", test_fix_runtime_verification),
            ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–æ/–ü–æ—Å–ª–µ", test_comparison_before_after),
            ("–í—Å–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤", test_all_bybit_order_types),
        ]

        for name, test_func in tests:
            try:
                result = test_func()
                if not result:
                    failed_tests.append(name)
                    all_passed = False
            except Exception as e:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{name}': {e}")
                import traceback
                traceback.print_exc()
                failed_tests.append(name)
                all_passed = False

        print("\n" + "=" * 70)
        if all_passed:
            print("üéâ –í–°–ï –í–ê–õ–ò–î–ê–¶–ò–ò –£–°–ü–ï–®–ù–´!")
            print("=" * 70)
            print("\nüìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
            print("‚úÖ –§–ò–ö –ö–û–†–†–ï–ö–¢–ï–ù: brokerId='' –≤ exchange_manager.py")
            print("‚úÖ Runtime: brokerId –ø—É—Å—Ç–æ–π")
            print("‚úÖ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Bybit API")
            print("‚úÖ –û—à–∏–±–∫–∞ 170003 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            print("\nüöÄ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ")
        else:
            print(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {', '.join(failed_tests)}")
            print("=" * 70)
            print("\n‚ö†Ô∏è  –§–ò–ö –ù–ï –ü–†–ò–ú–ï–ù–ï–ù –ò–õ–ò –ü–†–ò–ú–ï–ù–ï–ù –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        all_passed = False
        sys.exit(1)

    sys.exit(0 if all_passed else 1)
