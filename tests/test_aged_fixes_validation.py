#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –º–µ—Ç–æ–¥–æ–≤ aged_positions
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –í–°–ï 3 –§–ò–ö–°–ê –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
import sys
import os
import inspect

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_fix_1_create_aged_position():
    """–§–ò–ö 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ create_aged_position –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"""
    print("\n=== –§–ò–ö 1: create_aged_position ===")

    from database.repository import Repository

    sig = inspect.signature(Repository.create_aged_position)
    params = list(sig.parameters.keys())

    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    # Check CORRECT parameters (after fix)
    expected = ['self', 'position_id', 'symbol', 'exchange', 'entry_price',
                'target_price', 'phase', 'age_hours', 'loss_tolerance']

    assert params == expected, f"‚ùå –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {params} != {expected}"
    print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–ª–∞–Ω–æ–º")

    # Check SQL uses $1, $2... (asyncpg)
    source = inspect.getsource(Repository.create_aged_position)
    assert '$1' in source and '$2' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $1, $2..."
    assert '%(name)s' not in source, "‚ùå SQL –ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å %(name)s"
    print("‚úÖ SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç $1, $2... (asyncpg)")

    # Check SQL targets aged_positions (not monitoring.aged_positions)
    assert 'INSERT INTO aged_positions' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å aged_positions"
    assert 'monitoring.aged_positions' not in source, "‚ùå SQL –ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å monitoring.aged_positions"
    print("‚úÖ SQL —Ä–∞–±–æ—Ç–∞–µ—Ç —Å aged_positions")

    # Check ON CONFLICT
    assert 'ON CONFLICT' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ON CONFLICT"
    print("‚úÖ SQL –∏–º–µ–µ—Ç ON CONFLICT –¥–ª—è upsert")

    print("‚úÖ –§–ò–ö 1 –ö–û–†–†–ï–ö–¢–ï–ù")
    return True


def test_fix_2_mark_aged_position_closed():
    """–§–ò–ö 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ mark_aged_position_closed –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"""
    print("\n=== –§–ò–ö 2: mark_aged_position_closed ===")

    from database.repository import Repository

    sig = inspect.signature(Repository.mark_aged_position_closed)
    params = list(sig.parameters.keys())

    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    # Check CORRECT parameters (after fix)
    expected = ['self', 'position_id', 'close_reason']

    assert params == expected, f"‚ùå –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {params} != {expected}"
    print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–ª–∞–Ω–æ–º (—É–ø—Ä–æ—â–µ–Ω–∞)")

    # Check SQL uses $1 (asyncpg)
    source = inspect.getsource(Repository.mark_aged_position_closed)
    assert '$1' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $1"
    assert '%(name)s' not in source, "‚ùå SQL –ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å %(name)s"
    print("‚úÖ SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç $1 (asyncpg)")

    # Check SQL targets aged_positions (not monitoring.aged_positions)
    assert 'DELETE FROM aged_positions' in source, "‚ùå SQL –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∏–∑ aged_positions"
    assert 'monitoring.aged_positions' not in source, "‚ùå SQL –ù–ï –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å monitoring.aged_positions"
    print("‚úÖ SQL —É–¥–∞–ª—è–µ—Ç –∏–∑ aged_positions")

    print("‚úÖ –§–ò–ö 2 –ö–û–†–†–ï–ö–¢–ï–ù")
    return True


def test_fix_3_aged_monitor_calls():
    """–§–ò–ö 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—ã–∑–æ–≤—ã –≤ aged_position_monitor_v2 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
    print("\n=== –§–ò–ö 3: –í—ã–∑–æ–≤—ã –≤ aged_position_monitor_v2 ===")

    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    source = inspect.getsource(AgedPositionMonitorV2.add_aged_position)

    # Check create_aged_position call
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ create_aged_position...")
    assert 'str(target.position_id)' in source, "‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str(target.position_id)"
    assert 'position_id=str(target.position_id)' in source or 'position_id = str(target.position_id)' in source, \
        "‚ùå position_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str()"
    print("‚úÖ position_id –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ str()")

    # Check all required parameters are passed
    assert 'symbol=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å symbol"
    assert 'exchange=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å exchange"
    assert 'entry_price=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å entry_price"
    assert 'target_price=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å target_price"
    assert 'phase=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å phase"
    assert 'age_hours=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å age_hours"
    assert 'loss_tolerance=' in source, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å loss_tolerance"
    print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã create_aged_position –ø–µ—Ä–µ–¥–∞–Ω—ã")

    # Check mark_aged_position_closed call
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ mark_aged_position_closed...")
    source_full = inspect.getsource(AgedPositionMonitorV2)

    # Find the mark_aged_position_closed call
    if 'mark_aged_position_closed' in source_full:
        # Extract the call section
        lines = source_full.split('\n')
        call_found = False
        for i, line in enumerate(lines):
            if 'mark_aged_position_closed' in line and 'await' in line:
                # Get next 5 lines to capture full call
                call_section = '\n'.join(lines[i:i+5])

                # Should have position_id and close_reason ONLY
                assert 'position_id=' in call_section, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å position_id"
                assert 'close_reason=' in call_section, "‚ùå –î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å close_reason"

                # Should NOT have old parameters
                assert 'order_id=' not in call_section or 'close_order_id=' in call_section, \
                    "‚ùå –ù–ï –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å order_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å close_order_id –∏–ª–∏ —É–±—Ä–∞–Ω)"
                assert 'close_price=' not in call_section, "‚ùå –ù–ï –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å close_price"

                call_found = True
                print("‚úÖ mark_aged_position_closed —É–ø—Ä–æ—â–µ–Ω (—Ç–æ–ª—å–∫–æ position_id + close_reason)")
                break

        if not call_found:
            print("‚ö†Ô∏è –í—ã–∑–æ–≤ mark_aged_position_closed –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–æ–¥–µ")

    print("‚úÖ –§–ò–ö 3 –ö–û–†–†–ï–ö–¢–ï–ù")
    return True


def test_integration_compatibility():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ –∏ –≤—ã–∑–æ–≤–æ–≤"""
    print("\n=== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ ===")

    from database.repository import Repository
    from core.aged_position_monitor_v2 import AgedPositionMonitorV2

    # Get method signatures
    create_sig = inspect.signature(Repository.create_aged_position)
    mark_sig = inspect.signature(Repository.mark_aged_position_closed)

    # Get call patterns from aged_position_monitor_v2
    monitor_source = inspect.getsource(AgedPositionMonitorV2.add_aged_position)

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ create_aged_position...")
    # Check that all parameters called are in method signature
    create_params = set(create_sig.parameters.keys()) - {'self'}
    called_params = set()

    for param in ['position_id', 'symbol', 'exchange', 'entry_price',
                  'target_price', 'phase', 'age_hours', 'loss_tolerance']:
        if f'{param}=' in monitor_source:
            called_params.add(param)

    assert called_params.issubset(create_params), \
        f"‚ùå –í—ã–∑—ã–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {called_params - create_params}"
    print(f"‚úÖ –í—Å–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å –≤ –º–µ—Ç–æ–¥–µ: {called_params}")

    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ mark_aged_position_closed...")
    mark_params = set(mark_sig.parameters.keys()) - {'self'}
    print(f"‚úÖ –ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: {mark_params}")

    print("\n‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
    return True


if __name__ == "__main__":
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: aged_positions fixes")
    print("=" * 70)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–°–ï 3 –§–ò–ö–°–ê –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("=" * 70)

    all_passed = True

    try:
        # Run all validation tests
        test_fix_1_create_aged_position()
        test_fix_2_mark_aged_position_closed()
        test_fix_3_aged_monitor_calls()
        test_integration_compatibility()

        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –§–ò–ö–°–´ –í–ê–õ–ò–î–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 70)
        print("\nüìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
        print("‚úÖ –§–ò–ö 1: create_aged_position - –ö–û–†–†–ï–ö–¢–ï–ù")
        print("‚úÖ –§–ò–ö 2: mark_aged_position_closed - –ö–û–†–†–ï–ö–¢–ï–ù")
        print("‚úÖ –§–ò–ö 3: aged_position_monitor_v2 calls - –ö–û–†–†–ï–ö–¢–ï–ù")
        print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ú–µ—Ç–æ–¥—ã –∏ –≤—ã–∑–æ–≤—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        print("\nüöÄ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ")
        print("=" * 70)

    except AssertionError as e:
        print(f"\n‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {e}")
        all_passed = False
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        all_passed = False
        sys.exit(1)

    sys.exit(0 if all_passed else 1)
