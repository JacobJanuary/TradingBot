#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–î–∞—Ç–∞: 2025-10-23
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. Json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ repository.py
2. SHORT SL –≤–∞–ª–∏–¥–∞—Ü–∏—é
3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü aged
"""

import sys
import os
import asyncio
from decimal import Decimal

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_json_import():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ json –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è json.dumps"""

    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ import json
    with open('database/repository.py', 'r') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    has_import = 'import json' in content
    print(f"‚úì import json –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {has_import}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è json.dumps
    json_dumps_count = content.count('json.dumps(')
    print(f"‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π json.dumps: {json_dumps_count}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Json(
    json_capital_count = content.count('Json(')
    print(f"‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π Json( (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0): {json_capital_count}")

    if has_import and json_dumps_count >= 2 and json_capital_count == 0:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: Json –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return False


def test_short_sl_logic():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ SL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""

    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SHORT SL –ª–æ–≥–∏–∫–∏")
    print("="*60)

    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö SHORT –ø–æ–∑–∏—Ü–∏–∏
    test_cases = [
        {
            'name': 'SHORT –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã',
            'current_price': Decimal('0.18334'),
            'lowest_price': Decimal('0.17339'),
            'distance': Decimal('2.0'),  # 2% trailing
            'expected_issue': True  # SL –±—É–¥–µ—Ç –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        },
        {
            'name': 'SHORT –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã',
            'current_price': Decimal('0.17000'),
            'lowest_price': Decimal('0.17000'),
            'distance': Decimal('2.0'),
            'expected_issue': False  # SL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        }
    ]

    for case in test_cases:
        print(f"\nüìä –¢–µ—Å—Ç: {case['name']}")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {case['current_price']}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {case['lowest_price']}")

        # –†–∞—Å—á–µ—Ç potential_stop –ø–æ –ª–æ–≥–∏–∫–µ trailing_stop.py
        potential_stop = case['lowest_price'] * (Decimal('1') + case['distance'] / Decimal('100'))
        print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π SL: {potential_stop}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
        has_issue = potential_stop <= case['current_price']
        print(f"   SL <= —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {has_issue}")

        if has_issue:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            corrected_sl = case['current_price'] * Decimal('1.001')
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {corrected_sl}")
        else:
            print(f"   ‚úÖ SL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

        if has_issue == case['expected_issue']:
            print(f"   ‚úÖ –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        else:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")

    return True


async def test_database_tables():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü aged"""

    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü aged –≤ –ë–î")
    print("="*60)

    import asyncpg

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await asyncpg.connect(
            host='localhost',
            database='fox_crypto',
            user='evgeniyyanvarskiy',
            password='LohNeMamont@!21'
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã aged_positions
        result = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_name = 'aged_positions'
            )
        """)
        print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ aged_positions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã aged_monitoring_events
        result2 = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_name = 'aged_monitoring_events'
            )
        """)
        print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ aged_monitoring_events —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result2}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if result:
            columns = await conn.fetch("""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_name = 'aged_positions'
                ORDER BY ordinal_position
            """)
            print("\n  –°—Ç–æ–ª–±—Ü—ã aged_positions:")
            for col in columns:
                print(f"    - {col['column_name']}: {col['data_type']}")

        await conn.close()

        if result and result2:
            print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("\n‚ö†Ô∏è –¢–ï–°–¢ –¢–†–ï–ë–£–ï–¢ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò")
            print("  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ")
            print("  PGPASSWORD='LohNeMamont@!21' psql -h localhost -U evgeniyyanvarskiy -d fox_crypto < database/migrations/008_create_aged_tables.sql")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


def test_fix_verification_in_code():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–¥–µ"""

    print("\n" + "="*60)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º trailing_stop.py –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SHORT
    with open('protection/trailing_stop.py', 'r') as f:
        ts_content = f.read()

    # –ò—â–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è SHORT
    has_short_validation = (
        'if ts.side == \'short\' and new_stop_price:' in ts_content or
        'if ts.side == "short" and new_stop_price:' in ts_content or
        'SHORT: calculated SL' in ts_content
    )

    print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è SHORT –≤ trailing_stop.py: {has_short_validation}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º exchange_manager.py
    with open('core/exchange_manager.py', 'r') as f:
        em_content = f.read()

    # –ò—â–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ exchange_manager
    has_em_validation = (
        'if position_side in [\'short\', \'sell\']:' in em_content or
        'For SHORT: SL must be above current price' in em_content
    )

    print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è SHORT –≤ exchange_manager.py: {has_em_validation}")

    if has_short_validation or has_em_validation:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –•–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        return True
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –∫–æ–¥")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("\n" + "üîß "*20)
    print("–ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("üîß "*20)

    results = []

    # –¢–µ—Å—Ç 1: Json
    results.append(("Json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", test_json_import()))

    # –¢–µ—Å—Ç 2: SHORT SL
    results.append(("SHORT SL –ª–æ–≥–∏–∫–∞", test_short_sl_logic()))

    # –¢–µ—Å—Ç 3: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    db_result = await test_database_tables()
    results.append(("–¢–∞–±–ª–∏—Ü—ã –ë–î", db_result))

    # –¢–µ—Å—Ç 4: –ö–æ–¥
    results.append(("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–¥–µ", test_fix_verification_in_code()))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)

    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<30} {status}")
        if not passed:
            all_passed = False

    print("="*60)

    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É DETAILED_FIX_PLAN_20251023.md")

    return all_passed


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)