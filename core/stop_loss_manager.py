"""
–ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ Stop Loss –≤ —Å–∏—Å—Ç–µ–º–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è SL
- –£—Å—Ç–∞–Ω–æ–≤–∫—É SL
- –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é SL
- –í—Å–µ SL-related –æ–ø–µ—Ä–∞—Ü–∏–∏

–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –î–û–õ–ñ–ù–´ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç –º–æ–¥—É–ª—å.

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ü–†–û–í–ï–†–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–µ –∏–∑ core/position_manager.py (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ production).
"""

import logging
from typing import Optional, Dict, Tuple, List
from decimal import Decimal
import ccxt
import asyncio

logger = logging.getLogger(__name__)


class StopLossManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Stop Loss –æ–ø–µ—Ä–∞—Ü–∏–π.

    üéØ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö SL –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ.

    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ü–†–û–í–ï–†–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–µ –∏–∑ core/position_manager.py:1324
    """

    def __init__(self, exchange, exchange_name: str):
        """
        Args:
            exchange: CCXT exchange instance
            exchange_name: Exchange name ('bybit', 'binance', etc.)
        """
        self.exchange = exchange
        self.exchange_name = exchange_name.lower()
        self.logger = logger
        
        # üîí CRITICAL: Per-symbol locks to prevent race conditions
        self._sl_locks: Dict[str, asyncio.Lock] = {}
        self._sl_locks_lock = asyncio.Lock()  # Meta-lock for safe lock creation

    async def has_stop_loss(self, symbol: str) -> Tuple[bool, Optional[str]]:
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Stop Loss.

        Args:
            symbol: CCXT unified symbol (e.g., 'BTC/USDT:USDT')

        Returns:
            Tuple[bool, Optional[str]]: (has_sl, sl_price)

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
        1. Position-attached SL (–¥–ª—è Bybit —á–µ—Ä–µ–∑ position.info.stopLoss) - –ü–†–ò–û–†–ò–¢–ï–¢ 1
        2. Conditional stop orders (—á–µ—Ä–µ–∑ fetch_open_orders) - –ü–†–ò–û–†–ò–¢–ï–¢ 2

        –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–∏–∫–∏: core/position_manager.py:1324 (–ü–†–û–í–ï–†–ï–ù –≤ production)
        """
        try:
            self.logger.debug(f"Checking Stop Loss for {symbol} on {self.exchange_name}")

            # ============================================================
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: Position-attached Stop Loss (–¥–ª—è Bybit)
            # ============================================================
            if self.exchange_name == 'bybit':
                try:
                    # –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è Bybit –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û params={'category': 'linear'}
                    positions = await self.exchange.fetch_positions(
                        symbols=[symbol],
                        params={'category': 'linear'}
                    )

                    for pos in positions:
                        if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º position.info.stopLoss
                            # –ò—Å—Ç–æ—á–Ω–∏–∫: core/position_manager.py:1324
                            stop_loss = pos.get('info', {}).get('stopLoss', '0')

                            self.logger.debug(
                                f"Bybit position {symbol}: stopLoss='{stop_loss}' "
                                f"(type: {type(stop_loss)})"
                            )

                            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "–Ω–µ—Ç SL"
                            # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '0' –µ—Å–ª–∏ –Ω–µ—Ç SL, –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
                            if stop_loss and stop_loss not in ['0', '0.00', '', None]:
                                self.logger.info(
                                    f"‚úÖ Position {symbol} has Stop Loss: {stop_loss}"
                                )
                                return True, stop_loss
                            else:
                                self.logger.debug(
                                    f"No position-attached SL for {symbol} "
                                    f"(stopLoss='{stop_loss}')"
                                )

                except Exception as e:
                    self.logger.debug(f"Could not check Bybit position SL: {e}")

            # ============================================================
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: Conditional stop orders (–¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂)
            # ============================================================
            try:
                # –ü–æ–ª—É—á–∏—Ç—å stop orders
                if self.exchange_name == 'bybit':
                    # –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è Bybit –¥–æ–±–∞–≤–ª—è–µ–º category='linear'
                    orders = await self.exchange.fetch_open_orders(
                        symbol,
                        params={
                            'category': 'linear',
                            'orderFilter': 'StopOrder'
                        }
                    )
                else:
                    orders = await self.exchange.fetch_open_orders(symbol)

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ stop loss orders
                for order in orders:
                    if self._is_stop_loss_order(order):
                        sl_price = self._extract_stop_price(order)
                        self.logger.info(
                            f"‚úÖ Position {symbol} has Stop Loss order: {order.get('id')} "
                            f"at {sl_price}"
                        )
                        return True, str(sl_price) if sl_price else None

            except Exception as e:
                self.logger.debug(f"Could not check stop orders for {symbol}: {e}")

            # –ù–µ—Ç Stop Loss
            self.logger.debug(f"No Stop Loss found for {symbol}")
            return False, None

        except Exception as e:
            self.logger.error(f"Error checking Stop Loss for {symbol}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤–µ—Ä–Ω—É—Ç—å False
            return False, None

    async def set_stop_loss(
        self,
        symbol: str,
        side: str,
        amount: float,
        stop_price: float
    ) -> Dict:
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Stop Loss.

        Args:
            symbol: CCXT unified symbol
            side: 'sell' –¥–ª—è long, 'buy' –¥–ª—è short
            amount: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            stop_price: —Ü–µ–Ω–∞ Stop Loss

        Returns:
            Dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º SL

        –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–∏–∫–∏: core/exchange_manager.py:create_stop_loss_order (–ü–†–û–í–ï–†–ï–ù)
        """
        # üîí CRITICAL: Acquire symbol-specific lock to prevent race conditions
        async with self._sl_locks_lock:
            if symbol not in self._sl_locks:
                self._sl_locks[symbol] = asyncio.Lock()
            symbol_lock = self._sl_locks[symbol]
        
        async with symbol_lock:
            self.logger.info(f"üîí [StopLossManager] Acquired lock for {symbol}")
            
            try:
                # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ SL –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                has_sl, existing_sl = await self.has_stop_loss(symbol)

                if has_sl:
                    self.logger.info(
                        f"‚ö†Ô∏è Stop Loss already exists at {existing_sl}, skipping"
                    )
                    self.logger.debug(f"üîì [StopLossManager] Released lock for {symbol} (already exists)")
                    return {
                        'status': 'already_exists',
                        'stopPrice': existing_sl,
                        'reason': 'Stop Loss already set'
                    }

                # –®–ê–ì 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ ExchangeManager
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ core/exchange_manager.py
                if self.exchange_name == 'bybit':
                    result = await self._set_bybit_stop_loss(symbol, stop_price)
                else:
                    result = await self._set_generic_stop_loss(symbol, side, amount, stop_price)
                
                self.logger.debug(f"üîì [StopLossManager] Released lock for {symbol} (created)")
                return result

            except Exception as e:
                self.logger.error(f"Failed to set Stop Loss for {symbol}: {e}")
                self.logger.debug(f"üîì [StopLossManager] Released lock for {symbol} (error)")
                raise

    async def _set_bybit_stop_loss(self, symbol: str, stop_price: float) -> Dict:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop Loss –¥–ª—è Bybit —á–µ—Ä–µ–∑ position-attached method.

        –ò—Å—Ç–æ—á–Ω–∏–∫: core/exchange_manager.py:create_stop_loss_order (Bybit —Å–µ–∫—Ü–∏—è)
        """
        try:
            # CRITICAL FIX: Convert DB format (BTCUSDT) to CCXT format (BTC/USDT:USDT)
            # Symbol from DB is in format 'BTCUSDT', but CCXT expects 'BTC/USDT:USDT'
            ccxt_symbol = symbol
            if '/' not in symbol:  # Database format
                # Convert BTCUSDT -> BTC/USDT:USDT for Bybit
                if symbol.endswith('USDT'):
                    base = symbol[:-4]  # Remove 'USDT'
                    ccxt_symbol = f"{base}/USDT:USDT"

            # –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è positionIdx
            positions = await self.exchange.fetch_positions(
                symbols=[ccxt_symbol],
                params={'category': 'linear'}
            )

            position_idx = 0
            position_found = False

            for pos in positions:
                if pos['symbol'] == ccxt_symbol and float(pos.get('contracts', 0)) > 0:
                    position_idx = int(pos.get('info', {}).get('positionIdx', 0))
                    position_found = True
                    break

            if not position_found:
                raise ValueError(f"No open position found for {symbol} (checked as {ccxt_symbol})")

            # –®–ê–ì 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Bybit API
            bybit_symbol = ccxt_symbol.replace('/', '').replace(':USDT', '')
            sl_price_formatted = self.exchange.price_to_precision(ccxt_symbol, stop_price)

            # –®–ê–ì 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ set_trading_stop (position-attached)
            params = {
                'category': 'linear',
                'symbol': bybit_symbol,
                'stopLoss': str(sl_price_formatted),
                'positionIdx': position_idx,
                'slTriggerBy': 'LastPrice',
                'tpslMode': 'Full'
            }

            self.logger.debug(f"Bybit set_trading_stop params: {params}")

            result = await self.exchange.private_post_v5_position_trading_stop(params)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            ret_code = result.get('retCode', 1)
            ret_msg = result.get('retMsg', 'Unknown error')

            # CRITICAL FIX: Convert retCode to int for comparison
            if isinstance(ret_code, str):
                ret_code = int(ret_code)

            self.logger.debug(f"Bybit API response: retCode={ret_code} (type={type(ret_code)}), retMsg={ret_msg}")

            if ret_code == 0:
                # –£—Å–ø–µ—Ö
                self.logger.info(f"‚úÖ Stop Loss set successfully at {sl_price_formatted}")
                return {
                    'status': 'created',
                    'stopPrice': float(sl_price_formatted),
                    'info': result
                }
            elif ret_code == 34040 and 'not modified' in ret_msg:
                # SL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–µ
                self.logger.info(f"‚úÖ Stop Loss already set at {stop_price} (not modified)")
                return {
                    'status': 'already_exists',
                    'stopPrice': float(sl_price_formatted),
                    'info': result
                }
            else:
                # –û—à–∏–±–∫–∞
                raise Exception(f"Bybit API error {ret_code}: {ret_msg}")

        except Exception as e:
            self.logger.error(f"Failed to set Bybit Stop Loss: {e}")
            raise

    async def _set_generic_stop_loss(
        self,
        symbol: str,
        side: str,
        amount: float,
        stop_price: float
    ) -> Dict:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop Loss –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂ —á–µ—Ä–µ–∑ conditional orders.
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π CCXT –º–µ—Ç–æ–¥
            order = await self.exchange.create_order(
                symbol=symbol,
                type='stop_market',
                side=side,
                amount=amount,
                price=None,  # Market order –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
                params={
                    'stopPrice': stop_price,
                    'reduceOnly': True
                }
            )

            self.logger.info(f"‚úÖ Stop Loss order created: {order['id']}")

            return {
                'status': 'created',
                'stopPrice': stop_price,
                'orderId': order['id'],
                'info': order
            }

        except Exception as e:
            self.logger.error(f"Failed to create stop order: {e}")
            raise

    def _is_stop_loss_order(self, order: Dict) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–¥–µ—Ä Stop Loss.

        –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ø—É—Ç–∞—Ç—å —Å –æ–±—ã—á–Ω—ã–º–∏ limit exit –æ—Ä–¥–µ—Ä–∞–º–∏!

        –ò—Å—Ç–æ—á–Ω–∏–∫: core/position_manager.py + core/order_utils.py
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            info = order.get('info', {})
            order_type = order.get('type', '')
            reduce_only = order.get('reduceOnly', False)

            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: stopOrderType (Bybit)
            stop_order_type = info.get('stopOrderType', '')
            if stop_order_type and stop_order_type not in ['', 'UNKNOWN']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ Stop Loss, –∞ –Ω–µ Take Profit
                if any(keyword in stop_order_type.lower() for keyword in ['stop', 'sl']):
                    return True

            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: type —Å–æ–¥–µ—Ä–∂–∏—Ç 'stop'
            if 'stop' in order_type.lower() and reduce_only:
                return True

            # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –µ—Å—Ç—å triggerPrice –∏ reduceOnly
            trigger_price = order.get('triggerPrice') or info.get('triggerPrice')
            stop_price = order.get('stopPrice') or info.get('stopPrice')

            if (trigger_price or stop_price) and reduce_only:
                return True

            return False

        except Exception as e:
            self.logger.debug(f"Error checking if order is stop loss: {e}")
            return False

    def _extract_stop_price(self, order: Dict) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É Stop Loss –∏–∑ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
            price_fields = [
                'stopPrice',
                'triggerPrice',
                ('info', 'stopPrice'),
                ('info', 'triggerPrice'),
                ('info', 'stopLoss')
            ]

            for field in price_fields:
                if isinstance(field, tuple):
                    value = order.get(field[0], {}).get(field[1])
                else:
                    value = order.get(field)

                if value and value not in ['0', '0.00', '', None]:
                    return float(value)

            return None

        except Exception as e:
            self.logger.debug(f"Error extracting stop price: {e}")
            return None


# ============================================================
# HELPER FUNCTIONS –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# ============================================================

async def check_stop_loss_unified(exchange, exchange_name: str, symbol: str) -> bool:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥—É–ª—è—Ö.

    Args:
        exchange: CCXT exchange instance
        exchange_name: Exchange name
        symbol: Trading symbol

    Returns:
        bool: True –µ—Å–ª–∏ –µ—Å—Ç—å Stop Loss
    """
    manager = StopLossManager(exchange, exchange_name)
    has_sl, _ = await manager.has_stop_loss(symbol)
    return has_sl


async def set_stop_loss_unified(
    exchange,
    exchange_name: str,
    symbol: str,
    side: str,
    amount: float,
    stop_price: float
) -> Dict:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥—É–ª—è—Ö.

    Args:
        exchange: CCXT exchange instance
        exchange_name: Exchange name
        symbol: Trading symbol
        side: Order side
        amount: Position size
        stop_price: Stop loss price

    Returns:
        Dict: Result of SL creation
    """
    manager = StopLossManager(exchange, exchange_name)
    return await manager.set_stop_loss(symbol, side, amount, stop_price)