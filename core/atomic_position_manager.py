"""
Atomic Position Manager - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å–æ stop-loss

CRITICAL: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π Entry+SL
–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å stop-loss –∏–ª–∏ –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã

‚ö†Ô∏è DO NOT MODIFY –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π!
"""
import asyncio
import logging
from typing import Optional, Dict, Any
from enum import Enum
from contextlib import asynccontextmanager
from datetime import datetime, timezone
from utils.datetime_helpers import now_utc, ensure_utc
from decimal import Decimal
import uuid
from database.transactional_repository import TransactionalRepository
from core.event_logger import EventLogger, EventType, log_event
from core.exchange_response_adapter import ExchangeResponseAdapter

logger = logging.getLogger(__name__)


def truncate_exit_reason(reason: str, max_length: int = 450) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É—Å–µ—á–µ–Ω–∏–µ exit_reason –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã

    Args:
        reason: –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞/–æ—à–∏–±–∫–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (default: 450 –¥–ª—è varchar(500) —Å –∑–∞–ø–∞—Å–æ–º)

    Returns:
        –£—Å–µ—á—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —É—Å–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    """
    if len(reason) <= max_length:
        return reason

    # –£—Å–µ–∫–∞–µ–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    truncate_marker = "...[truncated]"
    available_length = max_length - len(truncate_marker)
    return reason[:available_length] + truncate_marker


class PositionState(Enum):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏

    Flow: PENDING_ENTRY -> ENTRY_PLACED -> PENDING_SL -> ACTIVE
    –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ: -> FAILED –∏–ª–∏ ROLLED_BACK
    """
    PENDING_ENTRY = "pending_entry"  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é entry
    ENTRY_PLACED = "entry_placed"    # Entry —Ä–∞–∑–º–µ—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ SL
    PENDING_SL = "pending_sl"        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ SL
    ACTIVE = "active"                # –ü–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ —Å –∑–∞—â–∏—Ç–æ–π
    FAILED = "failed"                # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
    ROLLED_BACK = "rolled_back"      # –û—Ç–∫–∞—á–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ SL


class AtomicPositionError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏"""
    pass


class SymbolUnavailableError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å–∏–º–≤–æ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¥–µ–ª–∏—Å—Ç–∏–Ω–≥, —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ —Ç.–¥.)"""
    pass


class MinimumOrderLimitError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏"""
    pass


class AtomicPositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π

    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
    1. –ü–æ–∑–∏—Ü–∏—è –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ stop-loss
    2. –ü—Ä–∏ –æ—à–∏–±–∫–µ SL –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    3. Recovery –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """

    def __init__(self, repository, exchange_manager, stop_loss_manager, position_manager=None, config=None):
        self.repository = repository
        self.exchange_manager = exchange_manager
        self.stop_loss_manager = stop_loss_manager
        self.position_manager = position_manager  # NEW
        self.config = config  # RESTORED 2025-10-25: for leverage control
        self.active_operations = {}  # Track ongoing operations

    @asynccontextmanager
    async def atomic_operation(self, operation_id: str):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
        """
        self.active_operations[operation_id] = {
            'started_at': datetime.utcnow(),  # FIX: Use offset-naive datetime for consistency
            'status': 'in_progress'
        }

        try:
            logger.info(f"üîÑ Starting atomic operation: {operation_id}")
            yield operation_id

            self.active_operations[operation_id]['status'] = 'completed'
            logger.info(f"‚úÖ Atomic operation completed: {operation_id}")

        except Exception as e:
            logger.error(f"‚ùå Atomic operation failed: {operation_id} - {e}")
            self.active_operations[operation_id]['status'] = 'failed'
            self.active_operations[operation_id]['error'] = str(e)

            # Rollback will be handled by caller
            raise

        finally:
            # Cleanup after delay
            asyncio.create_task(self._cleanup_operation_record(operation_id))

    async def _cleanup_operation_record(self, operation_id: str):
        """Cleanup operation record after 5 minutes"""
        await asyncio.sleep(300)
        if operation_id in self.active_operations:
            del self.active_operations[operation_id]

    async def _safe_activate_position(
        self,
        position_id: int,
        symbol: str,
        exchange: str,
        **update_fields
    ) -> bool:
        """
        Safely activate position with duplicate detection (Layer 3 defense).

        This is a defensive safety net that checks for duplicate active positions
        before updating status to 'active'. If a duplicate is detected, the position
        is rolled back instead of causing a duplicate key violation.

        Added as part of duplicate position race condition fix (2025-10-23).
        See docs/audit_duplicate_position/ for full analysis.

        Args:
            position_id: ID of position to activate
            symbol: Trading symbol
            exchange: Exchange name
            **update_fields: Additional fields to update (stop_loss_price, etc.)

        Returns:
            True if activated successfully
            False if duplicate detected (caller should rollback)
        """
        try:
            # Defensive check: is there already an active position?
            async with self.repository.pool.acquire() as conn:
                existing_active = await conn.fetchrow("""
                    SELECT id, created_at FROM monitoring.positions
                    WHERE symbol = $1 AND exchange = $2
                      AND status = 'active'
                      AND id != $3
                """, symbol, exchange, position_id)

                if existing_active:
                    logger.error(
                        f"üî¥ DUPLICATE ACTIVE POSITION DETECTED!\n"
                        f"   Cannot activate position #{position_id} ({symbol} on {exchange}).\n"
                        f"   Position #{existing_active['id']} is already active "
                        f"(created {existing_active['created_at']}).\n"
                        f"   This indicates a race condition occurred despite Layer 1&2 defenses.\n"
                        f"   Position #{position_id} will NOT be updated to prevent duplicate key error."
                    )
                    return False

            # Safe to activate - no duplicate detected
            update_fields['status'] = PositionState.ACTIVE.value
            await self.repository.update_position(position_id, **update_fields)

            logger.info(f"‚úÖ Position #{position_id} successfully activated")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to activate position #{position_id}: {e}")
            return False

    async def _verify_position_exists_multi_source(
        self,
        exchange_instance,
        symbol: str,
        exchange: str,
        entry_order: Any,
        expected_quantity: float,
        timeout: float = 10.0
    ) -> bool:
        """
        Verify position exists using multiple data sources with retry logic.

        Uses priority-based approach:
        1. WebSocket position updates (if available) - FASTEST
        2. Order filled status - RELIABLE
        3. REST API fetch_positions - FALLBACK

        Args:
            exchange_instance: Exchange connection
            symbol: Trading symbol
            exchange: Exchange name
            entry_order: The entry order that should have created position
            expected_quantity: Expected position size
            timeout: Max time to wait for verification (default 10s)

        Returns:
            True if position verified to exist
            False if position confirmed NOT to exist (order failed)

        Raises:
            AtomicPositionError if unable to verify after timeout
        """
        # FIX RC#1: –ò–∑–º–µ–Ω–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç verification sources
        # Order Status —Ç–µ–ø–µ—Ä—å –ü–†–ò–û–†–ò–¢–ï–¢ 1 (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π - –æ—Ä–¥–µ—Ä –£–ñ–ï –∏—Å–ø–æ–ª–Ω–µ–Ω)
        logger.info(
            f"üîç Multi-source position verification for {symbol}\n"
            f"  Expected quantity: {expected_quantity}\n"
            f"  Timeout: {timeout}s\n"
            f"  Order ID: {entry_order.id}\n"
            f"  Priority: 1=OrderStatus, 2=WebSocket, 3=RestAPI"
        )

        start_time = asyncio.get_event_loop().time()
        attempt = 0

        # Track which sources we've tried
        sources_tried = {
            'order_status': False,  # –ü–†–ò–û–†–ò–¢–ï–¢ 1 (–ë–´–õ–û 2)
            'websocket': False,     # –ü–†–ò–û–†–ò–¢–ï–¢ 2 (–ë–´–õ–û 1)
            'rest_api': False       # –ü–†–ò–û–†–ò–¢–ï–¢ 3 (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
        }

        while (asyncio.get_event_loop().time() - start_time) < timeout:
            attempt += 1
            elapsed = asyncio.get_event_loop().time() - start_time
            logger.debug(
                f"Verification attempt {attempt} for {symbol} "
                f"(elapsed: {elapsed:.1f}s / {timeout}s)"
            )

            # ============================================================
            # SOURCE 1 (PRIORITY 1): Order filled status
            # –°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô - –æ—Ä–¥–µ—Ä –£–ñ–ï –ò–°–ü–û–õ–ù–ï–ù –≤ exchange
            # ============================================================
            if not sources_tried['order_status']:
                try:
                    logger.debug(f"üîç [SOURCE 1/3] Checking order status for {entry_order.id}")

                    # Refetch order to get latest status
                    # Small delay first only on first attempt
                    if attempt == 1:
                        await asyncio.sleep(0.5)

                    order_status = await exchange_instance.fetch_order(entry_order.id, symbol)

                    if order_status:
                        filled = float(order_status.get('filled', 0))
                        status = order_status.get('status', '')

                        logger.debug(
                            f"üìä Order status: id={entry_order.id}, status={status}, filled={filled}"
                        )

                        if filled > 0:
                            logger.info(
                                f"‚úÖ [SOURCE 1] Order status CONFIRMED position exists!\n"
                                f"  Order ID: {entry_order.id}\n"
                                f"  Status: {status}\n"
                                f"  Filled: {filled}\n"
                                f"  Expected: {expected_quantity}\n"
                                f"  Match: {'YES ‚úÖ' if abs(filled - expected_quantity) < 0.01 else 'PARTIAL ‚ö†Ô∏è'}\n"
                                f"  Verification time: {elapsed:.2f}s"
                            )
                            return True  # SUCCESS!

                        elif status == 'closed' and filled == 0:
                            # Order closed but not filled = order FAILED
                            logger.error(
                                f"‚ùå [SOURCE 1] Order FAILED verification:\n"
                                f"  Status: closed\n"
                                f"  Filled: 0\n"
                                f"  This means order was rejected or cancelled!"
                            )
                            return False  # Confirmed: position does NOT exist

                    # –ü–æ–º–µ—á–∞–µ–º source –∫–∞–∫ tried —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    sources_tried['order_status'] = True

                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è [SOURCE 1] Order status check failed: {e}")
                    # –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ tried - –±—É–¥–µ–º retry –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

            # ============================================================
            # SOURCE 2 (PRIORITY 2): WebSocket position updates
            # –í–¢–û–†–ò–ß–ù–´–ô - –º–æ–∂–µ—Ç –∏–º–µ—Ç—å delay –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ self.positions
            # ============================================================
            if self.position_manager and hasattr(self.position_manager, 'get_cached_position') and not sources_tried['websocket']:
                try:
                    logger.debug(f"üîç [SOURCE 2/3] Checking WebSocket cache for {symbol}")

                    ws_position = self.position_manager.get_cached_position(symbol, exchange)

                    if ws_position:
                        ws_quantity = float(ws_position.get('quantity', 0))
                        ws_side = ws_position.get('side', '')

                        logger.debug(
                            f"üìä WebSocket position: symbol={symbol}, quantity={ws_quantity}, side={ws_side}"
                        )

                        if ws_quantity > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ quantity
                            quantity_diff = abs(ws_quantity - expected_quantity)

                            if quantity_diff <= 0.01:  # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01
                                logger.info(
                                    f"‚úÖ [SOURCE 2] WebSocket CONFIRMED position exists!\n"
                                    f"  Symbol: {symbol}\n"
                                    f"  Quantity: {ws_quantity} (expected: {expected_quantity})\n"
                                    f"  Side: {ws_side}\n"
                                    f"  Verification time: {elapsed:.2f}s"
                                )
                                return True  # SUCCESS!
                            else:
                                logger.warning(
                                    f"‚ö†Ô∏è [SOURCE 2] WebSocket quantity mismatch!\n"
                                    f"  Expected: {expected_quantity}\n"
                                    f"  Got: {ws_quantity}\n"
                                    f"  Difference: {quantity_diff}"
                                )

                    # –ü–æ–º–µ—á–∞–µ–º source –∫–∞–∫ tried
                    sources_tried['websocket'] = True

                except AttributeError as e:
                    logger.debug(f"‚ö†Ô∏è [SOURCE 2] WebSocket not available: {e}")
                    sources_tried['websocket'] = True
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è [SOURCE 2] WebSocket check failed: {e}")
                    sources_tried['websocket'] = True

            # ============================================================
            # SOURCE 3 (PRIORITY 3): REST API fetch_positions
            # FALLBACK - –º–æ–∂–µ—Ç –∏–º–µ—Ç—å cache delay
            # ============================================================
            if not sources_tried['rest_api'] or attempt % 3 == 0:  # Retry every 3 attempts
                try:
                    logger.debug(f"üîç [SOURCE 3/3] Checking REST API positions for {symbol}")

                    # Fetch positions from REST API
                    if exchange == 'bybit':
                        positions = await exchange_instance.fetch_positions(
                            symbols=[symbol],
                            params={'category': 'linear'}
                        )
                    else:
                        positions = await exchange_instance.fetch_positions([symbol])

                    # Find our position
                    for pos in positions:
                        if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                            contracts = float(pos.get('contracts', 0))
                            logger.info(
                                f"‚úÖ [SOURCE 3] REST API CONFIRMED position exists!\n"
                                f"  Symbol: {symbol}\n"
                                f"  Contracts: {contracts}\n"
                                f"  Expected: {expected_quantity}\n"
                                f"  Match: {'YES ‚úÖ' if abs(contracts - expected_quantity) < 0.01 else 'NO ‚ö†Ô∏è'}\n"
                                f"  Verification time: {elapsed:.2f}s"
                            )
                            return True

                    sources_tried['rest_api'] = True

                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è [SOURCE 3] REST API check failed: {e}")
                    # Don't mark as tried - will retry

            # No source confirmed position yet - wait before retry
            wait_time = min(0.5 * (1.5 ** attempt), 2.0)  # Exponential backoff: 0.5s, 0.75s, 1.12s, 1.69s, 2s...
            await asyncio.sleep(wait_time)

        # Timeout reached without verification
        logger.critical(
            f"‚ùå Multi-source verification TIMEOUT for {symbol}:\n"
            f"  Duration: {timeout}s\n"
            f"  Attempts: {attempt}\n"
            f"  Sources tried:\n"
            f"    - WebSocket: {sources_tried['websocket']}\n"
            f"    - Order status: {sources_tried['order_status']}\n"
            f"    - REST API: {sources_tried['rest_api']}\n"
            f"  Order ID: {entry_order.id}\n"
            f"  Expected quantity: {expected_quantity}"
        )

        raise AtomicPositionError(
            f"Could not verify position for {symbol} after {timeout}s timeout using any source. "
            f"Order ID: {entry_order.id}, Expected quantity: {expected_quantity}. "
            f"This may indicate API issues or order rejection."
        )

    async def open_position_atomic(
        self,
        signal_id: int,
        symbol: str,
        exchange: str,
        side: str,
        quantity: float,
        entry_price: float,
        stop_loss_percent: float  # FIX: Changed from stop_loss_price to stop_loss_percent
    ) -> Optional[Dict[str, Any]]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º stop-loss

        Args:
            signal_id: ID —Å–∏–≥–Ω–∞–ª–∞
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            side: 'buy' –∏–ª–∏ 'sell'
            quantity: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (—Å–∏–≥–Ω–∞–ª—å–Ω–∞—è, –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç execution)
            stop_loss_percent: –ü—Ä–æ—Ü–µ–Ω—Ç stop-loss (–±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –æ—Ç execution price)

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

        Raises:
            AtomicPositionError: –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
        """
        operation_id = f"pos_{symbol}_{now_utc().timestamp()}"

        position_id = None
        entry_order = None
        sl_order = None
        state = PositionState.PENDING_ENTRY

        async with self.atomic_operation(operation_id):
            try:
                # Step 0.5: Load trailing params from monitoring.params (PHASE 3)
                exchange_params = None
                trailing_activation_percent = None
                trailing_callback_percent = None

                try:
                    exchange_params = await self.repository.get_params_by_exchange_name(exchange)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  Failed to load exchange params for {exchange}: {e}")

                if exchange_params:
                    # Try to get trailing params from DB
                    if exchange_params.get('trailing_activation_filter') is not None:
                        trailing_activation_percent = float(exchange_params['trailing_activation_filter'])
                        logger.debug(
                            f"üìä Using trailing_activation_filter from DB for {exchange}: "
                            f"{trailing_activation_percent}%"
                        )

                    if exchange_params.get('trailing_distance_filter') is not None:
                        trailing_callback_percent = float(exchange_params['trailing_distance_filter'])
                        logger.debug(
                            f"üìä Using trailing_distance_filter from DB for {exchange}: "
                            f"{trailing_callback_percent}%"
                        )

                # Fallback to config if not in DB
                if self.config:
                    if trailing_activation_percent is None:
                        trailing_activation_percent = float(self.config.trading.trailing_activation_percent)
                        logger.warning(
                            f"‚ö†Ô∏è  trailing_activation_filter not in DB for {exchange}, "
                            f"using .env fallback: {trailing_activation_percent}%"
                        )

                    if trailing_callback_percent is None:
                        trailing_callback_percent = float(self.config.trading.trailing_callback_percent)
                        logger.warning(
                            f"‚ö†Ô∏è  trailing_distance_filter not in DB for {exchange}, "
                            f"using .env fallback: {trailing_callback_percent}%"
                        )

                # Step 1: –†–∞–∑–º–µ—â–µ–Ω–∏–µ entry –æ—Ä–¥–µ—Ä–∞ (MOVED UP - before position creation)
                logger.info(f"üìä Placing entry order for {symbol}")
                state = PositionState.ENTRY_PLACED

                # FIX: exchange_manager is a dict, not an object with get_exchange method
                exchange_instance = self.exchange_manager.get(exchange)
                if not exchange_instance:
                    raise AtomicPositionError(f"Exchange {exchange} not available")

                # RESTORED 2025-10-25: Set leverage before opening position
                if self.config and self.config.auto_set_leverage:
                    leverage = self.config.leverage
                    logger.info(f"üéöÔ∏è Setting {leverage}x leverage for {symbol}")
                    leverage_set = await exchange_instance.set_leverage(symbol, leverage)
                    if not leverage_set:
                        logger.warning(
                            f"‚ö†Ô∏è Could not set leverage for {symbol}, "
                            f"using exchange default"
                        )
                        # Continue anyway - leverage might already be set correctly

                # Prepare params for exchange-specific requirements
                params = {}
                if exchange == 'bybit':
                    params['positionIdx'] = 0  # One-way mode (required by Bybit V5 API)
                elif exchange == 'binance':
                    # CRITICAL FIX: Request FULL response to get avgPrice and fills
                    # Default newOrderRespType=ACK returns avgPrice="0.00000"
                    # NOTE: FULL returns immediately with status='NEW', executedQty='0'
                    # We fetch order afterwards to get actual filled status and avgPrice
                    params['newOrderRespType'] = 'FULL'
                    logger.debug(f"Setting newOrderRespType=FULL for Binance market order")

                # FIX #1: Pre-register position BEFORE order execution (prevents race condition)
                # WebSocket updates arrive instantly (<1ms), must register before order
                if hasattr(self, 'position_manager') and self.position_manager:
                    await self.position_manager.pre_register_position(symbol, exchange)
                    logger.info(f"‚ö° Pre-registered {symbol} for WebSocket tracking (BEFORE order)")

                raw_order = await exchange_instance.create_market_order(
                    symbol, side, quantity, params=params if params else None
                )

                # Check if order was created
                if raw_order is None:
                    raise AtomicPositionError(f"Failed to create order for {symbol}: order returned None")

                # FIX: Check Bybit retCode IMMEDIATELY to catch errors before SL attempt
                # Bybit returns retCode != 0 for all errors (e.g., 10001 = minimum size)
                if exchange == 'bybit' and raw_order:
                    order_info = raw_order.info
                    ret_code = order_info.get('retCode', 0)

                    if ret_code != 0:
                        ret_msg = order_info.get('retMsg', 'Unknown error')

                        # Minimum size error (retCode 10001)
                        if ret_code == 10001 or 'minimum limit' in ret_msg.lower():
                            logger.warning(f"‚ö†Ô∏è Order size for {symbol} doesn't meet exchange requirements: {ret_msg}")
                            raise MinimumOrderLimitError(f"Order size for {symbol} below minimum limit on {exchange}: {ret_msg}")

                        # Other Bybit errors
                        logger.error(f"‚ùå Bybit order failed for {symbol}: retCode={ret_code}, {ret_msg}")
                        raise AtomicPositionError(f"Bybit order creation failed: {ret_msg}")

                # CRITICAL FIX: Market orders need fetch for full data
                # - Binance: Returns status='NEW', need fetch for status='FILLED'
                # - Bybit: Returns minimal response (only orderId), need fetch for all fields
                # Fetch order to get complete data including side, status, filled, avgPrice
                if raw_order and raw_order.id:
                    order_id = raw_order.id

                    # FIX RC#2: Retry logic –¥–ª—è fetch_order —Å exponential backoff
                    # Bybit API v5 –∏–º–µ–µ—Ç propagation delay - 0.5s –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                    max_retries = 5
                    retry_delay = 0.5 if exchange == 'bybit' else 0.1

                    fetched_order = None

                    for attempt in range(1, max_retries + 1):
                        try:
                            # Wait before fetch attempt
                            await asyncio.sleep(retry_delay)

                            # Attempt to fetch complete order data
                            fetched_order = await exchange_instance.fetch_order(order_id, symbol)

                            if fetched_order:
                                logger.info(
                                    f"‚úÖ Fetched {exchange} order on attempt {attempt}/{max_retries}: "
                                    f"id={order_id}, "
                                    f"side={fetched_order.side}, "
                                    f"status={fetched_order.status}, "
                                    f"filled={fetched_order.filled}/{fetched_order.amount}, "
                                    f"avgPrice={fetched_order.price}"
                                )
                                raw_order = fetched_order
                                break  # Success - exit retry loop
                            else:
                                logger.warning(
                                    f"‚ö†Ô∏è Attempt {attempt}/{max_retries}: fetch_order returned None for {order_id}"
                                )

                                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º delay –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (exponential backoff)
                                if attempt < max_retries:
                                    retry_delay *= 1.5  # 0.5s ‚Üí 0.75s ‚Üí 1.12s ‚Üí 1.69s ‚Üí 2.53s

                        except Exception as e:
                            logger.warning(
                                f"‚ö†Ô∏è Attempt {attempt}/{max_retries}: fetch_order failed with error: {e}"
                            )

                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º delay –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                            if attempt < max_retries:
                                retry_delay *= 1.5

                    # –ü–æ—Å–ª–µ –≤—Å–µ—Ö retries
                    if not fetched_order:
                        logger.error(
                            f"‚ùå CRITICAL: fetch_order returned None after {max_retries} attempts for {order_id}!\n"
                            f"  Exchange: {exchange}\n"
                            f"  Symbol: {symbol}\n"
                            f"  Total wait time: ~{sum([0.5 * (1.5 ** i) for i in range(max_retries)]):.2f}s\n"
                            f"  Will attempt to use create_order response (may be incomplete).\n"
                            f"  If this fails, position creation will rollback."
                        )
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π create_order response
                        # ExchangeResponseAdapter –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å ValueError –µ—Å–ª–∏ –Ω–µ—Ç 'side'
                        # –≠—Ç–æ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ª—É—á—à–µ rollback —á–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å unknown side

                # Normalize order response
                entry_order = ExchangeResponseAdapter.normalize_order(raw_order, exchange)

                # Check if normalization succeeded
                if entry_order is None:
                    raise AtomicPositionError(f"Failed to normalize order for {symbol}")

                if not ExchangeResponseAdapter.is_order_filled(entry_order):
                    raise AtomicPositionError(f"Entry order failed: {entry_order.status}")

                logger.info(f"‚úÖ Entry order placed: {entry_order.id}")

                # Update position with entry details
                # Extract execution price from normalized order
                exec_price = ExchangeResponseAdapter.extract_execution_price(entry_order)

                # DIAGNOSTIC: Log price comparison for monitoring
                if exec_price and exec_price > 0:
                    diff_pct = ((exec_price - entry_price) / entry_price * 100) if entry_price > 0 else 0
                    logger.info(
                        f"üí∞ Entry Price - Signal: ${entry_price:.8f}, "
                        f"Execution: ${exec_price:.8f}, "
                        f"Diff: {diff_pct:.4f}%"
                    )
                else:
                    logger.info(
                        f"üí∞ Entry Price - Signal: ${entry_price:.8f}, "
                        f"Execution: N/A (will use fallback)"
                    )

                # FIX: Bybit API v5 does not return avgPrice in create_order response
                # Use fetch_positions to get actual execution price (fetch_order has 500 limit)
                if exchange == 'bybit' and (not exec_price or exec_price == 0):
                    logger.info(f"üìä Fetching position for {symbol} to get execution price")
                    try:
                        # FIX: Bybit API needs time to populate entryPrice in position data
                        # Wait 500ms for API to process order and update position
                        await asyncio.sleep(0.5)

                        # Use fetch_positions instead of fetch_order (Bybit V5 best practice)
                        positions = await exchange_instance.fetch_positions(
                            symbols=[symbol],
                            params={'category': 'linear'}
                        )

                        # Find our position
                        for pos in positions:
                            if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                                exec_price = float(pos.get('entryPrice', 0))
                                if exec_price > 0:
                                    logger.info(f"‚úÖ Got execution price from position: {exec_price}")
                                    break

                        if not exec_price or exec_price == 0:
                            # Fallback to signal entry price if position not found
                            logger.warning(f"‚ö†Ô∏è Could not get execution price from position, using signal price")
                            exec_price = entry_price

                    except Exception as e:
                        logger.error(f"‚ùå Failed to fetch position for execution price: {e}")
                        # Fallback: use signal entry price
                        exec_price = entry_price

                # BINANCE FALLBACK: If avgPrice still 0, fetch position for execution price
                elif exchange == 'binance' and (not exec_price or exec_price == 0):
                    logger.info(f"üìä Binance: avgPrice not in response, fetching position for {symbol}")
                    try:
                        # Small delay to ensure position is updated on exchange
                        await asyncio.sleep(1.0)

                        # Fetch positions to get actual entry price
                        positions = await exchange_instance.fetch_positions([symbol])

                        # Find our position
                        for pos in positions:
                            if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                                exec_price = float(pos.get('entryPrice', 0))
                                if exec_price > 0:
                                    logger.info(f"‚úÖ Got execution price from Binance position: ${exec_price:.8f}")
                                    break

                        # If still no execution price, use signal price as fallback
                        if not exec_price or exec_price == 0:
                            logger.warning(
                                f"‚ö†Ô∏è Could not get execution price from Binance position for {symbol}, "
                                f"using signal price: ${entry_price:.8f}"
                            )
                            exec_price = entry_price

                    except Exception as e:
                        logger.error(f"‚ùå Failed to fetch Binance position for execution price: {e}")
                        # Fallback to signal price
                        exec_price = entry_price

                # Step 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–∏ —Å REAL execution price
                # Position created AFTER order execution to use real fill price
                logger.info(f"üìù Creating position record for {symbol} with exec price ${exec_price:.8f}")
                position_data = {
                    'symbol': symbol,
                    'exchange': exchange,
                    'side': 'long' if side.lower() == 'buy' else 'short',
                    'quantity': quantity,
                    'entry_price': exec_price,  # ‚Üê FIXED: Use REAL execution price, not signal
                    'current_price': exec_price,
                    'status': state.value,
                    'exchange_order_id': entry_order.id,
                    'trailing_activation_percent': trailing_activation_percent,
                    'trailing_callback_percent': trailing_callback_percent
                }

                position_id = await self.repository.create_position(position_data)
                logger.info(f"‚úÖ Position record created: ID={position_id} (entry=${exec_price:.8f})")

                # CRITICAL FIX: Recalculate SL from REAL execution price
                # Signal price may differ significantly from execution price
                from utils.decimal_utils import calculate_stop_loss, to_decimal

                position_side_for_sl = 'long' if side.lower() == 'buy' else 'short'
                stop_loss_price = calculate_stop_loss(
                    to_decimal(exec_price),  # Use REAL execution price, not signal price
                    position_side_for_sl,
                    to_decimal(stop_loss_percent)
                )

                logger.info(f"üõ°Ô∏è SL calculated from exec_price ${exec_price}: ${stop_loss_price} ({stop_loss_percent}%)")

                # Log entry order to database for audit trail
                logger.info(f"üîç About to log entry order for {symbol}")
                try:
                    await self.repository.create_order({
                        'position_id': str(position_id),
                        'exchange': exchange,
                        'symbol': symbol,
                        'order_id': entry_order.id,
                        'client_order_id': getattr(entry_order, 'clientOrderId', None),
                        'type': 'MARKET',
                        'side': side,
                        'size': quantity,
                        'price': exec_price or entry_price,
                        'status': 'FILLED',
                        'filled': quantity,
                        'remaining': 0,
                        'fee': getattr(entry_order, 'fee', 0),
                        'fee_currency': getattr(entry_order, 'feeCurrency', 'USDT')
                    })
                    logger.info(f"üìù Entry order logged to database")
                except Exception as e:
                    logger.error(f"‚ùå Failed to log entry order to DB: {e}")

                # Log entry trade to database (executed trade)
                logger.info(f"üîç About to log entry trade for {symbol}")
                try:
                    await self.repository.create_trade({
                        'signal_id': signal_id,
                        'symbol': symbol,
                        'exchange': exchange,
                        'side': side,
                        'order_type': 'MARKET',
                        'quantity': quantity,
                        'price': exec_price or entry_price,
                        'executed_qty': quantity,
                        'average_price': exec_price or entry_price,
                        'order_id': entry_order.id,
                        'client_order_id': getattr(entry_order, 'clientOrderId', None),
                        'status': 'FILLED',
                        'fee': getattr(entry_order, 'fee', 0),
                        'fee_currency': getattr(entry_order, 'feeCurrency', 'USDT')
                    })
                    logger.info(f"üìù Entry trade logged to database")
                except Exception as e:
                    logger.error(f"‚ùå Failed to log entry trade to DB: {e}")

                # Step 2.5: Multi-source position verification
                try:
                    logger.info(f"üîç Verifying position exists for {symbol}...")

                    position_exists = await self._verify_position_exists_multi_source(
                        exchange_instance=exchange_instance,
                        symbol=symbol,
                        exchange=exchange,
                        entry_order=entry_order,
                        expected_quantity=quantity,
                        timeout=10.0  # 10 second timeout (was 3s wait before)
                    )

                    if not position_exists:
                        # Confirmed: position does NOT exist (order failed/rejected)
                        raise AtomicPositionError(
                            f"Position verification failed for {symbol}. "
                            f"Order {entry_order.id} appears to have been rejected or cancelled. "
                            f"Cannot proceed with SL placement."
                        )

                    logger.info(f"‚úÖ Position verified for {symbol}")

                except AtomicPositionError:
                    # Re-raise atomic errors (position verification failed)
                    raise
                except Exception as e:
                    # Unexpected error during verification
                    logger.error(f"‚ùå Unexpected error during position verification: {e}")
                    raise AtomicPositionError(f"Position verification error: {e}")

                # Step 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ stop-loss —Å retry
                logger.info(f"üõ°Ô∏è Placing stop-loss for {symbol} at {stop_loss_price}")
                state = PositionState.PENDING_SL

                sl_placed = False
                max_retries = 3

                for attempt in range(max_retries):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º StopLossManager –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL
                        sl_result = await self.stop_loss_manager.set_stop_loss(
                            symbol=symbol,
                            side='sell' if side.lower() == 'buy' else 'buy',
                            amount=quantity,
                            stop_price=stop_loss_price
                        )

                        if sl_result and sl_result.get('status') in ['created', 'already_exists']:
                            sl_placed = True
                            sl_order = sl_result
                            logger.info(f"‚úÖ Stop-loss placed successfully")

                            # Log SL order to database (but not trade - only when executed)
                            try:
                                sl_side = 'sell' if side.lower() == 'buy' else 'buy'
                                await self.repository.create_order({
                                    'position_id': str(position_id),
                                    'exchange': exchange,
                                    'symbol': symbol,
                                    'order_id': sl_result.get('orderId'),
                                    'client_order_id': sl_result.get('clientOrderId'),
                                    'type': sl_result.get('orderType', 'STOP_MARKET'),
                                    'side': sl_side,
                                    'size': quantity,
                                    'price': stop_loss_price,
                                    'status': 'NEW',
                                    'filled': 0,
                                    'remaining': quantity,
                                    'fee': 0,
                                    'fee_currency': 'USDT'
                                })
                                logger.info(f"üìù Stop-loss order logged to database")
                            except Exception as e:
                                logger.error(f"‚ùå Failed to log SL order to DB: {e}")

                            break

                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è SL attempt {attempt + 1}/{max_retries} failed: {e}")
                        if attempt < max_retries - 1:
                            await asyncio.sleep(2 ** attempt)  # Exponential backoff
                        else:
                            # Final attempt failed - MUST rollback
                            raise AtomicPositionError(
                                f"Failed to place stop-loss after {max_retries} attempts: {e}"
                            )

                if not sl_placed:
                    raise AtomicPositionError("Stop-loss placement failed")

                # Step 4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å defensive check (Layer 3 defense)
                activation_successful = await self._safe_activate_position(
                    position_id=position_id,
                    symbol=symbol,
                    exchange=exchange,
                    stop_loss_price=stop_loss_price
                )

                if not activation_successful:
                    # Duplicate detected by Layer 3 - trigger rollback
                    raise AtomicPositionError(
                        f"Duplicate active position detected for {symbol} on {exchange}. "
                        f"This should not happen with Layer 1&2 in place - investigate!"
                    )

                state = PositionState.ACTIVE
                logger.info(f"üéâ Position {symbol} is ACTIVE with protection")

                return {
                    'position_id': position_id,
                    'symbol': symbol,
                    'exchange': exchange,
                    'side': position_data['side'],
                    'quantity': quantity,
                    'entry_price': exec_price,  # ‚Üê FIXED: Return actual execution price
                    'signal_price': entry_price,  # ‚Üê NEW: Keep signal price for reference
                    'stop_loss_price': stop_loss_price,
                    'state': state.value,
                    'entry_order': entry_order.raw_data,  # Return raw data for compatibility
                    'sl_order': sl_order
                }

            except Exception as e:
                error_str = str(e)

                # Check for Binance "Invalid symbol status" error
                if "code\":-4140" in error_str or "Invalid symbol status" in error_str:
                    logger.warning(f"‚ö†Ô∏è Symbol {symbol} is unavailable for trading (delisted or reduce-only): {e}")

                    # Clean up: Delete position from DB if it was created
                    if position_id:
                        try:
                            await self.repository.update_position(position_id, **{
                                'status': 'canceled',
                                'exit_reason': truncate_exit_reason('Symbol unavailable for trading')
                            })
                        except:
                            pass  # Ignore cleanup errors

                    # Raise specific exception for unavailable symbols
                    raise SymbolUnavailableError(f"Symbol {symbol} unavailable for trading on {exchange}")

                # Check for Bybit "minimum limit" error
                if "retCode\":10001" in error_str or "exceeds minimum limit" in error_str:
                    logger.warning(f"‚ö†Ô∏è Order size for {symbol} doesn't meet exchange requirements: {e}")

                    # CRITICAL FIX: Call rollback to close orphan position on exchange
                    # Without this, position may remain open without SL protection
                    await self._rollback_position(
                        position_id=position_id,
                        entry_order=entry_order,
                        symbol=symbol,
                        exchange=exchange,
                        state=state,
                        quantity=quantity,
                        error=error_str
                    )

                    # Raise specific exception for minimum limit
                    raise MinimumOrderLimitError(f"Order size for {symbol} below minimum limit on {exchange}")

                logger.error(f"‚ùå Atomic position creation failed: {e}")

                # CRITICAL: Rollback logic for other errors
                await self._rollback_position(
                    position_id=position_id,
                    entry_order=entry_order,
                    symbol=symbol,
                    exchange=exchange,
                    state=state,
                    quantity=quantity,  # CRITICAL FIX: pass quantity for proper close
                    error=str(e)
                )

                raise AtomicPositionError(f"Position creation rolled back: {e}")

    async def _rollback_position(
        self,
        position_id: Optional[int],
        entry_order: Optional[Any],
        symbol: str,
        exchange: str,
        state: PositionState,
        quantity: float,  # CRITICAL FIX: needed for proper position close on rollback
        error: str
    ):
        """
        –û—Ç–∫–∞—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        CRITICAL: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ –∑–∞—â–∏—Ç—ã
        """
        logger.warning(f"üîÑ Rolling back position for {symbol}, state={state.value}")

        try:
            # –ï—Å–ª–∏ entry –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω –Ω–æ –Ω–µ—Ç SL - –ö–†–ò–¢–ò–ß–ù–û!
            if entry_order and state in [PositionState.ENTRY_PLACED, PositionState.PENDING_SL]:
                logger.critical(f"‚ö†Ô∏è CRITICAL: Position without SL detected, closing immediately!")

                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                # FIX: exchange_manager is a dict, not an object with get_exchange method
                exchange_instance = self.exchange_manager.get(exchange)
                if exchange_instance:
                    try:
                        # CRITICAL FIX: Poll for position visibility before closing
                        # Race condition: position may not be visible immediately
                        from core.position_manager import normalize_symbol

                        our_position = None
                        max_attempts = 20  # Increased from 10 (Error #2 fix)

                        for attempt in range(max_attempts):
                            positions = await exchange_instance.exchange.fetch_positions(
                                params={'category': 'linear'}
                            )

                            for pos in positions:
                                if normalize_symbol(pos['symbol']) == normalize_symbol(symbol) and \
                                   float(pos.get('contracts', 0)) > 0:
                                    our_position = pos
                                    break

                            if our_position:
                                logger.info(f"‚úÖ Position found on attempt {attempt + 1}/{max_attempts}")
                                break

                            if attempt < max_attempts - 1:
                                await asyncio.sleep(1.0)  # Poll every 1s (increased from 0.5s - Error #2 fix)

                        if our_position:
                            # CRITICAL FIX: Validate entry_order.side before calculating close_side
                            # entry_order.side should ALWAYS be 'buy' or 'sell' (enforced by FIX #1.2)
                            # But defensive check in case it somehow becomes invalid

                            if entry_order.side not in ('buy', 'sell'):
                                logger.critical(
                                    f"‚ùå CRITICAL: entry_order.side is INVALID: '{entry_order.side}' for {symbol}!\n"
                                    f"  This should NEVER happen (normalize_order should fail-fast).\n"
                                    f"  Cannot calculate close_side safely.\n"
                                    f"  Will use position.side from exchange as source of truth."
                                )

                                # FALLBACK: Use position side from exchange (most reliable source)
                                position_side = our_position.get('side', '').lower()

                                if position_side == 'long':
                                    close_side = 'sell'
                                    logger.critical(f"‚úÖ Using position.side='long' ‚Üí close_side='sell'")
                                elif position_side == 'short':
                                    close_side = 'buy'
                                    logger.critical(f"‚úÖ Using position.side='short' ‚Üí close_side='buy'")
                                else:
                                    # Even position.side is invalid - this is catastrophic!
                                    logger.critical(
                                        f"‚ùå CATASTROPHIC: Both entry_order.side and position.side are invalid!\n"
                                        f"  entry_order.side: '{entry_order.side}'\n"
                                        f"  position.side: '{position_side}'\n"
                                        f"  Cannot determine correct close_side.\n"
                                        f"  ABORTING ROLLBACK - position will remain open without SL!"
                                    )
                                    raise AtomicPositionError(
                                        f"Cannot rollback {symbol}: Both entry_order.side ('{entry_order.side}') "
                                        f"and position.side ('{position_side}') are invalid. "
                                        f"Cannot determine correct close direction!"
                                    )
                            else:
                                # Normal case: entry_order.side is valid
                                close_side = 'sell' if entry_order.side == 'buy' else 'buy'

                            # Log intended close order for audit
                            logger.critical(
                                f"üì§ Rollback: Creating close order for {symbol}:\n"
                                f"  entry_order.side: '{entry_order.side}'\n"
                                f"  position.side: '{our_position.get('side')}'\n"
                                f"  close_side: '{close_side}'\n"
                                f"  quantity: {quantity}"
                            )

                            # Create close order
                            close_order = await exchange_instance.create_market_order(
                                symbol, close_side, quantity
                            )
                            logger.info(f"‚úÖ Emergency close executed: {close_order.id}")

                            # CRITICAL FIX: Verify position was actually closed
                            logger.info(f"üîç Verifying {symbol} position was closed by rollback...")

                            # Small delay for order execution
                            await asyncio.sleep(1.0)

                            # Multi-attempt verification (position should be 0 or not found)
                            verification_successful = False
                            max_verification_attempts = 10

                            for verify_attempt in range(max_verification_attempts):
                                try:
                                    # Check all available sources

                                    # Source 1: WebSocket
                                    if self.position_manager and hasattr(self.position_manager, 'get_cached_position'):
                                        try:
                                            ws_position = self.position_manager.get_cached_position(symbol, exchange)
                                            if not ws_position or float(ws_position.get('quantity', 0)) == 0:
                                                logger.info(
                                                    f"‚úÖ [WebSocket] Confirmed {symbol} position closed "
                                                    f"(attempt {verify_attempt + 1})"
                                                )
                                                verification_successful = True
                                                break
                                        except Exception as e:
                                            logger.debug(f"WebSocket check failed: {e}")

                                    # Source 2: REST API
                                    if exchange == 'bybit':
                                        positions = await exchange_instance.fetch_positions(
                                            symbols=[symbol],
                                            params={'category': 'linear'}
                                        )
                                    else:
                                        positions = await exchange_instance.fetch_positions([symbol])

                                    # Check if position still exists
                                    position_found = False
                                    for pos in positions:
                                        if pos['symbol'] == symbol or pos.get('info', {}).get('symbol') == symbol.replace('/', ''):
                                            contracts = float(pos.get('contracts', 0))
                                            if contracts > 0:
                                                position_found = True
                                                logger.warning(
                                                    f"‚ö†Ô∏è Position {symbol} still open: {contracts} contracts "
                                                    f"(attempt {verify_attempt + 1}/{max_verification_attempts})"
                                                )
                                                break

                                    if not position_found:
                                        logger.info(
                                            f"‚úÖ [REST API] Confirmed {symbol} position closed "
                                            f"(attempt {verify_attempt + 1})"
                                        )
                                        verification_successful = True
                                        break

                                    # Still open - wait before retry
                                    if verify_attempt < max_verification_attempts - 1:
                                        await asyncio.sleep(1.0)

                                except Exception as e:
                                    logger.error(f"Error verifying position closure: {e}")
                                    if verify_attempt < max_verification_attempts - 1:
                                        await asyncio.sleep(1.0)

                            # Check verification result
                            if verification_successful:
                                logger.info(f"‚úÖ VERIFIED: {symbol} position successfully closed by rollback")
                            else:
                                logger.critical(
                                    f"‚ùå CRITICAL: Could not verify {symbol} position was closed after rollback!\n"
                                    f"  Close order ID: {close_order.id}\n"
                                    f"  Verification attempts: {max_verification_attempts}\n"
                                    f"  Position may still be open on exchange!\n"
                                    f"  ‚ö†Ô∏è POTENTIAL ORPHANED POSITION - MANUAL VERIFICATION REQUIRED!"
                                )

                                # TODO: Send critical alert to administrator
                                # This is a serious issue that needs immediate attention
                        else:
                            logger.critical(f"‚ùå Position {symbol} not found after {max_attempts} attempts!")
                            logger.critical(f"‚ö†Ô∏è ALERT: Open position without SL may exist on exchange!")
                    except Exception as close_error:
                        logger.critical(f"‚ùå FAILED to close unprotected position: {close_error}")
                        # TODO: Send alert to administrator

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            if position_id:
                # FIX: update_position expects **kwargs, not dict as second argument
                # FIX: Truncate error to fit varchar(500) limit
                await self.repository.update_position(position_id, **{
                    'status': PositionState.ROLLED_BACK.value,
                    'closed_at': datetime.utcnow(),  # FIX: Use offset-naive datetime for database compatibility
                    'exit_reason': truncate_exit_reason(f'rollback: {error}')
                })

        except Exception as rollback_error:
            logger.critical(f"‚ùå Rollback failed: {rollback_error}")

    async def recover_incomplete_positions(self):
        """
        Recovery –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π,
        –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        """
        logger.info("üîç Checking for incomplete positions...")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        incomplete_states = [
            PositionState.PENDING_ENTRY.value,
            PositionState.ENTRY_PLACED.value,
            PositionState.PENDING_SL.value
        ]

        incomplete = await self.repository.get_positions_by_status(incomplete_states)

        if not incomplete:
            logger.info("‚úÖ No incomplete positions found")
            return

        logger.warning(f"‚ö†Ô∏è Found {len(incomplete)} incomplete positions")

        for pos in incomplete:
            try:
                symbol = pos['symbol']
                state = pos['status']

                logger.info(f"üîß Recovering position {symbol} in state {state}")

                if state == PositionState.PENDING_ENTRY.value:
                    # Entry –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω - –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ failed
                    # FIX: update_position expects **kwargs, not dict as second argument
                    await self.repository.update_position(pos['id'], **{
                        'status': PositionState.FAILED.value,
                        'exit_reason': truncate_exit_reason('incomplete: entry not placed')
                    })

                elif state == PositionState.ENTRY_PLACED.value:
                    # Entry —Ä–∞–∑–º–µ—â–µ–Ω –Ω–æ –Ω–µ—Ç SL - –ö–†–ò–¢–ò–ß–ù–û!
                    await self._recover_position_without_sl(pos)

                elif state == PositionState.PENDING_SL.value:
                    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                    await self._complete_sl_placement(pos)

                logger.info(f"‚úÖ Recovered position {symbol}")

            except Exception as e:
                logger.error(f"‚ùå Failed to recover position {pos['id']}: {e}")

    async def _recover_position_without_sl(self, position: Dict):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ stop-loss"""
        symbol = position['symbol']

        logger.warning(f"üö® Recovering position without SL: {symbol}")

        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL
        try:
            sl_result = await self.stop_loss_manager.set_stop_loss(
                symbol=symbol,
                side='sell' if position['side'] == 'long' else 'buy',
                amount=position['quantity'],
                stop_price=position.get('planned_sl_price',
                          self._calculate_default_sl(position['entry_price'], position['side']))
            )

            if sl_result and sl_result.get('status') in ['created', 'already_exists']:
                # FIX: Use only columns that exist in database schema
                await self.repository.update_position(position['id'], **{
                    'stop_loss_price': sl_result.get('stopPrice'),  # Setting this indicates SL is active
                    'status': PositionState.ACTIVE.value
                })
                logger.info(f"‚úÖ SL restored for {symbol}")
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                await self._emergency_close_position(position)

        except Exception as e:
            logger.error(f"Failed to recover SL: {e}")
            await self._emergency_close_position(position)

    async def _complete_sl_placement(self, position: Dict):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL"""
        # Check if SL already exists
        has_sl = await self.stop_loss_manager.has_stop_loss(position['symbol'])

        if has_sl[0]:
            # SL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            # FIX: Use only columns that exist in database schema
            await self.repository.update_position(position['id'], **{
                'stop_loss_price': has_sl[1],  # Setting this indicates SL is active
                'status': PositionState.ACTIVE.value
            })
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL
            await self._recover_position_without_sl(position)

    async def _emergency_close_position(self, position: Dict):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã"""
        logger.critical(f"üö® EMERGENCY CLOSE for {position['symbol']}")

        try:
            # FIX: exchange_manager is a dict, not an object with get_exchange method
            exchange = self.exchange_manager.get(position['exchange'])
            if exchange:
                close_side = 'sell' if position['side'] == 'long' else 'buy'
                close_order = await exchange.create_market_order(
                    position['symbol'], close_side, position['quantity']
                )

                # FIX: Use only columns that exist in database schema
                await self.repository.update_position(position['id'], **{
                    'status': 'closed',
                    'closed_at': datetime.utcnow(),  # FIX: Use offset-naive datetime for database compatibility
                    'exit_reason': truncate_exit_reason('emergency: no stop loss'),
                    'current_price': close_order.price if close_order else None  # Use current_price instead of exit_price
                })

                logger.info(f"‚úÖ Emergency close completed")
        except Exception as e:
            logger.critical(f"‚ùå Emergency close failed: {e}")
            # TODO: Send critical alert

    def _calculate_default_sl(self, entry_price: float, side: str, percent: float = 2.0) -> float:
        """–†–∞—Å—á–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ stop-loss"""
        if side == 'long':
            return entry_price * (1 - percent / 100)
        else:
            return entry_price * (1 + percent / 100)