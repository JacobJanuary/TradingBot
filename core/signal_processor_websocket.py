"""
WebSocket Signal Processor - –ú–∏–≥—Ä–∞—Ü–∏—è —Å PostgreSQL polling –Ω–∞ WebSocket stream
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ–ª–Ω —á—Ç–æ –∏ —Å—Ç–∞—Ä—ã–π SignalProcessor
"""
import logging
import asyncio
import os
from typing import Dict, List, Optional
from datetime import datetime, timezone, timedelta
from decimal import Decimal

from websocket.signal_client import SignalWebSocketClient
from websocket.signal_adapter import SignalAdapter
from core.wave_signal_processor import WaveSignalProcessor
from core.symbol_filter import SymbolFilter
from models.validation import validate_signal, OrderSide

logger = logging.getLogger(__name__)


class WebSocketSignalProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ WebSocket –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
    
    –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ–ª–Ω (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–º—É SignalProcessor):
    1. –ñ–¥–∞—Ç—å –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–Ω—ã (WAVE_CHECK_MINUTES)
    2. –í—ã—á–∏—Å–ª–∏—Ç—å timestamp –æ–∂–∏–¥–∞–µ–º–æ–π –≤–æ–ª–Ω—ã (15-–º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞)
    3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —ç—Ç–∏–º timestamp (–¥–æ 120 —Å–µ–∫)
    4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ª–Ω—É –∫–æ–≥–¥–∞ —Å–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤–∏–ª–∏—Å—å
    """
    
    def __init__(self, config, position_manager, repository, event_router):
        """
        Initialize WebSocket Signal Processor
        
        Args:
            config: Trading configuration
            position_manager: Position manager instance
            repository: Database repository (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ mapping)
            event_router: Event router for notifications
        """
        self.config = config
        self.position_manager = position_manager
        self.repository = repository
        self.event_router = event_router
        
        # WebSocket configuration from .env
        self.ws_config = {
            'SIGNAL_WS_URL': os.getenv('SIGNAL_WS_URL', 'ws://localhost:8765'),
            'SIGNAL_WS_TOKEN': os.getenv('SIGNAL_WS_TOKEN'),
            'AUTO_RECONNECT': os.getenv('SIGNAL_WS_AUTO_RECONNECT', 'true').lower() == 'true',
            'RECONNECT_INTERVAL': int(os.getenv('SIGNAL_WS_RECONNECT_INTERVAL', '5')),
            'MAX_RECONNECT_ATTEMPTS': int(os.getenv('SIGNAL_WS_MAX_RECONNECT_ATTEMPTS', '-1')),
            'SIGNAL_BUFFER_SIZE': int(os.getenv('SIGNAL_BUFFER_SIZE', '100'))
        }
        
        # Wave monitoring configuration (–∏–∑ .env, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º SignalProcessor)
        wave_minutes_str = os.getenv('WAVE_CHECK_MINUTES')
        if not wave_minutes_str:
            raise ValueError("WAVE_CHECK_MINUTES must be set in .env file")
        self.wave_check_minutes = sorted([int(m.strip()) for m in wave_minutes_str.split(',')])
        
        self.wave_check_duration = int(os.getenv('WAVE_CHECK_DURATION_SECONDS', '120'))
        self.wave_check_interval = int(os.getenv('WAVE_CHECK_INTERVAL_SECONDS', '1'))
        
        # Initialize WebSocket client
        self.ws_client = SignalWebSocketClient(self.ws_config)
        
        # Initialize signal adapter
        self.signal_adapter = SignalAdapter()
        
        # Initialize wave processor (existing logic)
        self.wave_processor = WaveSignalProcessor(config, position_manager)
        
        # ‚úÖ FIX: Initialize symbol filter –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
        self.symbol_filter = SymbolFilter(config)
        
        # Set WebSocket callbacks
        self.ws_client.set_callbacks(
            on_signals=self._on_signals_received,
            on_connect=self._on_ws_connect,
            on_disconnect=self._on_ws_disconnect,
            on_error=self._on_ws_error
        )
        
        # State
        self.running = False
        self._wave_monitoring_task = None
        self._ws_task = None
        
        # Wave tracking (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º SignalProcessor)
        self.processed_waves = {}  # {wave_timestamp: {'signal_ids': set(), 'count': int}}
        
        # Statistics
        self.stats = {
            'signals_received': 0,
            'signals_processed': 0,
            'signals_failed': 0,
            'waves_detected': 0,
            'waves_processed': 0,
            'last_signal_time': None,
            'websocket_reconnections': 0,
            'current_wave': None
        }
        
        logger.info(
            f"WebSocket Signal Processor initialized: "
            f"url={self.ws_config['SIGNAL_WS_URL']}, "
            f"wave_check_minutes={self.wave_check_minutes}"
        )
    
    async def start(self):
        """Start WebSocket signal processing"""
        logger.info("Starting WebSocket Signal Processor...")
        
        # Start WebSocket client (runs in background)
        self.running = True
        self._ws_task = asyncio.create_task(self.ws_client.run())
        
        # Start wave monitoring loop (–≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        self._wave_monitoring_task = asyncio.create_task(self._wave_monitoring_loop())
        
        logger.info("‚úÖ WebSocket Signal Processor started")
    
    async def stop(self):
        """Stop WebSocket processing"""
        logger.info("Stopping WebSocket Signal Processor...")
        
        self.running = False
        
        # Stop WebSocket client
        await self.ws_client.stop()
        
        # Stop wave monitoring task
        if self._wave_monitoring_task:
            self._wave_monitoring_task.cancel()
            try:
                await self._wave_monitoring_task
            except asyncio.CancelledError:
                pass
        
        # Stop WebSocket task
        if self._ws_task:
            self._ws_task.cancel()
            try:
                await self._ws_task
            except asyncio.CancelledError:
                pass
        
        logger.info("‚úÖ WebSocket Signal Processor stopped")
    
    async def _on_signals_received(self, ws_signals: List[Dict]):
        """
        Callback –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ù–ï –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç
        –°–∏–≥–Ω–∞–ª—ã —É–∂–µ –≤ buffer –∫–ª–∏–µ–Ω—Ç–∞ (RAW —Ñ–æ—Ä–º–∞—Ç), –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏
        
        Args:
            ws_signals: Raw —Å–∏–≥–Ω–∞–ª—ã –æ—Ç WebSocket (—Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞)
        """
        try:
            logger.info(f"üì° Received {len(ws_signals)} RAW signals from WebSocket (added to buffer)")
            
            # Update stats
            self.stats['signals_received'] += len(ws_signals)
            self.stats['last_signal_time'] = datetime.now(timezone.utc)
            
            # –í–°–Å! –°–∏–≥–Ω–∞–ª—ã —É–∂–µ –≤ buffer –∫–ª–∏–µ–Ω—Ç–∞ (self.ws_client.signal_buffer)
            # –û–Ω–∏ –±—É–¥—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ _monitor_wave_appearance
            
        except Exception as e:
            logger.error(f"Error handling WebSocket signals: {e}", exc_info=True)
            self.stats['signals_failed'] += len(ws_signals) if ws_signals else 0
    
    async def _wave_monitoring_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ–ª–Ω (–∞–Ω–∞–ª–æ–≥ —Å—Ç–∞—Ä–æ–≥–æ _process_loop)
        
        –õ–æ–≥–∏–∫–∞:
        1. –ñ–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22 –º–∏–Ω—É—Ç–∞)
        2. –í—ã—á–∏—Å–ª–∏—Ç—å timestamp –æ–∂–∏–¥–∞–µ–º–æ–π –≤–æ–ª–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00 –º–∏–Ω—É—Ç–∞ = 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —ç—Ç–∏–º timestamp (–¥–æ 120 —Å–µ–∫—É–Ω–¥)
        4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ª–Ω—É –∫–æ–≥–¥–∞ —Å–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤–∏–ª–∏—Å—å
        """
        logger.info("üåä Wave monitoring loop started")
        
        while self.running:
            try:
                # 1. –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–Ω—ã
                await self._wait_for_next_wave_check()
                
                if not self.running:
                    break
                
                # 2. –í—ã—á–∏—Å–ª—è–µ–º timestamp –æ–∂–∏–¥–∞–µ–º–æ–π –≤–æ–ª–Ω—ã
                expected_wave_timestamp = self._calculate_expected_wave_timestamp()
                
                logger.info(f"üîç Looking for wave with timestamp: {expected_wave_timestamp}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –≤–æ–ª–Ω—É
                if expected_wave_timestamp in self.processed_waves:
                    logger.info(f"Wave {expected_wave_timestamp} already processed, skipping")
                    continue

                # ‚úÖ –ê–¢–û–ú–ê–†–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ü–æ–º–µ—á–∞–µ–º –≤–æ–ª–Ω—É –∫–∞–∫ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ" –°–†–ê–ó–£
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–π –∂–µ –≤–æ–ª–Ω—ã
                self.processed_waves[expected_wave_timestamp] = {
                    'status': 'processing',
                    'started_at': datetime.now(timezone.utc),
                    'signal_ids': set(),
                    'count': 0
                }
                logger.info(f"üîí Wave {expected_wave_timestamp} marked as processing")

                # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω—ã (–¥–æ WAVE_CHECK_DURATION_SECONDS)
                wave_signals = await self._monitor_wave_appearance(expected_wave_timestamp)

                if wave_signals:
                    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ª–Ω—É
                    logger.info(f"üåä Wave detected! Processing {len(wave_signals)} signals for {expected_wave_timestamp}")

                    # Update wave metadata
                    self.processed_waves[expected_wave_timestamp].update({
                        'status': 'executing',
                        'signal_ids': set(s.get('id') for s in wave_signals),
                        'count': len(wave_signals),
                        'first_seen': datetime.now(timezone.utc)
                    })
                    self.stats['waves_detected'] += 1
                    self.stats['current_wave'] = expected_wave_timestamp
                    
                    # Calculate buffer size (signals already sorted by score_week)
                    max_trades = self.wave_processor.max_trades_per_wave
                    buffer_percent = self.wave_processor.buffer_percent
                    buffer_size = int(max_trades * (1 + buffer_percent / 100))
                    
                    # Take only top signals with buffer
                    signals_to_process = wave_signals[:buffer_size]
                    
                    logger.info(
                        f"üìä Wave {expected_wave_timestamp}: {len(wave_signals)} total signals, "
                        f"processing top {len(signals_to_process)} (max={max_trades} +{buffer_percent}% buffer)"
                    )
                    
                    # Validate signals
                    result = await self.wave_processor.process_wave_signals(
                        signals=signals_to_process,
                        wave_timestamp=expected_wave_timestamp
                    )
                    
                    # Get successful after validation
                    final_signals = result.get('successful', [])
                    
                    # If not enough successful - try more from remaining
                    if len(final_signals) < max_trades and len(wave_signals) > buffer_size:
                        remaining_needed = max_trades - len(final_signals)
                        extra_size = int(remaining_needed * 1.5)  # +50% –¥–ª—è –∑–∞–ø–∞—Å–∞
                        
                        logger.info(
                            f"‚ö†Ô∏è Only {len(final_signals)}/{max_trades} successful, "
                            f"processing {extra_size} more signals"
                        )
                        
                        next_batch = wave_signals[buffer_size : buffer_size + extra_size]
                        extra_result = await self.wave_processor.process_wave_signals(
                            next_batch, 
                            expected_wave_timestamp
                        )
                        extra_successful = extra_result.get('successful', [])
                        final_signals.extend(extra_successful[:remaining_needed])
                    
                    logger.info(
                        f"‚úÖ Wave {expected_wave_timestamp} validated: "
                        f"{len(final_signals)} signals with buffer (target: {max_trades} positions)"
                    )
                    
                    # EXECUTE: Open positions with buffer logic
                    # Continue trying signals until we open max_trades positions or run out of signals
                    executed_count = 0
                    failed_count = 0
                    
                    for idx, signal_result in enumerate(final_signals):
                        if not self.running:
                            break
                        
                        # CRITICAL: Stop when we have enough successful positions
                        if executed_count >= max_trades:
                            logger.info(f"‚úÖ Target reached: {executed_count}/{max_trades} positions opened, stopping execution")
                            break
                        
                        # Extract original signal
                        signal = signal_result.get('signal_data')
                        if not signal:
                            logger.warning(f"Signal #{idx+1} has no signal_data, skipping")
                            failed_count += 1
                            continue
                        
                        symbol = signal.get('symbol', 'UNKNOWN')
                        logger.info(f"üìà Executing signal {idx+1}/{len(final_signals)}: {symbol} (opened: {executed_count}/{max_trades})")
                        
                        # Open position
                        try:
                            success = await self._execute_signal(signal)
                            if success:
                                executed_count += 1
                                logger.info(f"‚úÖ Signal {idx+1}/{len(final_signals)} ({symbol}) executed")
                            else:
                                failed_count += 1
                                logger.warning(f"‚ùå Signal {idx+1}/{len(final_signals)} ({symbol}) failed")
                        except Exception as e:
                            failed_count += 1
                            logger.error(f"‚ùå Error executing signal {symbol}: {e}", exc_info=True)
                        
                        # Delay between signals
                        if idx < len(final_signals) - 1:
                            await asyncio.sleep(1)
                    
                    # Update stats
                    self.stats['waves_processed'] += 1
                    self.stats['signals_processed'] += executed_count
                    
                    logger.info(
                        f"üéØ Wave {expected_wave_timestamp} complete: "
                        f"{executed_count} positions opened, {failed_count} failed, "
                        f"{len(result.get('failed', []))} validation errors, "
                        f"{len(result.get('skipped', []))} duplicates"
                    )

                    # Mark wave as completed
                    self.processed_waves[expected_wave_timestamp]['status'] = 'completed'
                    self.processed_waves[expected_wave_timestamp]['completed_at'] = datetime.now(timezone.utc)

                    # Note: pending_signals already cleared by pop() in _monitor_wave_appearance
                    # New signals for this timestamp will be rejected by processed_waves check
                else:
                    logger.info(f"‚ö†Ô∏è No wave detected for timestamp {expected_wave_timestamp}")
                    # Mark as not found
                    self.processed_waves[expected_wave_timestamp]['status'] = 'not_found'
                
            except asyncio.CancelledError:
                logger.info("Wave monitoring loop cancelled")
                break
            except Exception as e:
                logger.error(f"Error in wave monitoring loop: {e}", exc_info=True)
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                await asyncio.sleep(10)
    
    async def _wait_for_next_wave_check(self):
        """
        –ñ–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–Ω—ã (WAVE_CHECK_MINUTES)
        –ê–Ω–∞–ª–æ–≥ –º–µ—Ç–æ–¥–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ SignalProcessor
        """
        now = datetime.now(timezone.utc)
        current_minute = now.minute
        
        logger.info(f"[DEBUG] _wait_for_next_wave_check: now={now.strftime('%H:%M:%S')}, current_minute={current_minute}")
        
        # Find the next check minute
        next_check_minute = None
        for check_minute in self.wave_check_minutes:
            if current_minute < check_minute:
                next_check_minute = check_minute
                break
        
        logger.info(f"[DEBUG] next_check_minute after loop: {next_check_minute}")
        
        # If no check minute found in current hour, use first one of next hour
        if next_check_minute is None:
            next_check_minute = self.wave_check_minutes[0]
            next_check_time = now.replace(minute=next_check_minute, second=0, microsecond=0)
            next_check_time += timedelta(hours=1)
            logger.info(f"[DEBUG] Using next hour: {next_check_time.strftime('%H:%M:%S')}")
        else:
            next_check_time = now.replace(minute=next_check_minute, second=0, microsecond=0)
            logger.info(f"[DEBUG] Using current hour: {next_check_time.strftime('%H:%M:%S')}")
        
        # Calculate wait time
        wait_seconds = (next_check_time - now).total_seconds()
        
        logger.info(f"[DEBUG] wait_seconds={wait_seconds:.1f}")
        
        if wait_seconds > 0:
            logger.info(f"‚è∞ Waiting {wait_seconds:.0f}s until next wave check at {next_check_time.strftime('%H:%M UTC')}")
            await asyncio.sleep(wait_seconds)
        else:
            logger.warning(f"‚ö†Ô∏è wait_seconds <= 0: {wait_seconds:.1f}, skipping wait")
    
    def _calculate_expected_wave_timestamp(self) -> str:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å timestamp –æ–∂–∏–¥–∞–µ–º–æ–π –≤–æ–ª–Ω—ã
        
        –õ–æ–≥–∏–∫–∞: –í–æ–ª–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ ~20 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–≤–æ–µ–≥–æ timestamp.
        –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –º–∏–Ω—É—Ç—ã WAVE_CHECK_MINUTES (–Ω–∞–ø—Ä–∏–º–µ—Ä, [6, 20, 35, 50]).
        –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å timestamp –≤–æ–ª–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –°–ï–ô–ß–ê–°.
        
        –î–ª—è WAVE_CHECK_MINUTES=[6, 20, 35, 50]:
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 06 –º–∏–Ω—É—Ç ‚Üí –∏—â–µ–º –≤–æ–ª–Ω—É timestamp 45 (–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Å–∞)
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 20 –º–∏–Ω—É—Ç ‚Üí –∏—â–µ–º –≤–æ–ª–Ω—É timestamp 00
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 35 –º–∏–Ω—É—Ç ‚Üí –∏—â–µ–º –≤–æ–ª–Ω—É timestamp 15
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 50 –º–∏–Ω—É—Ç ‚Üí –∏—â–µ–º –≤–æ–ª–Ω—É timestamp 30
        
        –û–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞: wave_timestamp = current_check_minute - 20 –º–∏–Ω—É—Ç
        
        Returns:
            Timestamp –≤–æ–ª–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ (—Å 'T' –º–µ–∂–¥—É –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º)
        """
        now = datetime.now(timezone.utc)
        current_minute = now.minute
        
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é check_minute (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–µ–π—á–∞—Å)
        current_check_minute = None
        for check_minute in sorted(self.wave_check_minutes, reverse=True):
            if current_minute >= check_minute:
                current_check_minute = check_minute
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (current_minute < —Å–∞–º–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π check_minute), –∑–Ω–∞—á–∏—Ç –º—ã –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
        # –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–Ω—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Å–∞
        if current_check_minute is None:
            current_check_minute = self.wave_check_minutes[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è check_minute –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Å–∞
            wave_time = now.replace(minute=current_check_minute, second=0, microsecond=0) - timedelta(hours=1, minutes=20)
        else:
            # –í—ã—á–∏—Ç–∞–µ–º 20 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π check_minute
            wave_time = now.replace(minute=current_check_minute, second=0, microsecond=0) - timedelta(minutes=20)
        
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º .isoformat() –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å 'T' (–∫–∞–∫ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
        return wave_time.isoformat()
    
    async def _monitor_wave_appearance(self, expected_timestamp: str) -> Optional[List[Dict]]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º timestamp
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–æ 120 —Å–µ–∫—É–Ω–¥
        
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: 
        1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç RAW —Å–∏–≥–Ω–∞–ª—ã –∏–∑ buffer WebSocket –∫–ª–∏–µ–Ω—Ç–∞
        2. –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ SignalAdapter
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            expected_timestamp: ISO timestamp –æ–∂–∏–¥–∞–µ–º–æ–π –≤–æ–ª–Ω—ã
            
        Returns:
            List of ADAPTED signals if wave detected, None otherwise
        """
        detection_start = datetime.now(timezone.utc)
        
        logger.info(f"üîç Monitoring wave appearance for {self.wave_check_duration}s...")
        
        while (datetime.now(timezone.utc) - detection_start).total_seconds() < self.wave_check_duration:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            await self.ws_client.request_signals()
            
            # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º buffer –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ RAW —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω—É–∂–Ω—ã–º timestamp
            raw_signals = self.ws_client.get_signals_by_timestamp(expected_timestamp)
            
            if raw_signals:
                logger.info(f"‚úÖ Found {len(raw_signals)} RAW signals for wave {expected_timestamp}")
                
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –±–æ—Ç–∞
                adapted_signals = self.signal_adapter.adapt_signals(raw_signals)
                
                if adapted_signals:
                    logger.info(f"‚úÖ Adapted {len(adapted_signals)} signals to bot format")
                    return adapted_signals
                else:
                    logger.warning(f"No signals after adaptation for wave {expected_timestamp}")
            
            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(self.wave_check_interval)
        
        logger.debug(f"No signals found for wave {expected_timestamp} after {self.wave_check_duration}s")
        return None
    
    async def _on_ws_connect(self):
        """Callback –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket"""
        logger.info("üîå WebSocket connected to signal server")
    
    async def _on_ws_disconnect(self):
        """Callback –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç WebSocket"""
        logger.warning("‚ö†Ô∏è WebSocket disconnected from signal server")
        self.stats['websocket_reconnections'] += 1
    
    async def _on_ws_error(self, error):
        """Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ WebSocket"""
        logger.error(f"‚ùå WebSocket error: {error}")
    
    async def _execute_signal(self, signal: Dict) -> bool:
        """
        Execute signal: validate and open position
        Adapted from old signal_processor.py::_process_signal()
        
        Args:
            signal: Signal dict with all necessary data
            
        Returns:
            bool: True if position opened successfully, False otherwise
        """
        signal_id = signal.get('id', 'unknown')
        
        try:
            # Check if action is present
            if not signal.get('action'):
                logger.warning(f"Signal #{signal_id} has no action field, skipping")
                return False

            # Validate signal data using pydantic
            try:
                validated_signal = validate_signal(signal)
                if not validated_signal:
                    logger.warning(f"Signal #{signal_id} failed validation")
                    return False
            except Exception as e:
                logger.error(f"Error validating signal #{signal_id}: {e}")
                return False
            
            symbol = validated_signal.symbol
            exchange = validated_signal.exchange
            
            # ‚úÖ FIX: Check symbol filter (stop-list) BEFORE proceeding
            is_allowed, reason = self.symbol_filter.is_symbol_allowed(symbol)
            if not is_allowed:
                logger.info(
                    f"‚è∏Ô∏è Signal #{signal_id} skipped: {symbol} is blocked ({reason})"
                )
                return False
            
            logger.info(
                f"Executing signal #{signal_id}: {symbol} on {exchange} "
                f"(week: {validated_signal.score_week}, month: {validated_signal.score_month})"
            )

            # Get exchange manager
            exchange_manager = self.position_manager.exchanges.get(exchange)
            if not exchange_manager:
                logger.error(f"Exchange {exchange} not available")
                return False

            # Get current price
            ticker = await exchange_manager.fetch_ticker(symbol)
            if not ticker:
                logger.error(f"Cannot get ticker for {symbol}")
                return False

            current_price = ticker.get('last', 0)
            if current_price is None or current_price <= 0:
                logger.error(f"Invalid price for {symbol}: {current_price}")
                return False

            # Determine side (PositionRequest expects 'BUY' or 'SELL')
            if validated_signal.action in [OrderSide.BUY, OrderSide.LONG]:
                side = 'BUY'
            elif validated_signal.action in [OrderSide.SELL, OrderSide.SHORT]:
                side = 'SELL'
            else:
                logger.error(f"Invalid signal action: {validated_signal.action}")
                return False
            
            # Create position request (dataclass from position_manager)
            from core.position_manager import PositionRequest
            
            request = PositionRequest(
                signal_id=signal_id,
                symbol=validated_signal.symbol,
                exchange=validated_signal.exchange,
                side=side,
                entry_price=Decimal(str(current_price))
            )

            # Execute position opening
            position = await self.position_manager.open_position(request)

            if position:
                logger.info(f"‚úÖ Signal #{signal_id} ({symbol}) executed successfully")
                return True
            else:
                logger.warning(f"‚ùå Signal #{signal_id} ({symbol}) - position_manager returned None")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error executing signal #{signal_id}: {e}", exc_info=True)
            return False
    
    def get_stats(self) -> Dict:
        """Get processor statistics"""
        return {
            **self.stats,
            'websocket': self.ws_client.get_stats(),
            'buffer_size': len(self.ws_client.signal_buffer),
            'processed_waves_count': len(self.processed_waves)
        }