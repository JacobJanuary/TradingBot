"""
Balance Checker - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
"""
import logging
import decimal
from typing import Dict, Optional
from decimal import Decimal
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class BalanceChecker:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
    
    Features:
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∏—Ä–∂–∞–º
    - –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å = —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    """
    
    def __init__(self, exchanges: Dict, position_size_usd: float):
        """
        Args:
            exchanges: Dict[exchange_name, ExchangeManager]
            position_size_usd: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USD (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        """
        self.exchanges = exchanges
        self.position_size_usd = Decimal(str(position_size_usd))
        
        # –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –±–∏—Ä–∂–∞–º
        self._balance_cache = {}  # {exchange_name: {'balance': Decimal, 'updated_at': datetime}}
        self._cache_ttl_seconds = 10  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        # Tracking –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        self._insufficient_funds_by_exchange = {}  # {exchange_name: last_warning_time}
        self._warning_cooldown_seconds = 60  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        
        logger.info(
            f"BalanceChecker initialized: "
            f"position_size={self.position_size_usd} USD, "
            f"cache_ttl={self._cache_ttl_seconds}s"
        )
    
    async def has_sufficient_balance(
        self,
        exchange_name: str,
        required_usd: Optional[Decimal] = None
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ
        
        Args:
            exchange_name: –ò–º—è –±–∏—Ä–∂–∏ ('binance', 'bybit')
            required_usd: –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ –≤ USD (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç position_size_usd)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            required = required_usd or self.position_size_usd
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º)
            available_balance = await self._get_available_balance(exchange_name)
            
            if available_balance is None:
                logger.error(f"Could not fetch balance for {exchange_name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            has_funds = available_balance >= required
            
            if not has_funds:
                self._log_insufficient_funds(exchange_name, available_balance, required)
            
            return has_funds
            
        except Exception as e:
            logger.error(f"Error checking balance for {exchange_name}: {e}", exc_info=True)
            return False
    
    async def _get_available_balance(self, exchange_name: str) -> Optional[Decimal]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT –Ω–∞ –±–∏—Ä–∂–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        
        Returns:
            Decimal: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if exchange_name in self._balance_cache:
            cache_entry = self._balance_cache[exchange_name]
            age = (now - cache_entry['updated_at']).total_seconds()
            
            if age < self._cache_ttl_seconds:
                # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
                logger.debug(
                    f"Using cached balance for {exchange_name}: "
                    f"{cache_entry['balance']} USDT (age: {age:.1f}s)"
                )
                return cache_entry['balance']
        
        # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
        try:
            exchange = self.exchanges.get(exchange_name)
            if not exchange:
                logger.error(f"Exchange {exchange_name} not found")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_data = await exchange.fetch_balance()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT
            available = None
            
            # –î–ª—è Bybit Unified Account: free['USDT'] –º–æ–∂–µ—Ç –±—ã—Ç—å None
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º total['USDT'] –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–º–∏–Ω—É—Å used)
            if exchange_name == 'bybit':
                # Bybit Unified Account format
                usdt_data = balance_data.get('USDT', {})
                free_balance = usdt_data.get('free')
                total_balance = usdt_data.get('total', 0)
                used_balance = usdt_data.get('used', 0)
                
                # ‚úÖ FIX: Validate values before Decimal conversion to prevent ConversionSyntax
                if free_balance is not None and free_balance > 0:
                    # –ï—Å–ª–∏ free –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    try:
                        available = Decimal(str(free_balance))
                    except (ValueError, decimal.InvalidOperation) as e:
                        logger.warning(f"Invalid free_balance value: {free_balance}, using 0")
                        available = Decimal('0')
                else:
                    # –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º: total - used
                    # Ensure both values are valid before conversion
                    try:
                        total = Decimal(str(total_balance)) if total_balance is not None else Decimal('0')
                        used = Decimal(str(used_balance)) if used_balance is not None else Decimal('0')
                        available = total - used
                    except (ValueError, decimal.InvalidOperation) as e:
                        logger.warning(f"Invalid balance values: total={total_balance}, used={used_balance}, using 0")
                        available = Decimal('0')
                
                logger.debug(
                    f"Bybit balance: total={total_balance}, used={used_balance}, "
                    f"free={free_balance}, calculated_available={available}"
                )
            else:
                # Binance –∏ –¥—Ä—É–≥–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º standard format
                usdt_balance = balance_data.get('free', {}).get('USDT', 0)
                available = Decimal(str(usdt_balance))
                logger.debug(f"Balance for {exchange_name}: free={available}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._balance_cache[exchange_name] = {
                'balance': available,
                'updated_at': now
            }
            
            logger.debug(
                f"‚úÖ Updated balance for {exchange_name}: {available} USDT"
            )
            
            return available
            
        except Exception as e:
            logger.error(f"Failed to fetch balance for {exchange_name}: {e}", exc_info=True)
            return None
    
    def _log_insufficient_funds(
        self,
        exchange_name: str,
        available: Decimal,
        required: Decimal
    ):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö (—Å rate limiting)
        """
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏
        last_warning = self._insufficient_funds_by_exchange.get(exchange_name)
        
        if last_warning:
            time_since_warning = (now - last_warning).total_seconds()
            if time_since_warning < self._warning_cooldown_seconds:
                # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                logger.debug(
                    f"Insufficient funds on {exchange_name} "
                    f"(available: {available}, required: {required}) - warning suppressed"
                )
                return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        deficit = required - available
        logger.warning(
            f"üí∞ INSUFFICIENT FUNDS on {exchange_name}:\n"
            f"   Available: {available:.2f} USDT\n"
            f"   Required:  {required:.2f} USDT\n"
            f"   Deficit:   {deficit:.2f} USDT\n"
            f"   ‚è∏Ô∏è Skipping signals for {exchange_name} until funds available"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        self._insufficient_funds_by_exchange[exchange_name] = now
    
    async def get_balance_summary(self) -> Dict[str, Decimal]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º
        
        Returns:
            Dict[exchange_name, available_balance_usdt]
        """
        summary = {}
        
        for exchange_name in self.exchanges.keys():
            balance = await self._get_available_balance(exchange_name)
            if balance is not None:
                summary[exchange_name] = balance
        
        return summary
    
    def invalidate_cache(self, exchange_name: Optional[str] = None):
        """
        –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤
        
        Args:
            exchange_name: –ò–º—è –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ None, –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ)
        """
        if exchange_name:
            if exchange_name in self._balance_cache:
                del self._balance_cache[exchange_name]
                logger.debug(f"Invalidated balance cache for {exchange_name}")
        else:
            self._balance_cache.clear()
            logger.debug("Invalidated all balance caches")
