#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ SL –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
–û–∂–∏–¥–∞–Ω–∏–µ: –í—Å–µ SL –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω—ã (–ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–∑–∏—Ü–∏—è–º)
"""

import asyncio
import ccxt.async_support as ccxt
from config.settings import Config
from datetime import datetime

async def main():
    print("=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Stop-Loss –æ—Ä–¥–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 80)
    print()

    config = Config()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Binance
    binance_config = config.exchanges.get('binance')
    if not binance_config:
        print("‚ùå Binance –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance
    exchange = ccxt.binance({
        'apiKey': binance_config.api_key,
        'secret': binance_config.api_secret,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',
            'recvWindow': 60000,
            'warnOnFetchOpenOrdersWithoutSymbol': False,
        }
    })

    if binance_config.testnet:
        exchange.set_sandbox_mode(True)
        print("‚ö†Ô∏è  TESTNET MODE")
        print()

    try:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Futures...")
        print()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("=" * 80)
        print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô")
        print("=" * 80)
        print()

        positions = await exchange.fetch_positions()
        open_positions = [p for p in positions if float(p.get('contracts', 0)) != 0]

        print(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (contracts != 0): {len(open_positions)}")
        print()

        if open_positions:
            print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
            for pos in open_positions[:10]:
                symbol = pos['symbol']
                contracts = pos['contracts']
                side = pos['side']
                entry_price = pos.get('entryPrice', 'N/A')
                unrealized_pnl = pos.get('unrealizedPnl', 0)
                print(f"   ‚Ä¢ {symbol}: {side} {contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, entry={entry_price}, PnL={unrealized_pnl:.2f}")
            print()
        else:
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç (–≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã)")
            print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("=" * 80)
        print("2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í")
        print("=" * 80)
        print()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        open_orders = await exchange.fetch_open_orders()

        print(f"üìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
        print()

        if not open_orders:
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç!")
            print("‚úÖ –í—Å–µ SL –æ—Ä–¥–µ—Ä–∞ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
            print()
        else:
            print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
            print()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            by_type = {}
            by_symbol = {}

            for order in open_orders:
                order_type = order.get('type', 'unknown')
                symbol = order['symbol']

                if order_type not in by_type:
                    by_type[order_type] = []
                by_type[order_type].append(order)

                if symbol not in by_symbol:
                    by_symbol[symbol] = []
                by_symbol[symbol].append(order)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
            for order_type, orders in sorted(by_type.items()):
                print(f"   {order_type}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            print()

            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ä–¥–µ—Ä—É
            print("üìã –î–ï–¢–ê–õ–ò –ö–ê–ñ–î–û–ì–û –û–†–î–ï–†–ê:")
            print()

            for i, order in enumerate(open_orders, 1):
                symbol = order['symbol']
                order_id = order['id']
                order_type = order.get('type', 'unknown')
                side = order.get('side', 'unknown')
                price = order.get('price', 'N/A')
                amount = order.get('amount', 'N/A')
                status = order.get('status', 'unknown')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º reduceOnly —Ñ–ª–∞–≥ (–¥–ª—è SL)
                reduce_only = order.get('reduceOnly', False)
                info = order.get('info', {})
                stop_price = info.get('stopPrice', 'N/A')

                print(f"   {i}. {symbol}")
                print(f"      ID:          {order_id}")
                print(f"      Type:        {order_type}")
                print(f"      Side:        {side}")
                print(f"      Price:       {price}")
                print(f"      Stop Price:  {stop_price}")
                print(f"      Amount:      {amount}")
                print(f"      Status:      {status}")
                print(f"      ReduceOnly:  {reduce_only}")
                print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –∏–∑ –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –±—ã–ª–∏)
        if open_positions:
            print("=" * 80)
            print("3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í –ü–û –°–ò–ú–í–û–õ–ê–ú –° –û–¢–ö–†–´–¢–´–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò")
            print("=" * 80)
            print()

            for pos in open_positions:
                symbol = pos['symbol']
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {symbol}:")

                # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                symbol_orders = [o for o in open_orders if o['symbol'] == symbol]

                if symbol_orders:
                    print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(symbol_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
                    for order in symbol_orders:
                        order_type = order.get('type', 'unknown')
                        side = order.get('side', 'unknown')
                        price = order.get('price', 'N/A')
                        reduce_only = order.get('reduceOnly', False)
                        print(f"      ‚Ä¢ {order_type} {side} @ {price} (reduceOnly={reduce_only})")
                else:
                    print(f"   ‚ö†Ô∏è  –û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç, –Ω–æ –ø–æ–∑–∏—Ü–∏—è –û–¢–ö–†–´–¢–ê!")
                    print(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–∑–∏—Ü–∏—è –ë–ï–ó –ó–ê–©–ò–¢–´ SL!")
                print()

        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 80)
        print()

        if len(open_positions) == 0 and len(open_orders) == 0:
            print("‚úÖ –í–°–ï –û–¢–õ–ò–ß–ù–û!")
            print("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã: 0")
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: 0")
            print("‚úÖ SL –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π")
            print()
            print("üéâ –ú–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏–≤—è–∑–∫–∏ SL –∫ –ø–æ–∑–∏—Ü–∏—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û!")
        elif len(open_positions) == 0 and len(open_orders) > 0:
            print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê!")
            print("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã: 0")
            print(f"‚ùå –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
            print()
            print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: SL –æ—Ä–¥–µ—Ä–∞ –ù–ï –æ—Ç–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π!")
            print("üî¥ –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ SL –ù–ï –ü–†–ò–í–Ø–ó–ê–ù–´ –∫ –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞ –±–∏—Ä–∂–µ!")
            print()
            print("–¢–∏–ø—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ä–¥–µ—Ä–æ–≤:")
            for order_type, orders in sorted(by_type.items()):
                print(f"   ‚Ä¢ {order_type}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        elif len(open_positions) > 0:
            print("‚ö†Ô∏è  –ü–û–ó–ò–¶–ò–ò –ù–ï –í–°–ï –ó–ê–ö–†–´–¢–´!")
            print(f"‚ö†Ô∏è  –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
            print()
            print("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")

        print()
        print("=" * 80)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

if __name__ == "__main__":
    asyncio.run(main())
