#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –ë–î
"""
import os
import re

def check_file(filepath):
    """Check single file for DB field usage"""
    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
        content = f.read()

    issues = []

    # Check for hardcoded field lists in INSERT/UPDATE
    insert_patterns = [
        r'INSERT INTO.*positions.*\(',
        r'UPDATE.*positions.*SET'
    ]

    for pattern in insert_patterns:
        matches = re.finditer(pattern, content, re.IGNORECASE)
        for match in matches:
            # Get surrounding context
            start = max(0, match.start() - 50)
            end = min(len(content), match.end() + 200)
            context = content[start:end]

            # Check if explicitly lists fields (potential issue)
            if '(' in context and ')' in context:
                issues.append({
                    'type': 'explicit_fields',
                    'context': context[:150]
                })

    # Check for SELECT * (good - will include new fields)
    select_star = len(re.findall(r'SELECT \* FROM.*positions', content, re.IGNORECASE))

    # Check for exit_reason usage
    exit_reason_usage = content.count('exit_reason')

    # Check for new field usage
    new_fields = {
        'error_details': content.count('error_details'),
        'retry_count': content.count('retry_count'),
        'last_error_at': content.count('last_error_at'),
        'last_sync_at': content.count('last_sync_at'),
        'sync_status': content.count('sync_status'),
        'sl_order_id': content.count('sl_order_id')
    }

    return {
        'issues': issues,
        'select_star': select_star,
        'exit_reason_usage': exit_reason_usage,
        'new_fields': new_fields
    }

print("=" * 70)
print("–ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–î–ê –° –ù–û–í–û–ô –°–•–ï–ú–û–ô –ë–î")
print("=" * 70)

# Files to check
files_to_check = [
    'database/repository.py',
    'core/position_manager.py',
    'core/aged_position_manager.py',
    'core/position_synchronizer.py'
]

print("\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã...\n")

for filepath in files_to_check:
    if not os.path.exists(filepath):
        print(f"‚ö†Ô∏è {filepath} - not found")
        continue

    print(f"üìÑ {filepath}")
    result = check_file(filepath)

    # Check INSERT/UPDATE queries
    if result['issues']:
        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —è–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª–µ–π –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö: {len(result['issues'])}")
        for issue in result['issues'][:2]:  # Show first 2
            preview = issue['context'].replace('\n', ' ')[:80]
            print(f"      {preview}...")

    # Check if uses SELECT *
    if result['select_star'] > 0:
        print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SELECT * (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è)")

    # Check exit_reason usage
    if result['exit_reason_usage'] > 0:
        print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç exit_reason ({result['exit_reason_usage']} —Ä–∞–∑)")

    # Check new fields usage
    new_used = sum(1 for count in result['new_fields'].values() if count > 0)
    if new_used > 0:
        print(f"   ‚ÑπÔ∏è –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {new_used} –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:")
        for field, count in result['new_fields'].items():
            if count > 0:
                print(f"      ‚Ä¢ {field}: {count} —Ä–∞–∑")
    else:
        print(f"   ‚ÑπÔ∏è –ù–æ–≤—ã–µ –ø–æ–ª—è –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

    print()

print("=" * 70)
print("–í–´–í–û–î")
print("=" * 70)

print("""
‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
   ‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–î –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–µ (—Ç–æ–ª—å–∫–æ ADD COLUMN)
   ‚Ä¢ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è nullable (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
   ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ INSERT/UPDATE –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
   ‚Ä¢ SELECT * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è

‚ÑπÔ∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è):
   1. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ error_details –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   2. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å retry_count –≤ –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤
   3. –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å sl_order_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SL
   4. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å last_sync_at –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä

‚ùó –ö–†–ò–¢–ò–ß–ù–û:
   ‚Ä¢ –ù–ï–¢ breaking changes
   ‚Ä¢ –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π
   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
""")

print("\nüéØ –ò–¢–û–ì–û: –ö–æ–¥ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π –ë–î")
print("          –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´")
