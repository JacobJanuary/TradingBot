#!/usr/bin/env python3
"""
Final comprehensive verification against SCHEMA_CHANGES.md requirements
"""
import asyncio
import asyncpg
from config.settings import Config

async def final_check():
    """Final comprehensive verification"""

    print("=" * 70)
    print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ SCHEMA_CHANGES.md")
    print("=" * 70)

    config = Config()
    db = config.database

    try:
        conn = await asyncpg.connect(
            host=db.host,
            port=db.port,
            database=db.database,
            user=db.user,
            password=db.password
        )

        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {db.database}\n")

        all_ok = True

        # ========== REQUIREMENT 1: exit_reason ‚Üí TEXT ==========
        print("=" * 70)
        print("REQUIREMENT 1: exit_reason VARCHAR(100) ‚Üí TEXT")
        print("=" * 70)

        exit_type = await conn.fetchrow("""
            SELECT data_type, character_maximum_length
            FROM information_schema.columns
            WHERE table_schema = 'monitoring'
              AND table_name = 'positions'
              AND column_name = 'exit_reason'
        """)

        if exit_type and exit_type['data_type'] == 'text':
            print("‚úÖ exit_reason –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ TEXT")
            print(f"   –ë—ã–ª–æ: VARCHAR(100)")
            print(f"   –°—Ç–∞–ª–æ: TEXT (unlimited)")
        else:
            print(f"‚ùå exit_reason –ù–ï TEXT: {exit_type}")
            all_ok = False

        # ========== REQUIREMENT 2: 7 –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 2: –î–æ–±–∞–≤–∏—Ç—å 7 –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ positions")
        print("=" * 70)

        required_fields = {
            'error_details': 'jsonb',
            'retry_count': 'integer',
            'last_error_at': 'timestamp without time zone',
            'last_sync_at': 'timestamp without time zone',
            'sync_status': 'character varying',
            'exchange_order_id': 'character varying',
            'sl_order_id': 'character varying'
        }

        for field, expected_type in required_fields.items():
            actual = await conn.fetchrow("""
                SELECT data_type
                FROM information_schema.columns
                WHERE table_schema = 'monitoring'
                  AND table_name = 'positions'
                  AND column_name = $1
            """, field)

            if actual and actual['data_type'] in expected_type:
                print(f"‚úÖ {field}: {actual['data_type']}")
            else:
                print(f"‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø")
                all_ok = False

        # ========== REQUIREMENT 3: 3 –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü—ã ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 3: –°–æ–∑–¥–∞—Ç—å 3 –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü—ã")
        print("=" * 70)

        required_tables = ['event_log', 'schema_migrations', 'sync_status']

        for table in required_tables:
            exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_schema = 'monitoring'
                      AND table_name = $1
                )
            """, table)

            if exists:
                count = await conn.fetchval(f"SELECT COUNT(*) FROM monitoring.{table}")
                print(f"‚úÖ monitoring.{table} —Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç—Ä–æ–∫: {count})")
            else:
                print(f"‚ùå monitoring.{table} –ù–ï –ù–ê–ô–î–ï–ù–ê")
                all_ok = False

        # ========== REQUIREMENT 4: –ò–Ω–¥–µ–∫—Å—ã ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 4: –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã")
        print("=" * 70)

        required_indexes = {
            'idx_positions_exit_reason': 'positions',
            'idx_event_log_type': 'event_log',
            'idx_event_log_timestamp': 'event_log',
            'idx_event_log_position': 'event_log'
        }

        for idx_name, table in required_indexes.items():
            exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM pg_indexes
                    WHERE schemaname = 'monitoring'
                      AND indexname = $1
                )
            """, idx_name)

            if exists:
                print(f"‚úÖ {idx_name} –Ω–∞ {table}")
            else:
                print(f"‚ö†Ô∏è {idx_name} –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ)")

        # ========== REQUIREMENT 5: –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω—ã ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 5: –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è")
        print("=" * 70)

        migrations = await conn.fetch("""
            SELECT migration_name, applied_at
            FROM monitoring.schema_migrations
            ORDER BY applied_at
        """)

        expected_migrations = ['001_expand_exit_reason', '002_add_event_log', '003_add_sync_tracking']
        found_migrations = [m['migration_name'] for m in migrations]

        for mig in expected_migrations:
            if mig in found_migrations:
                applied = next(m for m in migrations if m['migration_name'] == mig)
                print(f"‚úÖ {mig}")
                print(f"   –ü—Ä–∏–º–µ–Ω–µ–Ω–∞: {applied['applied_at']}")
            else:
                print(f"‚ùå {mig} –ù–ï –ó–ê–ü–ò–°–ê–ù–ê")
                all_ok = False

        # ========== REQUIREMENT 6: –ù–µ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 6: –ù–µ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 70)

        total = await conn.fetchval("SELECT COUNT(*) FROM monitoring.positions")
        active = await conn.fetchval("SELECT COUNT(*) FROM monitoring.positions WHERE status = 'active'")

        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total} (–±—ã–ª–æ 133 –ø—Ä–∏ pre-flight)")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active} (–±—ã–ª–æ 9 –ø—Ä–∏ pre-flight)")

        if total >= 133 and active >= 9:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ)")

        # ========== REQUIREMENT 7: Backup —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ==========
        print("\n" + "=" * 70)
        print("REQUIREMENT 7: Backup —Å–æ–∑–¥–∞–Ω")
        print("=" * 70)

        import os
        backups = [f for f in os.listdir('.') if f.startswith('backup_monitoring_')]
        if backups:
            latest = sorted(backups)[-1]
            size = os.path.getsize(latest)
            print(f"‚úÖ Backup: {latest}")
            print(f"   –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
        else:
            print("‚ùå Backup –ù–ï –ù–ê–ô–î–ï–ù")
            all_ok = False

        # ========== –ò–¢–û–ì ==========
        print("\n" + "=" * 70)
        print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 70)

        if all_ok:
            print("\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´")
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ SCHEMA_CHANGES.md –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("‚úÖ Backup —Å–æ–∑–¥–∞–Ω")
            print("‚úÖ Rollback –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ")

        await conn.close()
        return all_ok

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    import sys
    success = asyncio.run(final_check())
    sys.exit(0 if success else 1)
