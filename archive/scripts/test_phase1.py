#!/usr/bin/env python3
"""
PHASE 1 TEST SCRIPT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AttributeError –±–∞–≥–æ–≤
"""
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/evgeniyyanvarskiy/PycharmProjects/TradingBot')

async def test_phase1():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç PHASE 1 fixes"""

    print("=" * 80)
    print("üß™ PHASE 1 TEST: AttributeError Fixes")
    print("=" * 80)
    print(f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    test_results = {
        'total': 0,
        'passed': 0,
        'failed': 0,
        'errors': []
    }

    # TEST 1: Import –º–æ–¥—É–ª–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫
    test_results['total'] += 1
    print("TEST 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
    try:
        from protection.trailing_stop import SmartTrailingStopManager, TrailingStopConfig
        from core.position_manager import PositionManager
        from core.exchange_manager import ExchangeManager
        print("‚úÖ PASSED: –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        test_results['passed'] += 1
    except Exception as e:
        print(f"‚ùå FAILED: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"Import error: {e}")
        return test_results

    # TEST 2: –°–æ–∑–¥–∞–Ω–∏–µ ExchangeManager (–º–æ–∫)
    test_results['total'] += 1
    print("\nTEST 2: –°–æ–∑–¥–∞–Ω–∏–µ ExchangeManager...")
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–æ–∫ ExchangeManager
        class MockExchange:
            def __init__(self, name):
                self.name = name
                self.exchange_name = name

        mock_binance = MockExchange('binance')
        mock_bybit = MockExchange('bybit')
        print("‚úÖ PASSED: Mock ExchangeManager —Å–æ–∑–¥–∞–Ω")
        test_results['passed'] += 1
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"ExchangeManager creation: {e}")
        return test_results

    # TEST 3: SmartTrailingStopManager - —Å exchange_name –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    test_results['total'] += 1
    print("\nTEST 3: SmartTrailingStopManager —Å exchange_name...")
    try:
        config = TrailingStopConfig()
        ts_manager = SmartTrailingStopManager(
            exchange_manager=mock_binance,
            config=config,
            exchange_name='binance'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ exchange_name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert hasattr(ts_manager, 'exchange_name'), "Missing exchange_name attribute"
        assert ts_manager.exchange_name == 'binance', f"Wrong exchange_name: {ts_manager.exchange_name}"

        print(f"‚úÖ PASSED: exchange_name = '{ts_manager.exchange_name}'")
        test_results['passed'] += 1
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"TrailingStopManager with exchange_name: {e}")

    # TEST 4: SmartTrailingStopManager - –±–µ–∑ exchange_name (fallback)
    test_results['total'] += 1
    print("\nTEST 4: SmartTrailingStopManager –±–µ–∑ exchange_name (fallback)...")
    try:
        config = TrailingStopConfig()
        ts_manager = SmartTrailingStopManager(
            exchange_manager=mock_bybit,
            config=config
            # exchange_name –ù–ï –ø–µ—Ä–µ–¥–∞–Ω
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ exchange_name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ fallback
        assert hasattr(ts_manager, 'exchange_name'), "Missing exchange_name attribute"
        assert ts_manager.exchange_name == 'bybit', f"Fallback failed: {ts_manager.exchange_name}"

        print(f"‚úÖ PASSED: Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç, exchange_name = '{ts_manager.exchange_name}'")
        test_results['passed'] += 1
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"TrailingStopManager fallback: {e}")

    # TEST 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ exchange.name (–Ω–µ .id)
    test_results['total'] += 1
    print("\nTEST 5: –î–æ—Å—Ç—É–ø –∫ exchange.name (–Ω–µ .id)...")
    try:
        ts_manager = SmartTrailingStopManager(
            exchange_manager=mock_binance,
            config=TrailingStopConfig(),
            exchange_name='binance'
        )

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ _cancel_protection_sl_if_binance (line 525)
        exchange_name = getattr(ts_manager.exchange, 'name', ts_manager.exchange_name)
        assert exchange_name == 'binance', f"Wrong exchange_name: {exchange_name}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .id
        has_id = hasattr(ts_manager.exchange, 'id')
        if has_id:
            print(f"‚ö†Ô∏è  WARNING: exchange.id exists, but we use exchange.name now")

        print(f"‚úÖ PASSED: exchange.name –¥–æ—Å—Ç—É–ø–µ–Ω = '{exchange_name}'")
        test_results['passed'] += 1
    except AttributeError as e:
        if 'id' in str(e):
            print(f"‚ùå FAILED: –ö–æ–¥ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç exchange.id: {e}")
        else:
            print(f"‚ùå FAILED: AttributeError: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"Exchange name access: {e}")
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"Exchange name access: {e}")

    # TEST 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ position_manager.py —Å–æ–∑–¥–∞–Ω–∏—è trailing_managers
    test_results['total'] += 1
    print("\nTEST 6: PositionManager —Å–æ–∑–¥–∞–Ω–∏–µ trailing_managers...")
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ position_manager.py (line 155-158)
        exchanges = {
            'binance': mock_binance,
            'bybit': mock_bybit
        }

        trailing_config = TrailingStopConfig()

        trailing_managers = {
            name: SmartTrailingStopManager(exchange, trailing_config, exchange_name=name)
            for name, exchange in exchanges.items()
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert 'binance' in trailing_managers, "Missing binance manager"
        assert 'bybit' in trailing_managers, "Missing bybit manager"
        assert trailing_managers['binance'].exchange_name == 'binance'
        assert trailing_managers['bybit'].exchange_name == 'bybit'

        print(f"‚úÖ PASSED: –û–±–∞ trailing_managers —Å–æ–∑–¥–∞–Ω—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ exchange_name")
        test_results['passed'] += 1
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        test_results['failed'] += 1
        test_results['errors'].append(f"PositionManager trailing_managers: {e}")

    return test_results


async def main():
    """Main test runner"""
    results = await test_phase1()

    print("\n" + "=" * 80)
    print("üìä TEST SUMMARY")
    print("=" * 80)
    print(f"Total tests:  {results['total']}")
    print(f"‚úÖ Passed:    {results['passed']}")
    print(f"‚ùå Failed:    {results['failed']}")

    if results['failed'] > 0:
        print("\n‚ùå ERRORS:")
        for error in results['errors']:
            print(f"   - {error}")

    success_rate = (results['passed'] / results['total'] * 100) if results['total'] > 0 else 0
    print(f"\nSuccess rate: {success_rate:.1f}%")

    if results['failed'] == 0:
        print("\n‚úÖ ‚úÖ ‚úÖ –í–°–ï –¢–ï–°–¢–´ –§–ê–ó–´ 1 –ü–†–û–ô–î–ï–ù–´! ‚úÖ ‚úÖ ‚úÖ")
        print("–ì–æ—Ç–æ–≤–æ –∫ LIVE —Ç–µ—Å—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n")
        return 0
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ LIVE —Ç–µ—Å—Ç–æ–º.\n")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
