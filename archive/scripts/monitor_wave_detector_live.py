#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è LIVE –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã Wave Detector –º–æ–¥—É–ª—è.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15+ –º–∏–Ω—É—Ç.

–ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–û–í–ï–†–ö–ò:
1. –í–æ–ª–Ω—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
2. –°–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
3. –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å SL
4. SL –æ—Ä–¥–µ—Ä–∞ –∏–º–µ—é—Ç reduceOnly=True (Binance) –∏–ª–∏ position-attached (Bybit)
"""

import subprocess
import time
import re
from datetime import datetime, timedelta
import json
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_COMMAND = ["python", "main.py", "--mode", "production"]
LOG_FILE = "wave_detector_live_diagnostic.log"
MONITOR_DURATION = 15 * 60 + 120  # 15 –º–∏–Ω—É—Ç + 2 –º–∏–Ω—É—Ç—ã –±—É—Ñ–µ—Ä
CHECK_INTERVAL = 1  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É


class WaveDetectorLiveMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.waves_detected = 0
        self.signals_received = 0
        self.signals_selected = 0
        self.signals_filtered = 0
        self.positions_opened = 0
        self.sl_orders_placed = 0
        self.errors = []
        self.warnings = []

        # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ reduceOnly
        self.sl_with_reduce_only = 0
        self.sl_without_reduce_only = 0

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
        self.patterns = {
            # Wave patterns
            'wave_detected': r'üåä Wave detected|Looking for wave|Wave \d+ complete',
            'wave_timestamp': r'Looking for wave with timestamp:\s*([0-9T:\-\+]+)',
            'signal_count': r'(\d+)\s+total signals',

            # Signal processing
            'top_selected': r'processing top (\d+)',
            'duplicate_filtered': r'(\d+)\s+duplicates',
            'signal_executed': r'Signal.*executed successfully|‚úÖ.*executed',

            # Position opening
            'position_opened': r'Position opened|üìà Position opened',
            'position_symbol': r'Position opened.*?([A-Z]+/USDT)',

            # Stop Loss - –ö–†–ò–¢–ò–ß–ù–û
            'sl_placed': r'Stop Loss (set|placed|created)|SL (set|placed|created)',
            'sl_price': r'Stop Loss.*?at\s+([0-9.]+)',
            'reduce_only_true': r'reduceOnly.*[Tt]rue|reduceOnly:\s*[Tt]rue',
            'position_attached': r'position-attached|position_attached|trading_stop',

            # Errors and warnings
            'error': r'ERROR|Error:|‚ùå',
            'warning': r'WARNING|‚ö†Ô∏è',

            # Exchange specific
            'binance_order': r'binance|Binance|BINANCE',
            'bybit_order': r'bybit|Bybit|BYBIT',
        }

        # Tracking
        self.last_wave_time = None
        self.wave_intervals = []

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
        print("=" * 80)
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üöÄ WAVE DETECTOR LIVE –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {' '.join(BOT_COMMAND)}")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {MONITOR_DURATION // 60} –º–∏–Ω—É—Ç")
        print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {LOG_FILE}\n")

        with open(LOG_FILE, 'w') as log_file:
            log_file.write(f"=== WAVE DETECTOR LIVE DIAGNOSTIC START: {datetime.now()} ===\n\n")

        self.bot_process = subprocess.Popen(
            BOT_COMMAND,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )

        return self.bot_process

    def analyze_log_line(self, line):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        line_lower = line.lower()

        # === WAVE DETECTION ===
        if re.search(self.patterns['wave_detected'], line, re.IGNORECASE):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –≤–æ–ª–Ω—ã
            ts_match = re.search(self.patterns['wave_timestamp'], line)
            if ts_match:
                wave_ts = ts_match.group(1)
                self.waves_detected += 1

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                now = datetime.now()
                if self.last_wave_time:
                    interval = (now - self.last_wave_time).total_seconds() / 60
                    self.wave_intervals.append(interval)
                    print(f"\n[{now.strftime('%H:%M:%S')}] üåä –í–û–õ–ù–ê #{self.waves_detected}")
                    print(f"  ‚îú‚îÄ Timestamp: {wave_ts}")
                    print(f"  ‚îú‚îÄ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π: {interval:.1f} –º–∏–Ω—É—Ç")
                else:
                    print(f"\n[{now.strftime('%H:%M:%S')}] üåä –í–û–õ–ù–ê #{self.waves_detected} (–ø–µ—Ä–≤–∞—è)")
                    print(f"  ‚îî‚îÄ Timestamp: {wave_ts}")

                self.last_wave_time = now

        # === SIGNAL PROCESSING ===
        if re.search(r'total signals', line):
            match = re.search(self.patterns['signal_count'], line)
            if match:
                count = int(match.group(1))
                self.signals_received += count
                print(f"  ‚îú‚îÄ –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {count}")

        if re.search(r'processing top', line):
            match = re.search(self.patterns['top_selected'], line)
            if match:
                count = int(match.group(1))
                self.signals_selected = count
                print(f"  ‚îú‚îÄ –û—Ç–æ–±—Ä–∞–Ω–æ —Ç–æ–ø: {count}")

        if re.search(r'duplicate', line_lower):
            match = re.search(r'(\d+)', line)
            if match:
                count = int(match.group(1))
                self.signals_filtered += count
                print(f"  ‚îú‚îÄ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {count}")

        # === POSITION OPENING ===
        if re.search(self.patterns['signal_executed'], line, re.IGNORECASE):
            self.positions_opened += 1

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª
            symbol_match = re.search(r'([A-Z]+/USDT|[A-Z]+USDT)', line)
            symbol = symbol_match.group(1) if symbol_match else 'UNKNOWN'

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏—Ä–∂—É
            exchange = 'UNKNOWN'
            if re.search(self.patterns['binance_order'], line):
                exchange = 'Binance'
            elif re.search(self.patterns['bybit_order'], line):
                exchange = 'Bybit'

            print(f"  ‚îú‚îÄ ‚úÖ –ü–æ–∑–∏—Ü–∏—è #{self.positions_opened} –æ—Ç–∫—Ä—ã—Ç–∞: {symbol} ({exchange})")

        # === STOP LOSS - –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
        if re.search(self.patterns['sl_placed'], line, re.IGNORECASE):
            self.sl_orders_placed += 1

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É SL
            price_match = re.search(self.patterns['sl_price'], line)
            sl_price = price_match.group(1) if price_match else 'N/A'

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏—Ä–∂—É
            exchange = 'UNKNOWN'
            if re.search(self.patterns['binance_order'], line):
                exchange = 'Binance'
            elif re.search(self.patterns['bybit_order'], line):
                exchange = 'Bybit'

            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ reduceOnly
            has_reduce_only = bool(re.search(self.patterns['reduce_only_true'], line))
            is_position_attached = bool(re.search(self.patterns['position_attached'], line))

            if has_reduce_only or is_position_attached:
                self.sl_with_reduce_only += 1
                status = "‚úÖ reduceOnly=True" if has_reduce_only else "‚úÖ position-attached"
                print(f"  ‚îî‚îÄ üõ°Ô∏è  SL #{self.sl_orders_placed} —Ä–∞–∑–º–µ—â–µ–Ω: {sl_price} ({exchange}) - {status}")
            else:
                self.sl_without_reduce_only += 1
                warning = f"‚ö†Ô∏è  WARNING: SL #{self.sl_orders_placed} –ë–ï–ó reduceOnly! Exchange: {exchange}, Price: {sl_price}"
                print(f"  ‚îî‚îÄ {warning}")
                self.warnings.append(warning)

        # === ERRORS ===
        if re.search(self.patterns['error'], line):
            error_snippet = line.strip()[:150]
            self.errors.append(error_snippet)
            if len(self.errors) <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚îî‚îÄ ‚ùå –û–®–ò–ë–ö–ê: {error_snippet}")

    def monitor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        bot_process = self.start_bot()

        with open(LOG_FILE, 'a') as log_file:
            try:
                end_time = time.time() + MONITOR_DURATION

                while time.time() < end_time:
                    # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –±–æ—Ç–∞
                    line = bot_process.stdout.readline()
                    if line:
                        log_file.write(line)
                        log_file.flush()
                        self.analyze_log_line(line)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
                    if bot_process.poll() is not None:
                        print(f"\n‚ùå –ë–û–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–û (–∫–æ–¥: {bot_process.returncode})")
                        break

                    time.sleep(0.1)

                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                print(f"\n[{datetime.now().strftime('%H:%M:%S')}] ‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ")

            except KeyboardInterrupt:
                print(f"\n[{datetime.now().strftime('%H:%M:%S')}] ‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            finally:
                bot_process.terminate()
                try:
                    bot_process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    bot_process.kill()
                print(f"[{datetime.now().strftime('%H:%M:%S')}] üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        duration = (datetime.now() - self.start_time).total_seconds() / 60

        print("\n" + "=" * 80)
        print("üìä LIVE –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ - WAVE DETECTOR MODULE")
        print("=" * 80)

        print(f"\n‚è±Ô∏è  –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {duration:.1f} –º–∏–Ω—É—Ç")
        print(f"   –°—Ç–∞—Ä—Ç: {self.start_time.strftime('%H:%M:%S')}")
        print(f"   –§–∏–Ω–∏—à: {datetime.now().strftime('%H:%M:%S')}")

        # === –í–û–õ–ù–´ ===
        print(f"\nüåä –û–ë–†–ê–ë–û–¢–ö–ê –í–û–õ–ù:")
        print(f"   –í–æ–ª–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.waves_detected}")
        expected_waves = max(1, int(duration / 15))
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –≤–æ–ª–Ω: ~{expected_waves} (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω)")

        if self.waves_detected == 0:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–Ω–æ–π –≤–æ–ª–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        elif self.waves_detected < expected_waves:
            print(f"   ‚ö†Ô∏è  WARNING: –ú–µ–Ω—å—à–µ –≤–æ–ª–Ω —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
        else:
            print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
        if self.wave_intervals:
            avg_interval = sum(self.wave_intervals) / len(self.wave_intervals)
            min_interval = min(self.wave_intervals)
            max_interval = max(self.wave_intervals)
            print(f"\n   –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏:")
            print(f"   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π: {avg_interval:.1f} –º–∏–Ω—É—Ç")
            print(f"   ‚îú‚îÄ –ú–∏–Ω–∏–º—É–º: {min_interval:.1f} –º–∏–Ω—É—Ç")
            print(f"   ‚îî‚îÄ –ú–∞–∫—Å–∏–º—É–º: {max_interval:.1f} –º–∏–Ω—É—Ç")

            if abs(avg_interval - 15) > 2:
                print(f"   ‚ö†Ô∏è  WARNING: –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç 15 –º–∏–Ω—É—Ç!")

        # === –°–ò–ì–ù–ê–õ–´ ===
        print(f"\nüì° –°–ò–ì–ù–ê–õ–´:")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {self.signals_received}")
        print(f"   –û—Ç–æ–±—Ä–∞–Ω–æ (—Ç–æ–ø): {self.signals_selected}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {self.signals_filtered}")

        if self.signals_received > 0:
            filter_rate = (self.signals_filtered / self.signals_received) * 100 if self.signals_received else 0
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filter_rate:.1f}%")

        # === –†–ê–ó–ú–ï–©–ï–ù–ò–ï –û–†–î–ï–†–û–í ===
        print(f"\nüìù –†–ê–ó–ú–ï–©–ï–ù–ò–ï –û–†–î–ï–†–û–í:")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {self.positions_opened}")
        print(f"   SL –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {self.sl_orders_placed}")

        # === –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SL ===
        print(f"\nüî¥ –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Stop-Loss –æ—Ä–¥–µ—Ä–∞")
        print(f"   SL —Å reduceOnly/position-attached: {self.sl_with_reduce_only}")
        print(f"   SL –ë–ï–ó reduceOnly: {self.sl_without_reduce_only}")

        if self.positions_opened != self.sl_orders_placed:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∏ SL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            print(f"      –†–∞–∑–Ω–∏—Ü–∞: {abs(self.positions_opened - self.sl_orders_placed)}")
        else:
            print(f"   ‚úÖ –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–µ—Ç SL")

        if self.sl_without_reduce_only > 0:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã SL –ë–ï–ó reduceOnly!")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.sl_without_reduce_only}")
        else:
            print(f"   ‚úÖ –í—Å–µ SL –∏–º–µ—é—Ç reduceOnly –∏–ª–∏ position-attached")

        # === –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ò –û–®–ò–ë–ö–ò ===
        print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {len(self.warnings)}")
        for i, warning in enumerate(self.warnings[:10], 1):
            print(f"   {i}. {warning}")

        print(f"\n‚ùå –û–®–ò–ë–ö–ò: {len(self.errors)}")
        for i, error in enumerate(self.errors[:10], 1):
            print(f"   {i}. {error[:120]}")

        # === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if self.waves_detected == 0:
            print(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {BOT_COMMAND}")

        if self.positions_opened == 0 and self.signals_received > 0:
            print(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è")

        if self.positions_opened != self.sl_orders_placed:
            print(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã SL - —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!")

        if self.sl_without_reduce_only > 0:
            print(f"   üî¥ –ö–†–ò–¢–ò–ß–ù–û: SL –±–µ–∑ reduceOnly –ë–õ–û–ö–ò–†–£–ï–¢ –ú–ê–†–ñ–£ - —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!")

        if len(self.warnings) > 0:
            print(f"   üü° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ")

        if len(self.errors) > 0:
            print(f"   üü° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ")

        if (self.waves_detected > 0 and self.positions_opened > 0 and
            self.positions_opened == self.sl_orders_placed and
            self.sl_without_reduce_only == 0):
            print(f"   üü¢ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

        print(f"\nüìÑ –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {LOG_FILE}")
        print("=" * 80 + "\n")

        # === –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===
        print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")

        critical_issues = 0
        if self.waves_detected == 0:
            critical_issues += 1
        if self.positions_opened != self.sl_orders_placed:
            critical_issues += 1
        if self.sl_without_reduce_only > 0:
            critical_issues += 1

        if critical_issues == 0:
            print("   ‚úÖ PASS - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production")
        elif critical_issues <= 2:
            print(f"   ‚ö†Ô∏è  PARTIAL - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {critical_issues} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        else:
            print(f"   ‚ùå FAIL - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {critical_issues} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")

        print()


if __name__ == "__main__":
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  WAVE DETECTOR LIVE DIAGNOSTIC TOOL                          ‚ïë
‚ïë  –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã Wave Detector –º–æ–¥—É–ª—è              ‚ïë
‚ïë  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15+ –º–∏–Ω—É—Ç                                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    monitor = WaveDetectorLiveMonitor()

    try:
        monitor.monitor()
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    finally:
        monitor.generate_report()
