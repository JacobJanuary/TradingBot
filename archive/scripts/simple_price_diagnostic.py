#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ü–µ–Ω –¥–ª—è –æ—à–∏–±–∫–∏ 170193
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ Bybit testnet price=0 –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏
"""
import asyncio
import ccxt.async_support as ccxt
from decimal import Decimal
import os
from dotenv import load_dotenv

load_dotenv()

async def check_price_issue():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö —Å –æ—à–∏–±–∫–æ–π 170193"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit testnet
    exchange = ccxt.bybit({
        'apiKey': os.getenv('BYBIT_TESTNET_API_KEY'),
        'secret': os.getenv('BYBIT_TESTNET_SECRET'),
        'enableRateLimit': True,
        'options': {'defaultType': 'linear'}
    })
    exchange.set_sandbox_mode(True)

    # –°–∏–º–≤–æ–ª—ã –∏–∑ –ª–æ–≥–æ–≤ —Å –æ—à–∏–±–∫–æ–π 170193 (–ø—Ä–∏–º–µ—Ä—ã)
    test_symbols = [
        'XDC/USDT:USDT',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª —Å –æ—à–∏–±–∫–æ–π –∏–∑ –ª–æ–≥–æ–≤
        'HNT/USDT:USDT',
        'AUCTION/USDT:USDT',
        'GALA/USDT:USDT',
        'ZEN/USDT:USDT'
    ]

    print("=" * 70)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ù - Bybit Testnet")
    print("=" * 70)

    results = {
        'zero_prices': [],
        'valid_prices': [],
        'precision_issues': []
    }

    for symbol in test_symbols:
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await exchange.fetch_ticker(symbol)
            current_price = ticker['last']

            # –ü–æ–ª—É—á–∏—Ç—å market info
            markets = await exchange.load_markets()
            market = markets[symbol]
            price_precision = market['precision']['price']
            min_price = market['limits']['price']['min']

            print(f"\nüìä {symbol}")
            print(f"   Current Price: {current_price}")
            print(f"   Price Precision: {price_precision}")
            print(f"   Min Price: {min_price}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞?
            if current_price == 0 or current_price is None:
                print(f"   ‚ùå ZERO PRICE - testnet –±–µ–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                results['zero_prices'].append(symbol)
            else:
                results['valid_prices'].append(symbol)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                decimal_price = Decimal(str(current_price))

                # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–∫ –≤ aged_position_manager.py
                distance = Decimal('0.015')  # 1.5%
                target_price = decimal_price * (Decimal('1') - distance)

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ (–∫–∞–∫ —Å–µ–π—á–∞—Å –≤ –∫–æ–¥–µ)
                rounded_down = float(target_price)

                # –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                from math import log10
                if price_precision > 0:
                    decimals = int(-log10(price_precision))
                else:
                    decimals = 8  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                rounded_precise = round(float(target_price), decimals)

                print(f"   Target Price (calc): {target_price}")
                print(f"   Rounded Down: {rounded_down}")
                print(f"   Rounded Precise: {rounded_precise}")
                print(f"   Min Allowed: {min_price}")

                if rounded_precise < min_price:
                    print(f"   ‚ö†Ô∏è PRECISION ISSUE - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ < min_price")
                    results['precision_issues'].append(symbol)
                else:
                    print(f"   ‚úÖ OK - –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º")

        except Exception as e:
            print(f"\n‚ùå {symbol}: –û—à–∏–±–∫–∞ - {e}")

    await exchange.close()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 70)

    print(f"\nüî¥ Zero Prices (testnet –±–µ–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏): {len(results['zero_prices'])}")
    for s in results['zero_prices']:
        print(f"   - {s}")

    print(f"\nüü° Precision Issues (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ): {len(results['precision_issues'])}")
    for s in results['precision_issues']:
        print(f"   - {s}")

    print(f"\nüü¢ Valid Prices (–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º): {len(results['valid_prices']) - len(results['precision_issues'])}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("\n" + "=" * 70)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
    print("=" * 70)

    if len(results['zero_prices']) > len(results['precision_issues']):
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: Testnet –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç price=0")
        print("   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã –≤ _get_current_price()")
        print("   –§–∞–π–ª: core/aged_position_manager.py")
        print("   –í—Ä–µ–º—è: 15 –º–∏–Ω—É—Ç")
    elif len(results['precision_issues']) > 0:
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –Ω–∏–∂–µ min_price")
        print("   –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ceil –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è buy orders")
        print("   –§–∞–π–ª: core/aged_position_manager.py")
        print("   –í—Ä–µ–º—è: 20 –º–∏–Ω—É—Ç")
    else:
        print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ä–µ–¥–∫–æ –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö")

    print("\n" + "=" * 70)

if __name__ == '__main__':
    asyncio.run(check_price_issue())
