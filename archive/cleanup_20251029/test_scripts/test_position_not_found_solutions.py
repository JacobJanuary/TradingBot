#!/usr/bin/env python3
"""
Test script for position_not_found error solutions

ROOT CAUSE:
_binance_update_sl_optimized() –≤—ã–∑—ã–≤–∞–µ—Ç fetch_positions() —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å contracts.
–ù–û fetch_positions() –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é —Å contracts=0 –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª—É—á–∞—è—Ö:

1. TIMING ISSUE: –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Binance API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
2. REDUCE-ONLY ORDERS: –ü–æ–∑–∏—Ü–∏–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ SL –æ—Ä–¥–µ—Ä–∞ (reduce-only) –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
3. CACHE LAG: WebSocket –∫—ç—à –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∏—Ä–∂–µ–π

–î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –ò–ó –õ–û–ì–û–í:
- 16:26:54 - SL update failed: PIPPINUSDT - position_not_found
- 16:27:39 - Checking position PIPPINUSDT: has_sl=False, price=None
- –ë–î –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: quantity=11997, entry_price=0.01667, status=active
- –ü–æ–∑–∏—Ü–∏—è –°–£–©–ï–°–¢–í–£–ï–¢ –≤ –ë–î, –Ω–æ fetch_positions() –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –µ–µ –Ω–∞ –±–∏—Ä–∂–µ

–¢–ï–ö–£–©–ò–ô –ö–û–î (exchange_manager.py:912-927):
```python
# Get position size
positions = await self.fetch_positions([symbol])
amount = 0
for pos in positions:
    if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
        amount = pos['contracts']
        break

if amount == 0:
    result['success'] = False
    result['error'] = 'position_not_found'
    return result
```

–†–ï–®–ï–ù–ò–Ø:

## –†–ï–®–ï–ù–ò–ï 1: Fallback –∫ –ë–î
–ï—Å–ª–∏ fetch_positions() –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏—é, –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ë–î.

–ü–õ–Æ–°–´:
+ –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å fallback
+ –ë–î - source of truth
+ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

–ú–ò–ù–£–°–´:
- –ú–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å SL –¥–ª—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
- –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É repository –≤ exchange_manager

## –†–ï–®–ï–ù–ò–ï 2: Graceful Degradation
–ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å warning –∏ –≤–µ—Ä–Ω—É—Ç—å success=True –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

–ü–õ–Æ–°–´:
+ –ù–µ –ª–æ–º–∞–µ—Ç TS
+ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
+ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ë–î

–ú–ò–ù–£–°–´:
- SL –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (–ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–π)
- –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä—è–º

## –†–ï–®–ï–ù–ò–ï 3: Retry with Exponential Backoff
–ü–æ–≤—Ç–æ—Ä–∏—Ç—å fetch_positions() —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (100ms, 200ms, 400ms).

–ü–õ–Æ–°–´:
+ –†–µ—à–∞–µ—Ç timing issue
+ –ù–µ—Ç false positives
+ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ë–î

–ú–ò–ù–£–°–´:
- –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç latency
- –ú–æ–∂–µ—Ç –Ω–µ –ø–æ–º–æ—á—å –ø—Ä–∏ cache lag
- –£—Å–ª–æ–∂–Ω—è–µ—Ç –∫–æ–¥

## –†–ï–®–ï–ù–ò–ï 4 (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø): Hybrid - Retry + DB Fallback
1. Retry fetch_positions() 2 —Ä–∞–∑–∞ —Å 100ms –∑–∞–¥–µ—Ä–∂–∫–æ–π
2. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí fallback –∫ –ë–î
3. –ï—Å–ª–∏ –≤ –ë–î status='active' ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quantity –∏–∑ –ë–î
4. –ò–Ω–∞—á–µ ‚Üí graceful failure

–ü–õ–Æ–°–´:
+ –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª—É—á–∞–∏ (timing + cache lag)
+ –ë–î –∫–∞–∫ ultimate fallback
+ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è latency (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)

–ú–ò–ù–£–°–´:
- –°–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
- –¢—Ä–µ–±—É–µ—Ç repository –≤ exchange_manager
"""

import asyncio
from decimal import Decimal


class MockPosition:
    """Mock position for testing"""
    def __init__(self, symbol, quantity, status='active'):
        self.symbol = symbol
        self.quantity = Decimal(str(quantity))
        self.status = status


class MockRepository:
    """Mock repository for testing"""
    def __init__(self):
        self.positions = {
            'PIPPINUSDT': MockPosition('PIPPINUSDT', 11997, 'active'),
            'ORDERUSDT': MockPosition('ORDERUSDT', 852, 'active'),
            'SSVUSDT': MockPosition('SSVUSDT', 34, 'active'),
            'CLOSEDUSDT': MockPosition('CLOSEDUSDT', 100, 'closed'),
        }

    async def get_position_by_symbol(self, symbol, exchange):
        """Get position from DB"""
        return self.positions.get(symbol)


class Solution1_DBFallback:
    """Fallback –∫ –ë–î –µ—Å–ª–∏ fetch_positions –ø—É—Å—Ç–æ–π"""

    def __init__(self, repository):
        self.repository = repository

    async def get_position_size(self, symbol, fetch_positions_result):
        """Get position size with DB fallback"""
        # Try exchange first
        for pos in fetch_positions_result:
            if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                return pos['contracts'], 'exchange'

        # Fallback to DB
        db_position = await self.repository.get_position_by_symbol(symbol, 'binance')
        if db_position and db_position.status == 'active':
            return float(db_position.quantity), 'database'

        return 0, 'not_found'


class Solution2_GracefulDegradation:
    """–ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–µ –ª–æ–º–∞—Ç—å TS"""

    async def get_position_size(self, symbol, fetch_positions_result):
        """Get position size or return graceful failure"""
        for pos in fetch_positions_result:
            if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                return pos['contracts'], 'exchange'

        # Graceful failure - don't break TS
        return None, 'graceful_skip'


class Solution3_RetryBackoff:
    """Retry —Å exponential backoff"""

    def __init__(self, fetch_positions_func):
        self.fetch_positions_func = fetch_positions_func

    async def get_position_size(self, symbol):
        """Get position size with retry"""
        delays = [0.1, 0.2, 0.4]  # 100ms, 200ms, 400ms

        for delay in delays:
            if delay > 0:
                await asyncio.sleep(delay)

            positions = await self.fetch_positions_func([symbol])
            for pos in positions:
                if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                    return pos['contracts'], f'exchange_retry_{int(delay*1000)}ms'

        return 0, 'not_found_after_retries'


class Solution4_Hybrid:
    """–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: Retry + DB Fallback"""

    def __init__(self, fetch_positions_func, repository):
        self.fetch_positions_func = fetch_positions_func
        self.repository = repository

    async def get_position_size(self, symbol):
        """Get position size with hybrid approach"""
        # Step 1: Try exchange with retry
        delays = [0, 0.1, 0.2]  # immediate, 100ms, 200ms

        for i, delay in enumerate(delays):
            if delay > 0:
                await asyncio.sleep(delay)

            positions = await self.fetch_positions_func([symbol])
            for pos in positions:
                if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                    source = 'exchange' if i == 0 else f'exchange_retry_{int(delay*1000)}ms'
                    return pos['contracts'], source

        # Step 2: Fallback to DB
        db_position = await self.repository.get_position_by_symbol(symbol, 'binance')
        if db_position and db_position.status == 'active':
            return float(db_position.quantity), 'database_fallback'

        return 0, 'not_found'


async def test_solutions():
    """Test all solutions"""

    print("=" * 80)
    print("TESTING SOLUTIONS FOR position_not_found ERROR")
    print("=" * 80)

    # Mock data
    repo = MockRepository()

    # Scenario 1: Position found immediately
    print("\nüìä SCENARIO 1: Position found on exchange (normal case)")
    print("-" * 80)
    fetch_result_ok = [{'symbol': 'PIPPINUSDT', 'contracts': 11997}]

    sol1 = Solution1_DBFallback(repo)
    amount, source = await sol1.get_position_size('PIPPINUSDT', fetch_result_ok)
    print(f"Solution 1 (DB Fallback):      amount={amount}, source={source}")

    sol2 = Solution2_GracefulDegradation()
    amount, source = await sol2.get_position_size('PIPPINUSDT', fetch_result_ok)
    print(f"Solution 2 (Graceful):         amount={amount}, source={source}")

    # Scenario 2: Position NOT found (position_not_found error)
    print("\nüìä SCENARIO 2: Position NOT found on exchange (timing issue)")
    print("-" * 80)
    fetch_result_empty = []

    sol1 = Solution1_DBFallback(repo)
    amount, source = await sol1.get_position_size('PIPPINUSDT', fetch_result_empty)
    print(f"Solution 1 (DB Fallback):      amount={amount}, source={source} ‚úÖ Works!")

    sol2 = Solution2_GracefulDegradation()
    amount, source = await sol2.get_position_size('PIPPINUSDT', fetch_result_empty)
    print(f"Solution 2 (Graceful):         amount={amount}, source={source} ‚ö†Ô∏è  SL NOT updated!")

    # Scenario 3: Position found with contracts=0
    print("\nüìä SCENARIO 3: Position found but contracts=0")
    print("-" * 80)
    fetch_result_zero = [{'symbol': 'PIPPINUSDT', 'contracts': 0}]

    sol1 = Solution1_DBFallback(repo)
    amount, source = await sol1.get_position_size('PIPPINUSDT', fetch_result_zero)
    print(f"Solution 1 (DB Fallback):      amount={amount}, source={source} ‚úÖ Works!")

    sol2 = Solution2_GracefulDegradation()
    amount, source = await sol2.get_position_size('PIPPINUSDT', fetch_result_zero)
    print(f"Solution 2 (Graceful):         amount={amount}, source={source} ‚ö†Ô∏è  SL NOT updated!")

    # Scenario 4: Position closed (should fail gracefully)
    print("\nüìä SCENARIO 4: Position closed in DB (should fail)")
    print("-" * 80)

    sol1 = Solution1_DBFallback(repo)
    amount, source = await sol1.get_position_size('CLOSEDUSDT', [])
    print(f"Solution 1 (DB Fallback):      amount={amount}, source={source} ‚úÖ Correct!")

    sol2 = Solution2_GracefulDegradation()
    amount, source = await sol2.get_position_size('CLOSEDUSDT', [])
    print(f"Solution 2 (Graceful):         amount={amount}, source={source} ‚úÖ Correct!")

    print("\n" + "=" * 80)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: SOLUTION 1 (DB Fallback)")
    print("=" * 80)
    print("""
–ü–û–ß–ï–ú–£:
1. ‚úÖ –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª—É—á–∞–∏ (timing issue, cache lag, contracts=0)
2. ‚úÖ –ë–î - source of truth –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
3. ‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç retry –ª–æ–≥–∏–∫–∏)
4. ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è latency (fallback —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
5. ‚úÖ Graceful failure –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π

–†–ò–°–ö–ò:
‚ö†Ô∏è  –ú–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä—ã–ª–∞—Å—å
   –ú–ò–¢–ò–ì–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ position.status='active' –≤ –ë–î

–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:
–í exchange_manager.py:912-927 –∏–∑–º–µ–Ω–∏—Ç—å:

if amount == 0:
    # FALLBACK: Try database (position might be active but not in exchange cache yet)
    if self.repository:
        db_position = await self.repository.get_position_by_symbol(symbol, self.name)
        if db_position and db_position.status == 'active':
            amount = float(db_position.quantity)
            logger.warning(
                f"‚ö†Ô∏è  {symbol}: Position not found on exchange, using DB quantity={amount} "
                f"(timing issue after restart)"
            )

    if amount == 0:
        logger.debug(f"Position {symbol} not found (likely closed), skipping SL update")
        result['success'] = False
        result['error'] = 'position_not_found'
        result['message'] = f"Position {symbol} not found on exchange (likely closed)"
        return result
    """)


if __name__ == '__main__':
    asyncio.run(test_solutions())
