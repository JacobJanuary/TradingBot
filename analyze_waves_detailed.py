#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –≤–æ–ª–Ω—É, –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é, –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É
"""

import re
from datetime import datetime
from collections import defaultdict

# –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
with open('logs/trading_bot.log', 'r') as f:
    all_lines = f.readlines()

# –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ä—Ç
last_start_idx = None
for i, line in enumerate(all_lines):
    if 'üöÄ Starting trading bot' in line:
        last_start_idx = i

if last_start_idx is None:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    exit(1)

lines = all_lines[last_start_idx:]
start_time = lines[0].split()[0] + " " + lines[0].split()[1].split(',')[0]
end_time = lines[-1].split()[0] + " " + lines[-1].split()[1].split(',')[0]

print("="*100)
print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–û–õ–ù –° –ü–û–°–õ–ï–î–ù–ï–ì–û –°–¢–ê–†–¢–ê –ë–û–¢–ê")
print("="*100)
print()
print(f"‚è∞ –ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã:")
print(f"   –°—Ç–∞—Ä—Ç:  {start_time}")
print(f"   –ö–æ–Ω–µ—Ü:  {end_time}")
print(f"   –°—Ç—Ä–æ–∫:  {len(lines):,}")
print()

# –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ª–Ω—ã
waves = []
current_wave = None

for i, line in enumerate(lines):
    # –ù–∞—á–∞–ª–æ –≤–æ–ª–Ω—ã
    if 'üåä Starting wave processing' in line:
        match = re.search(r'(\d+) signals at timestamp (\S+)', line)
        if match:
            signal_count = int(match.group(1))
            timestamp = match.group(2)
            wave_time = line.split()[0] + " " + line.split()[1].split(',')[0]

            current_wave = {
                'time': wave_time,
                'timestamp': timestamp,
                'total_signals': signal_count,
                'signals': [],
                'positions_opened': [],
                'positions_failed': [],
                'start_line': i
            }
            waves.append(current_wave)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    elif current_wave and 'üìà Executing signal' in line:
        match = re.search(r'signal (\d+)/(\d+): (\w+)', line)
        if match:
            sig_num = int(match.group(1))
            total = int(match.group(2))
            symbol = match.group(3)

            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª–∏
            if i+1 < len(lines):
                next_line = lines[i+1]
                match2 = re.search(r'#(\d+): (\w+) on (\w+) \(week: ([\d.]+), month: ([\d.]+)\)', next_line)
                if match2:
                    current_wave['signals'].append({
                        'num': sig_num,
                        'symbol': symbol,
                        'signal_id': int(match2.group(1)),
                        'exchange': match2.group(3),
                        'week_score': float(match2.group(4)),
                        'month_score': float(match2.group(5)),
                        'status': 'processing'
                    })

    # –£—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    elif current_wave and 'position_created:' in line:
        match = re.search(r"'symbol': '(\w+)'.*'exchange': '(\w+)'.*'side': '(\w+)'.*'entry_price': ([\d.]+)", line)
        if match:
            symbol = match.group(1)
            exchange = match.group(2)
            side = match.group(3)
            entry_price = float(match.group(4))

            current_wave['positions_opened'].append({
                'symbol': symbol,
                'exchange': exchange,
                'side': side,
                'entry_price': entry_price,
                'time': line.split()[0] + " " + line.split()[1].split(',')[0]
            })

            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞
            for sig in current_wave['signals']:
                if sig['symbol'] == symbol:
                    sig['status'] = 'opened'
                    sig['entry_price'] = entry_price
                    sig['side'] = side

    # –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
    elif current_wave and ('Error opening position' in line or 'Position creation rolled back' in line):
        match = re.search(r'position for (\w+):(.*)', line)
        if match:
            symbol = match.group(1)
            error = match.group(2).strip()

            current_wave['positions_failed'].append({
                'symbol': symbol,
                'error': error[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                'time': line.split()[0] + " " + line.split()[1].split(',')[0]
            })

            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞
            for sig in current_wave['signals']:
                if sig['symbol'] == symbol:
                    sig['status'] = 'failed'
                    sig['error'] = error[:80]

# –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
print("="*100)
print(f"üìä –í–°–ï–ì–û –í–û–õ–ù: {len(waves)}")
print("="*100)
print()

total_signals = sum(w['total_signals'] for w in waves)
total_opened = sum(len(w['positions_opened']) for w in waves)
total_failed = sum(len(w['positions_failed']) for w in waves)

print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:      {total_signals}")
print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ:     {total_opened}")
print(f"   –ü–æ–∑–∏—Ü–∏–π –ù–ï –æ—Ç–∫—Ä—ã—Ç–æ:  {total_failed}")
if total_signals > 0:
    print(f"   Success Rate:        {total_opened/total_signals*100:.1f}%")
print()

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã
for wave_num, wave in enumerate(waves, 1):
    print("="*100)
    print(f"üåä –í–û–õ–ù–ê #{wave_num}")
    print("="*100)
    print()

    print(f"‚è∞ –í—Ä–µ–º—è:      {wave['time']}")
    print(f"üìÖ Timestamp:  {wave['timestamp']}")
    print(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤:   {wave['total_signals']}")
    print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ:    {len(wave['positions_opened'])}")
    print(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ:   {len(wave['positions_failed'])}")
    print()

    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–≥–Ω–∞–ª—É
    if wave['signals']:
        print(f"üìã –î–ï–¢–ê–õ–ò –ü–û –°–ò–ì–ù–ê–õ–ê–ú:")
        print()

        for sig in wave['signals']:
            status_emoji = "‚úÖ" if sig['status'] == 'opened' else "‚ùå" if sig['status'] == 'failed' else "‚è≥"
            print(f"   {status_emoji} –°–∏–≥–Ω–∞–ª #{sig['num']}/{wave['total_signals']}: {sig['symbol']}")
            print(f"      ID:       #{sig['signal_id']}")
            print(f"      –ë–∏—Ä–∂–∞:    {sig['exchange']}")
            print(f"      Scores:   week={sig['week_score']}, month={sig['month_score']}")

            if sig['status'] == 'opened':
                print(f"      –°—Ç–∞—Ç—É—Å:   –û–¢–ö–†–´–¢–ê")
                print(f"      –°—Ç–æ—Ä–æ–Ω–∞:  {sig.get('side', 'N/A')}")
                print(f"      –¶–µ–Ω–∞:     {sig.get('entry_price', 'N/A')}")
            elif sig['status'] == 'failed':
                print(f"      –°—Ç–∞—Ç—É—Å:   –û–¢–ö–ê–ó")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞:  {sig.get('error', 'Unknown')}")
            else:
                print(f"      –°—Ç–∞—Ç—É—Å:   {sig['status']}")
            print()

    # –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if wave['positions_opened']:
        print(f"‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
        print()
        for pos in wave['positions_opened']:
            print(f"   ‚Ä¢ {pos['symbol']} ({pos['exchange']})")
            print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['side']}")
            print(f"     Entry Price: {pos['entry_price']}")
            print(f"     –í—Ä–µ–º—è:       {pos['time']}")
            print()

    # –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    if wave['positions_failed']:
        print(f"‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ü–û–ü–´–¢–ö–ò:")
        print()
        for fail in wave['positions_failed']:
            print(f"   ‚Ä¢ {fail['symbol']}")
            print(f"     –û—à–∏–±–∫–∞: {fail['error']}")
            print(f"     –í—Ä–µ–º—è:  {fail['time']}")
            print()

    print()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
print("="*100)
print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö")
print("="*100)
print()

error_types = defaultdict(int)
for wave in waves:
    for fail in wave['positions_failed']:
        error = fail['error']
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if 'Max positions limit' in error:
            error_types['Max positions limit'] += 1
        elif 'already exists' in error:
            error_types['Position already exists'] += 1
        elif 'Min notional' in error or 'minimum' in error.lower():
            error_types['Minimum order size'] += 1
        elif 'retCode' in error:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
            match = re.search(r'retCode["\']?:(\d+)', error)
            if match:
                code = match.group(1)
                error_types[f'Bybit error {code}'] += 1
            else:
                error_types['Bybit error (unknown)'] += 1
        elif 'Entry order failed' in error:
            error_types['Entry order failed'] += 1
        else:
            error_types['Other'] += 1

if error_types:
    print("–¢–æ–ø-10 —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:")
    for error_type, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   [{count:3d}x] {error_type}")
    print()
else:
    print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    print()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
print("="*100)
print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ò–†–ñ–ê–ú")
print("="*100)
print()

by_exchange = defaultdict(int)
for wave in waves:
    for pos in wave['positions_opened']:
        by_exchange[pos['exchange']] += 1

if by_exchange:
    for exchange in sorted(by_exchange.keys()):
        print(f"   {exchange}: {by_exchange[exchange]} –ø–æ–∑–∏—Ü–∏–π")
    print()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
print("="*100)
print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø–ú")
print("="*100)
print()

by_side = defaultdict(int)
for wave in waves:
    for pos in wave['positions_opened']:
        by_side[pos['side']] += 1

if by_side:
    for side in sorted(by_side.keys()):
        print(f"   {side}: {by_side[side]} –ø–æ–∑–∏—Ü–∏–π")
    print()

# –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
print("="*100)
print("üìä –¢–û–ü-10 –°–ò–ú–í–û–õ–û–í")
print("="*100)
print()

symbol_count = defaultdict(int)
for wave in waves:
    for pos in wave['positions_opened']:
        symbol_count[pos['symbol']] += 1

if symbol_count:
    print("–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
    for symbol, count in sorted(symbol_count.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   {symbol}: {count} —Ä–∞–∑")
    print()

print("="*100)
print("‚úÖ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
print("="*100)
