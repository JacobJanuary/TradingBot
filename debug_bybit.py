#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Bybit UNIFIED –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""
import asyncio
import ccxt.async_support as ccxt
import os
import hmac
import hashlib
import time
import json
from dotenv import load_dotenv

load_dotenv()


async def debug_bybit():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')
    
    print("="*60)
    print("BYBIT UNIFIED ACCOUNT DEBUGGING")
    print("="*60)
    
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π:")
    print(f"   API Key: {api_key[:8] if api_key else 'NOT FOUND'}...")
    print(f"   API Secret: {'***' if api_secret else 'NOT FOUND'}")
    
    if not api_key or not api_secret:
        print("\n‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
    print("\n2Ô∏è‚É£ –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å (–±–µ–∑ CCXT):")
    
    import aiohttp
    
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    param_str = f"{timestamp}{api_key}{recv_window}"
    signature = hmac.new(
        api_secret.encode('utf-8'),
        param_str.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    headers = {
        'X-BAPI-API-KEY': api_key,
        'X-BAPI-SIGN': signature,
        'X-BAPI-TIMESTAMP': timestamp,
        'X-BAPI-RECV-WINDOW': recv_window,
        'Content-Type': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        url = "https://api-testnet.bybit.com/v5/account/info"
        
        try:
            async with session.get(url, headers=headers) as response:
                data = await response.json()
                print(f"   Response code: {data.get('retCode')}")
                print(f"   Response msg: {data.get('retMsg')}")
                
                if data.get('retCode') == 0:
                    result = data.get('result', {})
                    print(f"   ‚úÖ Account Type: {result.get('accountType')}")
                    print(f"   ‚úÖ UID: {result.get('uid')}")
                    print(f"   ‚úÖ Status: {result.get('status')}")
                    
                    if result.get('accountType') != 'UNIFIED':
                        print("\n   ‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –ù–ï UNIFIED!")
                else:
                    print(f"   ‚ùå API Error: {data}")
                    
        except Exception as e:
            print(f"   ‚ùå Request failed: {e}")
    
    # –¢–µ—Å—Ç 2: CCXT —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ CCXT:")
    
    configs = [
        {
            'name': 'Default config',
            'options': {
                'defaultType': 'future',
                'accountType': 'UNIFIED'
            }
        },
        {
            'name': 'With adjustForTimeDifference',
            'options': {
                'defaultType': 'future',
                'accountType': 'UNIFIED',
                'adjustForTimeDifference': True,
                'recvWindow': 60000
            }
        },
        {
            'name': 'Spot mode',
            'options': {
                'defaultType': 'spot',
                'accountType': 'UNIFIED'
            }
        }
    ]
    
    for config in configs:
        print(f"\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config['name']}")
        
        exchange = ccxt.bybit({
            'apiKey': api_key,
            'secret': api_secret,
            'testnet': True,
            'enableRateLimit': True,
            'options': config['options']
        })
        
        exchange.set_sandbox_mode(True)
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
            balance = await exchange.fetch_balance()
            usdt = balance.get('USDT', {}).get('free', 0)
            print(f"      ‚úÖ –£—Å–ø–µ—Ö! USDT –±–∞–ª–∞–Ω—Å: {usdt:.2f}")
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏
                markets = await exchange.load_markets()
                print(f"      ‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(markets)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                positions = await exchange.fetch_positions()
                print(f"      ‚úÖ –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {len(positions)}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä
                ticker = await exchange.fetch_ticker('BTC/USDT:USDT')
                print(f"      ‚úÖ BTC/USDT: ${ticker['last']:,.2f}")
                
                print(f"\n   üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config['name']}' —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                print("\n4Ô∏è‚É£ –†–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è .env –∏ config.yaml:")
                print("   ```yaml")
                print("   bybit:")
                print("     enabled: true")
                print("     testnet: true")
                print("     api_key: ${BYBIT_API_KEY}")
                print("     api_secret: ${BYBIT_API_SECRET}")
                print("     options:")
                for key, value in config['options'].items():
                    print(f"       {key}: {value}")
                print("   ```")
                
                await exchange.close()
                break
                
            except Exception as e:
                print(f"      ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö, –Ω–æ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ: {e}")
                
        except Exception as e:
            error_msg = str(e)
            if "accountType only support UNIFIED" in error_msg:
                print(f"      ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è UNIFIED account")
            elif "Invalid API" in error_msg:
                print(f"      ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
            elif "Timestamp" in error_msg:
                print(f"      ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {error_msg[:100]}...")
        
        finally:
            await exchange.close()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    
    try:
        exchange = ccxt.bybit({
            'apiKey': api_key,
            'secret': api_secret,
            'testnet': True,
            'options': {
                'defaultType': 'future',
                'accountType': 'UNIFIED'
            }
        })
        
        exchange.set_sandbox_mode(True)
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä
        print("   –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...")
        
        # –î–ª—è CCXT Pro –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        # –ù–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Ö–æ—Ç—è –±—ã REST API WebSocket endpoint
        ws_info = {
            'public': 'wss://stream-testnet.bybit.com/v5/public/linear',
            'private': 'wss://stream-testnet.bybit.com/v5/private'
        }
        
        print(f"   Public WS: {ws_info['public']}")
        print(f"   Private WS: {ws_info['private']}")
        print("   ‚úÖ WebSocket endpoints –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        await exchange.close()
        
    except Exception as e:
        print(f"   ‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*60)
    print("–ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("="*60)
    
    print("""
–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –æ—Ç TESTNET, –∞ –Ω–µ MAINNET
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ testnet.bybit.com –ø–æ–∫–∞–∑–∞–Ω UNIFIED account
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ù–û–í–´–ï –∫–ª—é—á–∏
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∫–ª—é—á–µ–π –µ—Å—Ç—å permissions –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

–ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –≤ config.yaml
""")


if __name__ == "__main__":
    asyncio.run(debug_bybit())