#!/usr/bin/env python3
"""
üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢: Real Order Status Analysis

–°–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï market orders –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å—ã.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ 100% —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è "Entry order failed: unknown"

–í–ê–ñ–ù–û: –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ!
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã (~$1-2)
- –°—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ testnet –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω

–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ª–æ–≥–æ–≤:
- SUNDOGUSDT - "Entry order failed: unknown" (2025-10-12 05:51:20)
- XCHUSDT - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞ –∂–µ –ø—Ä–æ–±–ª–µ–º–∞
"""

import asyncio
import ccxt.async_support as ccxt
from config.settings import Config
from core.exchange_response_adapter import ExchangeResponseAdapter
import json
from datetime import datetime
from decimal import Decimal

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'

async def test_symbol_order_status(exchange, symbol: str, test_num: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""

    print(f"\n{'='*80}")
    print(f"{BOLD}TEST {test_num}: {symbol}{RESET}")
    print(f"{'='*80}\n")

    try:
        # 1. –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        print(f"{BLUE}üìä –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ{RESET}")
        print("-"*80)

        markets = await exchange.load_markets()

        if symbol not in markets:
            print(f"{RED}‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ{RESET}")
            return None

        market = markets[symbol]

        min_amount = market['limits']['amount']['min']
        min_cost = market['limits']['cost']['min']
        amount_precision = market['precision']['amount']

        print(f"Market info:")
        print(f"  Min amount: {min_amount}")
        print(f"  Min cost: {min_cost}")
        print(f"  Amount precision: {amount_precision}")
        print(f"  Contract size: {market.get('contractSize', 'N/A')}")

        # 2. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await exchange.fetch_ticker(symbol)
        current_price = ticker['last']

        print(f"\nCurrent price: {current_price}")

        # 3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if min_cost:
            amount_from_cost = min_cost / current_price
            proper_amount = max(min_amount, amount_from_cost) * 1.5  # x1.5 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        else:
            proper_amount = min_amount * 2  # x2 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç min_cost

        # –û–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ precision
        if amount_precision > 0:
            # Precision –º–æ–∂–µ—Ç –±—ã—Ç—å float (0.01), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ª-–≤–æ –∑–Ω–∞–∫–æ–≤
            import math
            decimals = int(abs(math.log10(amount_precision))) if amount_precision < 1 else 0
            proper_amount = round(proper_amount, decimals)
        else:
            proper_amount = int(proper_amount)

        order_cost = proper_amount * current_price

        print(f"\nCalculated order:")
        print(f"  Amount: {proper_amount}")
        print(f"  Estimated cost: ${order_cost:.2f}")

        # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
        balance = await exchange.fetch_balance()
        usdt_balance = balance.get('USDT', {})
        free_usdt = usdt_balance.get('free') or usdt_balance.get('total', 0) or 0

        print(f"\nUSDT Balance: {free_usdt:.2f}")

        if free_usdt < order_cost:
            print(f"{RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ (–Ω—É–∂–Ω–æ ${order_cost:.2f}){RESET}")
            return None

        # 5. –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n{YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!{RESET}")
        print(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –†–ï–ê–õ–¨–ù–´–ô market order:")
        print(f"  Symbol: {symbol}")
        print(f"  Side: SELL (short)")
        print(f"  Amount: {proper_amount}")
        print(f"  Cost: ~${order_cost:.2f}")
        print(f"\n–ü–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–∞.")

        confirm = input(f"\n{BOLD}–°–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä? (yes/no): {RESET}").strip().lower()

        if confirm != 'yes':
            print(f"{YELLOW}‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{RESET}")
            return None

        # 6. –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê
        print(f"\n{BLUE}üìù –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ market order{RESET}")
        print("-"*80)

        start_time = datetime.now()

        raw_order_1 = await exchange.create_market_order(
            symbol=symbol,
            side='sell',
            amount=proper_amount
        )

        create_time = (datetime.now() - start_time).total_seconds()

        print(f"{GREEN}‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –∑–∞ {create_time:.3f}s{RESET}\n")

        # 7. –ê–ù–ê–õ–ò–ó –°–†–ê–ó–£ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø
        print(f"{BLUE}üîç –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ RAW ORDER (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è){RESET}")
        print("-"*80)

        print(f"\n{BOLD}RAW ORDER STRUCTURE:{RESET}")
        print(json.dumps(raw_order_1, indent=2, default=str))

        print(f"\n{BOLD}KEY FIELDS:{RESET}")
        print(f"  order['id']: {raw_order_1.get('id')}")
        print(f"  order['status']: {YELLOW}{raw_order_1.get('status')}{RESET}")
        print(f"  order['type']: {raw_order_1.get('type')}")
        print(f"  order['side']: {raw_order_1.get('side')}")
        print(f"  order['amount']: {raw_order_1.get('amount')}")
        print(f"  order['filled']: {raw_order_1.get('filled')}")
        print(f"  order['remaining']: {raw_order_1.get('remaining')}")

        if 'info' in raw_order_1:
            info = raw_order_1['info']
            print(f"\n{BOLD}INFO FIELDS:{RESET}")
            print(f"  info['orderStatus']: {YELLOW}{info.get('orderStatus')}{RESET}")
            print(f"  info['orderLinkId']: {info.get('orderLinkId')}")
            print(f"  info['cumExecQty']: {info.get('cumExecQty')}")
            print(f"  info['leavesQty']: {info.get('leavesQty')}")
            print(f"  info['avgPrice']: {info.get('avgPrice')}")

        # 8. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø (–∫–∞–∫ –≤ –±–æ—Ç–µ)
        print(f"\n{BLUE}üîÑ –®–∞–≥ 4: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –≤ –±–æ—Ç–µ){RESET}")
        print("-"*80)

        normalized_1 = ExchangeResponseAdapter.normalize_order(raw_order_1, 'bybit')

        print(f"\n{BOLD}NORMALIZED ORDER:{RESET}")
        print(f"  id: {normalized_1.id}")
        print(f"  symbol: {normalized_1.symbol}")
        print(f"  side: {normalized_1.side}")
        print(f"  status: {YELLOW}{normalized_1.status}{RESET} ‚Üê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–¢–ê–¢–£–°!")
        print(f"  type: {normalized_1.type}")
        print(f"  amount: {normalized_1.amount}")
        print(f"  filled: {normalized_1.filled}")
        print(f"  price: {normalized_1.price}")
        print(f"  average: {normalized_1.average}")

        is_filled_1 = ExchangeResponseAdapter.is_order_filled(normalized_1)
        print(f"\n{BOLD}is_order_filled(): {GREEN if is_filled_1 else RED}{is_filled_1}{RESET}")

        if not is_filled_1:
            print(f"{RED}‚ö†Ô∏è  –ë–û–¢ –ë–´ –û–¢–ö–õ–û–ù–ò–õ –≠–¢–û–¢ –û–†–î–ï–†!{RESET}")
            print(f"{RED}   –ü—Ä–∏—á–∏–Ω–∞: status='{normalized_1.status}' –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É{RESET}")

        # 9. FETCH ORDER (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å)
        print(f"\n{BLUE}üîÑ –®–∞–≥ 5: Fetch order (—á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É){RESET}")
        print("-"*80)

        await asyncio.sleep(1.0)

        raw_order_2 = await exchange.fetch_order(raw_order_1['id'], symbol)

        print(f"\n{BOLD}FETCHED ORDER STRUCTURE:{RESET}")
        print(json.dumps(raw_order_2, indent=2, default=str))

        print(f"\n{BOLD}KEY FIELDS AFTER FETCH:{RESET}")
        print(f"  order['status']: {YELLOW}{raw_order_2.get('status')}{RESET}")
        print(f"  order['filled']: {raw_order_2.get('filled')}")

        if 'info' in raw_order_2:
            info2 = raw_order_2['info']
            print(f"  info['orderStatus']: {YELLOW}{info2.get('orderStatus')}{RESET}")

        normalized_2 = ExchangeResponseAdapter.normalize_order(raw_order_2, 'bybit')

        print(f"\n{BOLD}NORMALIZED AFTER FETCH:{RESET}")
        print(f"  status: {YELLOW}{normalized_2.status}{RESET}")
        print(f"  filled: {normalized_2.filled}")

        is_filled_2 = ExchangeResponseAdapter.is_order_filled(normalized_2)
        print(f"\n{BOLD}is_order_filled() after fetch: {GREEN if is_filled_2 else RED}{is_filled_2}{RESET}")

        # 10. –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í
        print(f"\n{BLUE}üìä –®–∞–≥ 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤{RESET}")
        print("-"*80)

        print(f"\n{BOLD}IMMEDIATE (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ create):{RESET}")
        print(f"  raw status: {raw_order_1.get('status')}")
        print(f"  info.orderStatus: {raw_order_1.get('info', {}).get('orderStatus')}")
        print(f"  normalized status: {normalized_1.status}")
        print(f"  is_filled: {is_filled_1}")

        print(f"\n{BOLD}AFTER FETCH (—á–µ—Ä–µ–∑ 1 —Å–µ–∫):{RESET}")
        print(f"  raw status: {raw_order_2.get('status')}")
        print(f"  info.orderStatus: {raw_order_2.get('info', {}).get('orderStatus')}")
        print(f"  normalized status: {normalized_2.status}")
        print(f"  is_filled: {is_filled_2}")

        # 11. –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò
        print(f"\n{BLUE}üîÑ –®–∞–≥ 7: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏{RESET}")
        print("-"*80)

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        positions = await exchange.fetch_positions([symbol])
        position = None
        for pos in positions:
            if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                position = pos
                break

        if position:
            position_size = abs(float(position['contracts']))
            print(f"–ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {position_size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")

            # –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
            close_order = await exchange.create_market_order(
                symbol=symbol,
                side='buy',  # –ó–∞–∫—Ä—ã–≤–∞–µ–º SELL –ø–æ–∑–∏—Ü–∏—é
                amount=position_size,
                params={'reduceOnly': True}
            )

            print(f"{GREEN}‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞{RESET}")
            print(f"  Close order ID: {close_order['id']}")
        else:
            print(f"{YELLOW}‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞){RESET}")

        # –†–ï–ó–£–õ–¨–¢–ê–¢
        return {
            'symbol': symbol,
            'immediate': {
                'raw_status': raw_order_1.get('status'),
                'info_status': raw_order_1.get('info', {}).get('orderStatus'),
                'normalized_status': normalized_1.status,
                'is_filled': is_filled_1,
            },
            'after_fetch': {
                'raw_status': raw_order_2.get('status'),
                'info_status': raw_order_2.get('info', {}).get('orderStatus'),
                'normalized_status': normalized_2.status,
                'is_filled': is_filled_2,
            },
            'would_bot_accept': is_filled_1,
            'full_raw_immediate': raw_order_1,
            'full_raw_fetched': raw_order_2,
        }

    except ccxt.InsufficientFunds as e:
        print(f"{RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {e}{RESET}")
        return None

    except ccxt.InvalidOrder as e:
        print(f"{RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ä–¥–µ—Ä: {e}{RESET}")
        return None

    except Exception as e:
        print(f"{RED}‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}{RESET}")
        import traceback
        traceback.print_exc()
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print(f"\n{BOLD}{'='*80}{RESET}")
    print(f"{BOLD}üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Real Order Status Analysis{RESET}")
    print(f"{BOLD}{'='*80}{RESET}\n")

    print(f"{YELLOW}–í–ù–ò–ú–ê–ù–ò–ï!{RESET}")
    print(f"–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï market orders –Ω–∞ –±–∏—Ä–∂–µ!")
    print(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã (~$1-2 –∑–∞ –æ—Ä–¥–µ—Ä)")
    print(f"- –ü–æ–∑–∏—Ü–∏–∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è")
    print(f"- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {'TESTNET' if True else 'PRODUCTION'}")
    print()

    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()

    # –ù–∞–π—Ç–∏ Bybit exchange
    exchange_config = config.exchanges.get('bybit')

    if not exchange_config:
        print(f"{RED}‚ùå Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏{RESET}")
        return

    # –°–æ–∑–¥–∞—Ç—å exchange instance
    exchange = ccxt.bybit({
        'apiKey': exchange_config.api_key,
        'secret': exchange_config.api_secret,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'testnet': exchange_config.testnet
        }
    })

    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit:")
    print(f"  Testnet: {exchange_config.testnet}")
    print(f"  Rate limit: Enabled")
    print()

    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ª–æ–≥–æ–≤
    problem_symbols = [
        'SUNDOG/USDT:USDT',  # Entry order failed: unknown (2025-10-12 05:51:20)
        'XCH/USDT:USDT',     # –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞ –∂–µ –ø—Ä–æ–±–ª–µ–º–∞
    ]

    results = []

    try:
        for i, symbol in enumerate(problem_symbols, 1):
            result = await test_symbol_order_status(exchange, symbol, i)
            if result:
                results.append(result)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            if i < len(problem_symbols):
                print(f"\n{YELLOW}‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...{RESET}")
                await asyncio.sleep(3)

        # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
        print(f"\n\n{BOLD}{'='*80}{RESET}")
        print(f"{BOLD}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢{RESET}")
        print(f"{BOLD}{'='*80}{RESET}\n")

        if not results:
            print(f"{RED}‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞{RESET}")
            return

        print(f"{BOLD}–°–í–û–î–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:{RESET}\n")

        for result in results:
            symbol = result['symbol']
            print(f"{BOLD}{symbol}:{RESET}")
            print(f"  IMMEDIATE (create_market_order):")
            print(f"    raw status: {result['immediate']['raw_status']}")
            print(f"    info.orderStatus: {result['immediate']['info_status']}")
            print(f"    normalized: {YELLOW}{result['immediate']['normalized_status']}{RESET}")
            print(f"    is_filled: {result['immediate']['is_filled']}")
            print(f"    –ë–æ—Ç –ø—Ä–∏–º–µ—Ç: {GREEN + '–î–ê' if result['would_bot_accept'] else RED + '–ù–ï–¢'}{RESET}")
            print()
            print(f"  AFTER FETCH (—á–µ—Ä–µ–∑ 1 —Å–µ–∫):")
            print(f"    raw status: {result['after_fetch']['raw_status']}")
            print(f"    info.orderStatus: {result['after_fetch']['info_status']}")
            print(f"    normalized: {YELLOW}{result['after_fetch']['normalized_status']}{RESET}")
            print(f"    is_filled: {result['after_fetch']['is_filled']}")
            print()

        # –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò
        print(f"{BOLD}üîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:{RESET}\n")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        immediate_raw_statuses = set(r['immediate']['raw_status'] for r in results if r['immediate']['raw_status'])
        immediate_info_statuses = set(r['immediate']['info_status'] for r in results if r['immediate']['info_status'])
        immediate_normalized = set(r['immediate']['normalized_status'] for r in results)

        after_raw_statuses = set(r['after_fetch']['raw_status'] for r in results if r['after_fetch']['raw_status'])
        after_info_statuses = set(r['after_fetch']['info_status'] for r in results if r['after_fetch']['info_status'])

        print(f"1. RAW –°–¢–ê–¢–£–°–´ (order['status']):")
        print(f"   Immediate: {immediate_raw_statuses}")
        print(f"   After fetch: {after_raw_statuses}")
        print()

        print(f"2. INFO –°–¢–ê–¢–£–°–´ (order['info']['orderStatus']):")
        print(f"   Immediate: {immediate_info_statuses}")
        print(f"   After fetch: {after_info_statuses}")
        print()

        print(f"3. NORMALIZED –°–¢–ê–¢–£–°–´:")
        print(f"   Immediate: {immediate_normalized}")
        print()

        # –ù–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        problematic = [r for r in results if not r['would_bot_accept']]

        if problematic:
            print(f"4. {RED}–ü–†–û–ë–õ–ï–ú–ù–´–ï –°–¢–ê–¢–£–°–´ (–±–æ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç):{RESET}")
            for r in problematic:
                print(f"   {r['symbol']}: normalized='{r['immediate']['normalized_status']}'")
                print(f"     ‚Üí info.orderStatus –±—ã–ª: '{r['immediate']['info_status']}'")
                print(f"     ‚Üí –ù–ï –≤ status_map ‚Üí —Å—Ç–∞–ª 'unknown'")
            print()

        # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        print(f"{BOLD}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{RESET}\n")

        all_info_statuses = immediate_info_statuses | after_info_statuses

        # –¢–µ–∫—É—â–∏–π status_map
        current_map = {
            'Filled', 'PartiallyFilled', 'New', 'Cancelled', 'Rejected'
        }

        missing_statuses = all_info_statuses - current_map

        if missing_statuses:
            print(f"–î–æ–±–∞–≤–∏—Ç—å –≤ status_map:")
            for status in missing_statuses:
                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥
                if status in ['Created', 'Triggered', 'Untriggered']:
                    mapping = 'open'
                elif status in ['Deactivated']:
                    mapping = 'canceled'
                else:
                    mapping = 'open'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                print(f"  '{status}': '{mapping}',")
            print()
        else:
            print(f"{GREEN}‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã —É–∂–µ –≤ status_map!{RESET}")
            print()

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\n{BLUE}üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...{RESET}")

        output_file = f"diagnostic_order_status_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2, default=str)

        print(f"{GREEN}‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}{RESET}")

    finally:
        await exchange.close()

    print(f"\n{BOLD}{'='*80}{RESET}")
    print(f"{BOLD}‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê{RESET}")
    print(f"{BOLD}{'='*80}{RESET}\n")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n\n{YELLOW}‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C){RESET}\n")
    except Exception as e:
        print(f"\n\n{RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}{RESET}\n")
        import traceback
        traceback.print_exc()
