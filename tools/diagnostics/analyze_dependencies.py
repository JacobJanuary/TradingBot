#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
"""
import ast
import os
from collections import defaultdict
from pathlib import Path

def analyze_imports(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            tree = ast.parse(f.read())
    except Exception as e:
        return []

    imports = []
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.append(alias.name)
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.append(node.module)

    return imports

def build_dependency_graph():
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    project_root = Path('/Users/evgeniyyanvarskiy/PycharmProjects/TradingBot')

    dependencies = defaultdict(list)

    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    critical_modules = [
        'database/repository.py',
        'database/models.py',
        'core/exchange_manager.py',
        'core/position_manager.py',
        'core/risk_manager.py',
        'utils/crypto_manager.py',
        'utils/decimal_utils.py',
        'protection/stop_loss_manager.py',
        'websocket/signal_client.py',
        'core/aged_position_manager.py',
    ]

    print("="*80)
    print("–ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô - –ì–†–ê–§ –ö–†–ò–¢–ò–ß–ù–´–• –ú–û–î–£–õ–ï–ô")
    print("="*80)
    print()
    print("–°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...")

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏
    for py_file in project_root.rglob('*.py'):
        if 'test' in str(py_file) or '.venv' in str(py_file):
            continue

        imports = analyze_imports(py_file)

        for critical in critical_modules:
            module_name = critical.replace('/', '.').replace('.py', '')
            if any(module_name in imp for imp in imports):
                dependencies[critical].append(str(py_file.relative_to(project_root)))

    # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("="*80)
    print("–ì–†–ê–§ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô - –ö–¢–û –ó–ê–í–ò–°–ò–¢ –û–¢ –ö–†–ò–¢–ò–ß–ù–´–• –ú–û–î–£–õ–ï–ô")
    print("="*80)

    total_dependencies = 0

    for module, dependents in sorted(dependencies.items()):
        print(f"\nüì¶ {module}")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {len(dependents)} —Ñ–∞–π–ª–∞—Ö:")
        for dep in sorted(set(dependents))[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
            print(f"   ‚îî‚îÄ {dep}")
        unique_deps = len(set(dependents))
        if unique_deps > 10:
            print(f"   ‚îî‚îÄ ... –∏ –µ—â–µ {unique_deps - 10} —Ñ–∞–π–ª–æ–≤")
        total_dependencies += unique_deps

    print("\n" + "="*80)
    print(f"–ò–¢–û–ì–û: {len(dependencies)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
    print(f"       {total_dependencies} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ")
    print("="*80)

    return dependencies

def save_to_file(dependencies):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ –≤ —Ñ–∞–π–ª"""
    output_file = Path('DEPENDENCY_GRAPH.txt')

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("–ì–†–ê–§ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ö–†–ò–¢–ò–ß–ù–´–• –ú–û–î–£–õ–ï–ô\n")
        f.write("="*80 + "\n\n")

        f.write("–î–∞—Ç–∞: 2025-10-09\n")
        f.write("–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º\n\n")

        for module, dependents in sorted(dependencies.items()):
            f.write(f"\n{'='*80}\n")
            f.write(f"–ú–û–î–£–õ–¨: {module}\n")
            f.write(f"{'='*80}\n")
            f.write(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {len(set(dependents))} —Ñ–∞–π–ª–∞—Ö:\n\n")
            for dep in sorted(set(dependents)):
                f.write(f"  - {dep}\n")

        f.write(f"\n{'='*80}\n")
        f.write(f"–ò–¢–û–ì–û: {len(dependencies)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n")
        f.write(f"{'='*80}\n")

    print(f"\n‚úÖ –ì—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")

def main():
    print("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n")

    deps = build_dependency_graph()

    if deps:
        save_to_file(deps)
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\n–ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("  1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å DEPENDENCY_GRAPH.txt")
        print("  2. –ü–æ–Ω—è—Ç—å –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("  3. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å Phase 0.2 (Backup)")
        return 0
    else:
        print("\n‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(main())
