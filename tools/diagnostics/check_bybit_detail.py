#!/usr/bin/env python3
"""–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit"""

import asyncio
import ccxt.async_support as ccxt
import os
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime, timezone

load_dotenv()

async def check_bybit():
    exchange = ccxt.bybit({
        'apiKey': os.getenv('BYBIT_API_KEY'),
        'secret': os.getenv('BYBIT_API_SECRET'),
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'testnet': True
        }
    })

    try:
        print("="*80)
        print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê BYBIT TESTNET")
        print("="*80)

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        print("\nüìà –ü–û–ó–ò–¶–ò–ò:")
        positions = await exchange.fetch_positions()
        active_positions = [p for p in positions if p['contracts'] > 0]

        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}")
        position_symbols = set()
        for pos in active_positions:
            position_symbols.add(pos['symbol'])
            print(f"  ‚Ä¢ {pos['symbol']}: {pos['side']} {pos['contracts']} @ {pos['markPrice']}")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ CCXT
        print("\nüìã –û–†–î–ï–†–ê (—á–µ—Ä–µ–∑ CCXT fetch_open_orders):")
        all_orders = await exchange.fetch_open_orders()
        print(f"–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(all_orders)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        order_types = defaultdict(list)
        for order in all_orders:
            order_type = order.get('type', 'unknown')
            order_types[order_type].append(order)

        for order_type, orders in order_types.items():
            print(f"\n  {order_type}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            for order in orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    ‚Ä¢ {order['symbol']} {order['side']} {order.get('amount', '?')} @ {order.get('price', order.get('stopPrice', '?'))}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π API Bybit –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        print("\nüìä –õ–ò–ú–ò–¢–ù–´–ï –û–†–î–ï–†–ê (—á–µ—Ä–µ–∑ Bybit API v5):")
        try:
            limit_orders = await exchange.private_get_v5_order_realtime({
                'category': 'linear',
                'settleCoin': 'USDT'
            })

            if limit_orders['result']['list']:
                print(f"–ù–∞–π–¥–µ–Ω–æ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(limit_orders['result']['list'])}")
                for order in limit_orders['result']['list'][:5]:
                    print(f"  ‚Ä¢ {order['symbol']}: {order['side']} {order['qty']} @ {order['price']}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {order['orderStatus']}, –¢–∏–ø: {order['orderType']}")
            else:
                print("–õ–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞
        print("\nüõë –°–¢–û–ü-–û–†–î–ï–†–ê (—á–µ—Ä–µ–∑ Bybit API v5):")
        try:
            # –î–ª—è —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä
            stop_orders = await exchange.private_get_v5_order_realtime({
                'category': 'linear',
                'settleCoin': 'USDT',
                'orderFilter': 'StopOrder'
            })

            if stop_orders['result']['list']:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤: {len(stop_orders['result']['list'])}")
                for order in stop_orders['result']['list'][:5]:
                    print(f"  ‚Ä¢ {order['symbol']}: {order['side']} {order['qty']} @ trigger: {order.get('triggerPrice', 'N/A')}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {order['orderStatus']}, –¢–∏–ø: {order['orderType']}")
            else:
                print("–°—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 5. –ê–Ω–∞–ª–∏–∑ –∑–æ–º–±–∏-–æ—Ä–¥–µ—Ä–æ–≤
        print("\nüßü –ê–ù–ê–õ–ò–ó –ó–û–ú–ë–ò-–û–†–î–ï–†–û–í:")
        zombie_orders = []
        for order in all_orders:
            symbol = order.get('symbol')
            if symbol and symbol not in position_symbols:
                zombie_orders.append(order)

        if zombie_orders:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(zombie_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π:")
            for order in zombie_orders:
                print(f"  ‚Ä¢ {order['symbol']}: {order.get('type', '?')} {order['side']} {order.get('amount', '?')}")
                print(f"    ID: {order['id']}, –°–æ–∑–¥–∞–Ω: {order.get('datetime', 'unknown')}")
        else:
            print("‚úÖ –ó–æ–º–±–∏-–æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        print("\nüîç –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ü–û–ó–ò–¶–ò–ô –ò –û–†–î–ï–†–û–í:")
        for symbol in position_symbols:
            symbol_orders = [o for o in all_orders if o.get('symbol') == symbol]
            print(f"  {symbol}: {len(symbol_orders)} –æ—Ä–¥–µ—Ä–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

asyncio.run(check_bybit())