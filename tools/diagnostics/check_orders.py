import asyncio
import ccxt.async_support as ccxt
import os
from dotenv import load_dotenv
from datetime import datetime, timezone

load_dotenv()

async def check_orders():
    exchange = ccxt.bybit({
        'apiKey': os.getenv('BYBIT_API_KEY'),
        'secret': os.getenv('BYBIT_API_SECRET'),
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'testnet': True
        }
    })

    try:
        print("=" * 80)
        print("–ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í –ù–ê BYBIT TESTNET")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        orders = await exchange.fetch_open_orders()
        print(f'\nüìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        orders_by_symbol = {}
        limit_orders = 0
        stop_orders = 0

        for order in orders:
            symbol = order['symbol']
            if symbol not in orders_by_symbol:
                orders_by_symbol[symbol] = []
            orders_by_symbol[symbol].append(order)

            if order['type'] == 'limit':
                limit_orders += 1
            elif 'stop' in order['type'].lower():
                stop_orders += 1

        print(f'  - –õ–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {limit_orders}')
        print(f'  - –°—Ç–æ–ø –æ—Ä–¥–µ—Ä–æ–≤: {stop_orders}')

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª–∞–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
        print('\n‚ö†Ô∏è –°–ò–ú–í–û–õ–´ –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –û–†–î–ï–†–ê–ú–ò:')
        multiple_orders_found = False
        for symbol, symbol_orders in sorted(orders_by_symbol.items(), key=lambda x: -len(x[1])):
            if len(symbol_orders) > 1:
                multiple_orders_found = True
                print(f'\n{symbol}: {len(symbol_orders)} –æ—Ä–¥–µ—Ä–æ–≤')
                for i, order in enumerate(symbol_orders[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Ä–¥–µ—Ä–æ–≤
                    created = order.get('datetime', 'unknown')
                    print(f'  {i}. {order["type"]:10} {order["side"]:4} '
                          f'amount: {order.get("amount", "?")} '
                          f'price: {order.get("price", "?")} '
                          f'created: {created}')
                if len(symbol_orders) > 5:
                    print(f'  ... –∏ –µ—â–µ {len(symbol_orders) - 5} –æ—Ä–¥–µ—Ä–æ–≤')

        if not multiple_orders_found:
            print("  –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print('\n' + "=" * 80)
        print("–ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô")
        print("=" * 80)
        positions = await exchange.fetch_positions()
        open_positions = [p for p in positions if p['contracts'] > 0]
        print(f'\nüìà –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}')

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞
        print('\nüîç –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:')
        positions_with_orders = 0
        positions_without_orders = 0

        for pos in open_positions:
            symbol = pos['symbol']
            if symbol in orders_by_symbol:
                positions_with_orders += 1
                order_count = len(orders_by_symbol[symbol])
                if order_count > 10:
                    print(f'  ‚ö†Ô∏è {symbol}: –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–µ—Ç {order_count} –æ—Ä–¥–µ—Ä–æ–≤!')
            else:
                positions_without_orders += 1

        print(f'  - –ü–æ–∑–∏—Ü–∏–π —Å –æ—Ä–¥–µ—Ä–∞–º–∏: {positions_with_orders}')
        print(f'  - –ü–æ–∑–∏—Ü–∏–π –±–µ–∑ –æ—Ä–¥–µ—Ä–æ–≤: {positions_without_orders}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        print('\n' + "=" * 80)
        print("–ü–†–û–í–ï–†–ö–ê –°–¢–û–ü-–õ–û–°–° –û–†–î–ï–†–û–í")
        print("=" * 80)

        # –î–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        stop_loss_orders = await exchange.private_get_v5_order_realtime({
            'category': 'linear',
            'orderFilter': 'StopOrder'
        })

        if stop_loss_orders['result']['list']:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤: {len(stop_loss_orders['result']['list'])}")
            for sl in stop_loss_orders['result']['list'][:5]:
                print(f"  - {sl['symbol']}: {sl['side']} @ {sl['triggerPrice']}")
        else:
            print("–°—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

asyncio.run(check_orders())