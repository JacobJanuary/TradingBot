#!/usr/bin/env python3
"""–û—á–∏—Å—Ç–∫–∞ –∑–æ–º–±–∏-–æ—Ä–¥–µ—Ä–æ–≤ (–æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π)"""

import asyncio
import ccxt.async_support as ccxt
import os
from dotenv import load_dotenv

load_dotenv()

async def clean_zombie_orders():
    exchange = ccxt.bybit({
        'apiKey': os.getenv('BYBIT_API_KEY'),
        'secret': os.getenv('BYBIT_API_SECRET'),
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'testnet': True
        }
    })

    try:
        print("="*80)
        print("–û–ß–ò–°–¢–ö–ê –ó–û–ú–ë–ò-–û–†–î–ï–†–û–í –ù–ê BYBIT")
        print("="*80)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.fetch_positions()
        active_positions = [p for p in positions if p['contracts'] > 0]
        position_symbols = {p['symbol'] for p in active_positions}

        print(f"\nüìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(active_positions)}):")
        for symbol in position_symbols:
            print(f"  ‚Ä¢ {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        all_orders = await exchange.fetch_open_orders()
        print(f"\nüìã –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(all_orders)}")

        # –ù–∞—Ö–æ–¥–∏–º –∑–æ–º–±–∏-–æ—Ä–¥–µ—Ä–∞
        zombie_orders = []
        for order in all_orders:
            symbol = order.get('symbol')
            if symbol and symbol not in position_symbols:
                zombie_orders.append(order)

        if not zombie_orders:
            print("\n‚úÖ –ó–æ–º–±–∏-–æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"\nüßü –ù–∞–π–¥–µ–Ω–æ {len(zombie_orders)} –∑–æ–º–±–∏-–æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã:")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        from collections import defaultdict
        zombies_by_symbol = defaultdict(list)
        for order in zombie_orders:
            zombies_by_symbol[order['symbol']].append(order)

        for symbol, orders in zombies_by_symbol.items():
            print(f"\n  {symbol}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            for order in orders:
                print(f"    ‚Ä¢ ID: {order['id'][:8]}... Type: {order.get('type', '?')}")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ {len(zombie_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")

        if confirm.lower() != 'y':
            print("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –∑–æ–º–±–∏-–æ—Ä–¥–µ—Ä–∞
        cancelled_count = 0
        failed_count = 0

        for order in zombie_orders:
            try:
                symbol = order['symbol']
                order_id = order['id']

                print(f"  –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order_id[:8]}... –¥–ª—è {symbol}...", end="")
                await exchange.cancel_order(order_id, symbol)
                print(" ‚úÖ")
                cancelled_count += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
                await asyncio.sleep(0.5)

            except Exception as e:
                print(f" ‚ùå –û—à–∏–±–∫–∞: {e}")
                failed_count += 1

        # –ò—Ç–æ–≥–∏
        print(f"\n" + "="*80)
        print("–ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_count} –æ—Ä–¥–µ—Ä–æ–≤")
        if failed_count > 0:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å: {failed_count} –æ—Ä–¥–µ—Ä–æ–≤")
        print("="*80)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await exchange.close()

if __name__ == "__main__":
    asyncio.run(clean_zombie_orders())