#!/usr/bin/env python3
"""
TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∫—Å–∞ –æ—Ç–∫–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏–π

–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –æ—Ç–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç quantity –≤–º–µ—Å—Ç–æ entry_order.filled

BEFORE FIX: entry_order.filled=0 ‚Üí Amount 0.0 ‚Üí FAIL
AFTER FIX: quantity=1298 ‚Üí Amount 1298 ‚Üí SUCCESS
"""

import asyncio
import sys
from decimal import Decimal
from unittest.mock import Mock, AsyncMock, patch
from typing import Optional

# Add project root to path
sys.path.insert(0, '/Users/evgeniyyanvarskiy/PycharmProjects/TradingBot')

from core.atomic_position_manager import AtomicPositionManager, PositionState
from core.exchange_response_adapter import NormalizedOrder


async def test_rollback_uses_quantity():
    """
    –¢–µ—Å—Ç: –û—Ç–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quantity, –ù–ï entry_order.filled
    """
    print("=" * 80)
    print("üß™ TEST: Rollback uses quantity instead of entry_order.filled")
    print("=" * 80)
    print()

    # Setup: Mock exchange manager
    mock_exchange_manager = Mock()
    mock_exchange_instance = AsyncMock()
    mock_exchange_manager.get_exchange.return_value = mock_exchange_instance

    # Setup: Mock database manager
    mock_db_manager = AsyncMock()
    mock_db_manager.delete_position = AsyncMock(return_value=True)

    # Create atomic manager
    atomic_mgr = AtomicPositionManager(
        exchange_manager=mock_exchange_manager,
        db_manager=mock_db_manager
    )

    # Test Case 1: Entry order with filled=0 (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
    print("üìã Test Case 1: Entry order with filled=0")
    print()

    entry_order = NormalizedOrder(
        id='test_order_1',
        symbol='FRAGUSDT',
        side='sell',
        type='market',
        price=Decimal('1.5'),
        amount=Decimal('1298'),
        filled=Decimal('0'),  # ‚Üê –í–ê–ñ–ù–û: filled=0 –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞!
        status='unknown',
        timestamp=1234567890,
        raw={}
    )

    quantity = Decimal('1298')  # ‚Üê –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    print(f"  Entry Order:")
    print(f"    - Symbol: {entry_order.symbol}")
    print(f"    - Side: {entry_order.side}")
    print(f"    - Amount: {entry_order.amount}")
    print(f"    - Filled: {entry_order.filled} ‚Üê THIS IS 0!")
    print(f"  Quantity parameter: {quantity} ‚Üê THIS IS CORRECT!")
    print()

    # Mock market order creation to capture what amount was used
    captured_amount = None

    async def mock_create_market_order(symbol, side, amount):
        nonlocal captured_amount
        captured_amount = amount
        return NormalizedOrder(
            id='close_order_1',
            symbol=symbol,
            side=side,
            type='market',
            price=Decimal('1.5'),
            amount=Decimal(str(amount)),
            filled=Decimal(str(amount)),
            status='closed',
            timestamp=1234567891,
            raw={}
        )

    mock_exchange_instance.create_market_order = mock_create_market_order

    # Execute rollback
    print("  üîÑ Executing rollback...")

    try:
        await atomic_mgr._rollback_position(
            position_id=999,
            symbol='FRAGUSDT',
            exchange='bybit',
            state=PositionState.ENTRY_PLACED,
            entry_order=entry_order,
            quantity=quantity,
            error='Test error'
        )

        print(f"  ‚úÖ Rollback completed")
        print()

        # Verify: Which amount was used?
        print("  üìä RESULT:")
        print(f"    Amount used for close: {captured_amount}")
        print()

        if captured_amount is None:
            print("  ‚ùå FAIL: create_market_order was NOT called!")
            return False
        elif float(captured_amount) == 0.0:
            print("  ‚ùå FAIL: Used entry_order.filled=0 (WRONG!)")
            print("     This is the BUG we're fixing!")
            return False
        elif float(captured_amount) == float(quantity):
            print("  ‚úÖ SUCCESS: Used quantity parameter (CORRECT!)")
            print("     Fix is working!")
            return True
        else:
            print(f"  ‚ö†Ô∏è  UNEXPECTED: Amount={captured_amount}, expected {quantity}")
            return False

    except Exception as e:
        print(f"  ‚ùå ERROR during rollback: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_multiple_symbols():
    """
    –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö –∏–∑ –ª–æ–≥–æ–≤
    """
    print()
    print("=" * 80)
    print("üß™ TEST: Multiple problematic symbols")
    print("=" * 80)
    print()

    test_cases = [
        ('FRAGUSDT', 1298, 'bybit'),
        ('ORBSUSDT', 11990, 'bybit'),
        ('PEAQUSDT', 1280, 'bybit'),
        ('SOLAYERUSDT', 173, 'bybit'),
        ('WAVESUSDT', 200, 'bybit'),
    ]

    all_passed = True

    for symbol, qty, exchange in test_cases:
        print(f"üìã Testing {symbol} (quantity={qty})...")

        # Setup mocks
        mock_exchange_manager = Mock()
        mock_exchange_instance = AsyncMock()
        mock_exchange_manager.get_exchange.return_value = mock_exchange_instance
        mock_db_manager = AsyncMock()
        mock_db_manager.delete_position = AsyncMock(return_value=True)

        atomic_mgr = AtomicPositionManager(
            exchange_manager=mock_exchange_manager,
            db_manager=mock_db_manager
        )

        # Entry order with filled=0
        entry_order = NormalizedOrder(
            id=f'test_{symbol}',
            symbol=symbol,
            side='sell',
            type='market',
            price=Decimal('1.0'),
            amount=Decimal(str(qty)),
            filled=Decimal('0'),
            status='unknown',
            timestamp=1234567890,
            raw={}
        )

        captured_amount = None

        async def mock_create_market_order(sym, side, amount):
            nonlocal captured_amount
            captured_amount = amount
            return NormalizedOrder(
                id=f'close_{sym}',
                symbol=sym,
                side=side,
                type='market',
                price=Decimal('1.0'),
                amount=Decimal(str(amount)),
                filled=Decimal(str(amount)),
                status='closed',
                timestamp=1234567891,
                raw={}
            )

        mock_exchange_instance.create_market_order = mock_create_market_order

        try:
            await atomic_mgr._rollback_position(
                position_id=999,
                symbol=symbol,
                exchange=exchange,
                state=PositionState.ENTRY_PLACED,
                entry_order=entry_order,
                quantity=Decimal(str(qty)),
                error='Test error'
            )

            if captured_amount is None:
                print(f"  ‚ùå FAIL: No order created")
                all_passed = False
            elif float(captured_amount) == 0.0:
                print(f"  ‚ùå FAIL: Used filled=0 instead of quantity={qty}")
                all_passed = False
            elif float(captured_amount) == float(qty):
                print(f"  ‚úÖ PASS: Correct amount {qty}")
            else:
                print(f"  ‚ö†Ô∏è  UNEXPECTED: {captured_amount} != {qty}")
                all_passed = False

        except Exception as e:
            print(f"  ‚ùå ERROR: {e}")
            all_passed = False

    print()
    return all_passed


async def main():
    print()
    print("üî¨ TESTING ROLLBACK FIX")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º: –æ—Ç–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç quantity –≤–º–µ—Å—Ç–æ entry_order.filled")
    print()

    # Test 1: Basic functionality
    test1_passed = await test_rollback_uses_quantity()

    # Test 2: Multiple symbols
    test2_passed = await test_multiple_symbols()

    # Summary
    print()
    print("=" * 80)
    print("üìä TEST SUMMARY")
    print("=" * 80)
    print()

    if test1_passed and test2_passed:
        print("‚úÖ ALL TESTS PASSED")
        print()
        print("üéØ –í–ï–†–î–ò–ö–¢:")
        print("  - –û—Ç–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç quantity (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        print("  - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç entry_order.filled (bug –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)")
        print("  - –§–∏–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("‚ùå SOME TESTS FAILED")
        print()
        print("üéØ –í–ï–†–î–ò–ö–¢:")
        if not test1_passed:
            print("  - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç failed")
        if not test2_passed:
            print("  - –¢–µ—Å—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö failed")
        print()
        print("  ‚ö†Ô∏è  –§–∏–∫—Å –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
