#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑–∞ 8+ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
"""

import re
from collections import defaultdict
from datetime import datetime

# –ß–∏—Ç–∞–µ–º –ª–æ–≥
with open('logs/trading_bot.log', 'r') as f:
    lines = f.readlines()

print("="*80)
print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
print("="*80)
print()

# –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
first_line = lines[0]
last_line = lines[-1]
start_time = first_line.split()[0] + " " + first_line.split()[1].split(',')[0]
end_time = last_line.split()[0] + " " + last_line.split()[1].split(',')[0]

print(f"üìÖ –ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã:")
print(f"   –ù–∞—á–∞–ª–æ: {start_time}")
print(f"   –ö–æ–Ω–µ—Ü:  {end_time}")
print(f"   –°—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {len(lines):,}")
print()

# ==================== 1. –ê–ù–ê–õ–ò–ó –í–û–õ–ù ====================
print("="*80)
print("1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–û–õ–ù")
print("="*80)
print()

waves = []
wave_signals = {}
for line in lines:
    if 'üåä Starting wave processing' in line:
        match = re.search(r'(\d+) signals at timestamp (\S+)', line)
        if match:
            signal_count = int(match.group(1))
            timestamp = match.group(2)
            wave_time = line.split()[0] + " " + line.split()[1].split(',')[0]
            waves.append({
                'time': wave_time,
                'timestamp': timestamp,
                'signals': signal_count
            })
            wave_signals[timestamp] = signal_count

total_waves = len(waves)
total_signals = sum(w['signals'] for w in waves)

print(f"üìà –í—Å–µ–≥–æ –≤–æ–ª–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_waves}")
print(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –≤–æ–ª–Ω—É: {total_signals/total_waves:.1f}")
print()

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
signal_distribution = defaultdict(int)
for w in waves:
    signal_distribution[w['signals']] += 1

print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ª–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤:")
for sig_count in sorted(signal_distribution.keys()):
    print(f"   {sig_count} —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_distribution[sig_count]} –≤–æ–ª–Ω")
print()

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ–ª–Ω
print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ–ª–Ω:")
for w in waves[-10:]:
    print(f"   {w['time']}: {w['signals']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({w['timestamp']})")
print()

# ==================== 2. –ê–ù–ê–õ–ò–ó –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô ====================
print("="*80)
print("2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô")
print("="*80)
print()

positions_opened = []
positions_failed = []

for line in lines:
    if '‚úÖ Position opened successfully' in line:
        positions_opened.append(line)
    elif 'position_created:' in line:
        match = re.search(r"'symbol': '(\w+)'.*'exchange': '(\w+)'.*'side': '(\w+)'", line)
        if match:
            positions_opened.append({
                'symbol': match.group(1),
                'exchange': match.group(2),
                'side': match.group(3),
                'time': line.split()[0] + " " + line.split()[1].split(',')[0]
            })
    elif 'Error opening position' in line or 'failed' in line.lower() and 'position' in line.lower():
        positions_failed.append(line)

print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len([p for p in positions_opened if isinstance(p, dict)])}")
print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {len(positions_failed)}")
print()

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
by_exchange = defaultdict(int)
for p in positions_opened:
    if isinstance(p, dict):
        by_exchange[p['exchange']] += 1

print("–ü–æ–∑–∏—Ü–∏–∏ –ø–æ –±–∏—Ä–∂–∞–º:")
for exchange in sorted(by_exchange.keys()):
    print(f"   {exchange}: {by_exchange[exchange]} –ø–æ–∑–∏—Ü–∏–π")
print()

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ
by_side = defaultdict(int)
for p in positions_opened:
    if isinstance(p, dict):
        by_side[p['side']] += 1

print("–ü–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
for side in sorted(by_side.keys()):
    print(f"   {side}: {by_side[side]} –ø–æ–∑–∏—Ü–∏–π")
print()

# –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–æ–≤
print("–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏:")
failure_reasons = defaultdict(int)
for line in positions_failed[:20]:
    if 'Error' in line:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
        if ':' in line:
            parts = line.split(':')
            if len(parts) >= 3:
                reason = parts[-1].strip()[:50]
                failure_reasons[reason] += 1

for reason, count in sorted(failure_reasons.items(), key=lambda x: x[1], reverse=True)[:5]:
    print(f"   {reason}: {count} —Ä–∞–∑")
print()

# ==================== 3. –ê–ù–ê–õ–ò–ó –ó–ê–©–ò–¢–´ STOP-LOSS ====================
print("="*80)
print("3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ó–ê–©–ò–¢–´ STOP-LOSS")
print("="*80)
print()

sl_set = []
sl_errors = []
unprotected = []

for line in lines:
    if '‚úÖ Stop-loss set' in line or 'Stop-loss placed successfully' in line:
        sl_set.append(line)
    elif 'Failed to set stop-loss' in line or 'stop-loss' in line.lower() and 'error' in line.lower():
        sl_errors.append(line)
    elif 'CRITICAL: Position without SL' in line or 'unprotected' in line.lower():
        unprotected.append(line)

print(f"‚úÖ Stop-Loss —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len(sl_set)}")
print(f"‚ùå –û—à–∏–±–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL: {len(sl_errors)}")
print(f"‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏–π –±–µ–∑ –∑–∞—â–∏—Ç—ã: {len(unprotected)}")
print()

if sl_errors:
    print("–ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫ SL:")
    for line in sl_errors[:5]:
        error_part = line.split(' - ')[-1].strip()[:80]
        print(f"   {error_part}")
    print()

# –¢–µ–∫—É—â–∏–µ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
current_unprotected = []
for line in reversed(lines):
    if 'Position without SL' in line and 'closing' not in line.lower():
        current_unprotected.append(line)
        if len(current_unprotected) >= 5:
            break

if current_unprotected:
    print("‚ö†Ô∏è  –ù–µ–¥–∞–≤–Ω–∏–µ —Å–ª—É—á–∞–∏ –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ SL:")
    for line in current_unprotected:
        print(f"   {line.strip()}")
    print()

# ==================== 4. –ê–ù–ê–õ–ò–ó TRAILING STOP ====================
print("="*80)
print("4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TRAILING STOP")
print("="*80)
print()

ts_activated = []
ts_sl_updated = []

for line in lines:
    if 'Trailing stop activated' in line or 'TS activated' in line:
        ts_activated.append(line)
    elif 'trailing' in line.lower() and 'updated' in line.lower():
        ts_sl_updated.append(line)
    elif 'Moving stop-loss' in line or 'SL moved' in line:
        ts_sl_updated.append(line)

print(f"üéØ Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(ts_activated)}")
print(f"üìà SL –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è TS: {len(ts_sl_updated)}")
print()

if ts_activated:
    print("–ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TS:")
    for line in ts_activated[:5]:
        print(f"   {line.strip()}")
    print()

if ts_sl_updated:
    print("–ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL –ø—Ä–∏ TS:")
    for line in ts_sl_updated[:5]:
        print(f"   {line.strip()}")
    print()

# ==================== 5. –ê–ù–ê–õ–ò–ó AGED –ü–û–ó–ò–¶–ò–ô ====================
print("="*80)
print("5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó AGED –ü–û–ó–ò–¶–ò–ô")
print("="*80)
print()

aged_detected = []
aged_closed = []

for line in lines:
    if 'aged position' in line.lower() and 'detected' in line.lower():
        aged_detected.append(line)
    elif 'aged position' in line.lower() and ('clos' in line.lower() or 'exit' in line.lower()):
        aged_closed.append(line)

print(f"‚è∞ Aged –ø–æ–∑–∏—Ü–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(aged_detected)}")
print(f"‚úÖ Aged –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {len(aged_closed)}")
print()

if aged_detected:
    print("–ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è aged –ø–æ–∑–∏—Ü–∏–π:")
    for line in aged_detected[:5]:
        print(f"   {line.strip()}")
    print()

if aged_closed:
    print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è aged –ø–æ–∑–∏—Ü–∏–π:")
    for line in aged_closed[:5]:
        print(f"   {line.strip()}")
    print()

# ==================== 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ====================
print("="*80)
print("6Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò")
print("="*80)
print()

critical_errors = []
errors = []

for line in lines:
    if 'CRITICAL' in line or 'ERROR' in line:
        if 'CRITICAL' in line:
            critical_errors.append(line)
        else:
            errors.append(line)

print(f"üî¥ CRITICAL –æ—à–∏–±–æ–∫: {len(critical_errors)}")
print(f"‚ö†Ô∏è  ERROR –æ—à–∏–±–æ–∫: {len(errors)}")
print()

if critical_errors:
    print("CRITICAL –æ—à–∏–±–∫–∏:")
    critical_unique = {}
    for line in critical_errors:
        error_text = line.split(' - ')[-1].strip()[:60]
        critical_unique[error_text] = critical_unique.get(error_text, 0) + 1

    for error, count in sorted(critical_unique.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"   [{count}x] {error}")
    print()

# ==================== 7. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
print("="*80)
print("7Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("="*80)
print()

print(f"üìä –í–æ–ª–Ω—ã:")
print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–ª–Ω: {total_waves}")
print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–∏–≥–Ω–∞–ª–æ–≤/–≤–æ–ª–Ω—É: {total_signals/total_waves:.1f}")
print()

print(f"üíº –ü–æ–∑–∏—Ü–∏–∏:")
opened_count = len([p for p in positions_opened if isinstance(p, dict)])
print(f"   –û—Ç–∫—Ä—ã—Ç–æ —É—Å–ø–µ—à–Ω–æ: {opened_count}")
print(f"   –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏: {len(positions_failed)}")
if opened_count > 0:
    success_rate = opened_count / (opened_count + len(positions_failed)) * 100
    print(f"   Success rate: {success_rate:.1f}%")
print()

print(f"üõ°Ô∏è  Stop-Loss:")
print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len(sl_set)}")
print(f"   –û—à–∏–±–æ–∫: {len(sl_errors)}")
print(f"   –°–ª—É—á–∞–µ–≤ –±–µ–∑ –∑–∞—â–∏—Ç—ã: {len(unprotected)}")
print()

print(f"üìà Trailing Stop:")
print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(ts_activated)}")
print(f"   SL –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(ts_sl_updated)}")
print()

print(f"‚è∞ Aged –ø–æ–∑–∏—Ü–∏–∏:")
print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(aged_detected)}")
print(f"   –ó–∞–∫—Ä—ã—Ç–æ: {len(aged_closed)}")
print()

print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
print(f"   CRITICAL: {len(critical_errors)}")
print(f"   ERROR: {len(errors)}")
print()

print("="*80)
print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
print("="*80)
