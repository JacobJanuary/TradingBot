#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Bybit UNIFIED - –≤—Å—ë –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!
"""
import asyncio
import ccxt.async_support as ccxt
import os
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()


async def test_bybit():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Bybit"""
    
    print("="*60)
    print("üéâ BYBIT UNIFIED ACCOUNT - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º exchange —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    exchange = ccxt.bybit({
        'apiKey': os.getenv('BYBIT_API_KEY'),
        'secret': os.getenv('BYBIT_API_SECRET'),
        'testnet': True,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'future',  # –î–ª—è perpetual futures
            'accountType': 'UNIFIED',  # –í–ê–ñ–ù–û!
            'recvWindow': 60000,
            'adjustForTimeDifference': True
        }
    })
    
    # –í–∫–ª—é—á–∞–µ–º sandbox mode
    exchange.set_sandbox_mode(True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URLs
    exchange.urls['api'] = {
        'public': 'https://api-testnet.bybit.com',
        'private': 'https://api-testnet.bybit.com'
    }
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        print("\n1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤...")
        markets = await exchange.load_markets()
        futures = [m for m in markets.values() if m['future']]
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤")
        print(f"   ‚úÖ Futures: {len(futures)}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
        balance = await exchange.fetch_balance()
        usdt = balance.get('USDT', {})
        print(f"   ‚úÖ USDT Total: {usdt.get('total', 0):.2f}")
        print(f"   ‚úÖ USDT Free: {usdt.get('free', 0):.2f}")
        print(f"   ‚úÖ USDT Used: {usdt.get('used', 0):.2f}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤...")
        symbol = 'BTC/USDT:USDT'
        ticker = await exchange.fetch_ticker(symbol)
        print(f"   ‚úÖ {symbol}")
        print(f"      Last: ${ticker['last']:,.2f}")
        print(f"      Bid: ${ticker['bid']:,.2f}")
        print(f"      Ask: ${ticker['ask']:,.2f}")
        print(f"      Volume: {ticker['quoteVolume']:,.0f} USDT")
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...")
        positions = await exchange.fetch_positions()
        open_positions = [p for p in positions if p['contracts'] > 0]
        print(f"   ‚úÖ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        print(f"   ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_positions)}")
        
        if open_positions:
            for pos in open_positions[:3]:
                print(f"      {pos['symbol']}: {pos['side']} {pos['contracts']}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤...")
        try:
            orders = await exchange.fetch_open_orders()
            print(f"   ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
        except:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        
        # 6. –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        test_symbol = 'BTC/USDT:USDT'
        test_side = 'buy'
        test_amount = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        test_price = ticker['last'] * 0.8  # 20% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
        
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä:")
        print(f"      Symbol: {test_symbol}")
        print(f"      Side: {test_side}")
        print(f"      Amount: {test_amount} BTC")
        print(f"      Price: ${test_price:,.2f}")
        
        if usdt.get('free', 0) >= test_price * test_amount:
            try:
                # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
                order = await exchange.create_limit_buy_order(
                    test_symbol,
                    test_amount,
                    test_price
                )
                
                order_id = order['id']
                print(f"   ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω! ID: {order_id}")
                
                # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                await exchange.cancel_order(order_id, test_symbol)
                print(f"   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {e}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            trades = await exchange.fetch_my_trades(symbol, limit=5)
            print(f"   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫: {len(trades)}")
        except:
            print(f"   ‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        
        print("\n" + "="*60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        print("\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à Bybit UNIFIED –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py --mode shadow")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ")
        print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        
        print("\nüìã –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print("   ‚Ä¢ UNIFIED Account ‚úÖ")
        print("   ‚Ä¢ Testnet ‚úÖ")
        print("   ‚Ä¢ 10,000 USDT —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ ‚úÖ")
        print("   ‚Ä¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        
        if "accountType only support UNIFIED" in str(e):
            print("\n‚ö†Ô∏è –í—Å—ë –µ—â–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å UNIFIED")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ù–û–í–´–ï –∫–ª—é—á–∏")
        
    finally:
        await exchange.close()


if __name__ == "__main__":
    asyncio.run(test_bybit())