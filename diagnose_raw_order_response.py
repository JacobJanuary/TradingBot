#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –¥–ª—è atomic_position_manager.py
–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ raw_order –æ—Ç –±–∏—Ä–∂–∏

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –ù–∞–π—Ç–∏ –≤ atomic_position_manager.py —Å—Ç—Ä–æ–∫—É:
   raw_order = await exchange_instance.create_market_order(...)

2. –ü–û–°–õ–ï —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å:

   # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ raw_order
   import json
   logger.critical("üîç DIAGNOSTIC: RAW ORDER FROM EXCHANGE:")
   logger.critical(f"   raw_order type: {type(raw_order)}")
   logger.critical(f"   raw_order is None: {raw_order is None}")
   if raw_order:
       logger.critical(f"   raw_order keys: {list(raw_order.keys()) if isinstance(raw_order, dict) else 'NOT A DICT'}")
       logger.critical(f"   raw_order.get('status'): {raw_order.get('status') if isinstance(raw_order, dict) else 'N/A'}")
       logger.critical(f"   raw_order.get('info'): {raw_order.get('info') if isinstance(raw_order, dict) else 'N/A'}")
       if isinstance(raw_order, dict) and 'info' in raw_order:
           info = raw_order['info']
           logger.critical(f"   info.get('orderStatus'): {info.get('orderStatus') if isinstance(info, dict) else 'N/A'}")
           logger.critical(f"   info.get('orderLinkId'): {info.get('orderLinkId') if isinstance(info, dict) else 'N/A'}")
       try:
           logger.critical(f"   JSON: {json.dumps(raw_order, indent=2, default=str)}")
       except Exception as e:
           logger.critical(f"   JSON serialization failed: {e}")

3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ - —Ç–∞–º –±—É–¥–µ—Ç –ü–û–õ–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ raw_order

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É–≤–∏–¥–µ—Ç—å:
- –ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
- –ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –≤ –Ω–µ–π
- –í—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
"""

import json

# –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤:
EXAMPLE_BYBIT_MARKET_ORDER = {
    'id': '1234567890',
    'clientOrderId': None,
    'timestamp': 1728700000000,
    'datetime': '2024-10-12T02:00:00.000Z',
    'lastTradeTimestamp': None,
    'symbol': 'SUNDOG/USDT:USDT',
    'type': 'market',
    'timeInForce': 'GTC',
    'postOnly': False,
    'reduceOnly': False,
    'side': 'sell',
    'price': None,
    'stopPrice': None,
    'amount': 3870.0,
    'cost': 200.0,
    'average': 0.05167,
    'filled': 3870.0,
    'remaining': 0.0,
    'status': 'closed',  # ‚Üê –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ!
    'fee': None,
    'trades': [],
    'fees': [],
    'info': {
        'orderId': '1234567890',
        'orderLinkId': '',
        'symbol': 'SUNDOGUSDT',
        'orderStatus': 'Filled',  # ‚Üê –ò —ç—Ç–æ!
        'side': 'Sell',
        'orderType': 'Market',
        'price': '0',
        'qty': '3870',
        'cumExecQty': '3870',
        'cumExecValue': '200.0',
        'cumExecFee': '0.12',
        'timeInForce': 'GTC',
        'createTime': '1728700000000',
        'updateTime': '1728700000000',
        'reduceOnly': False,
        'closeOnTrigger': False,
        'leavesQty': '0',
        'leavesValue': '0',
        'avgPrice': '0.05167'
    }
}

POSSIBLE_BYBIT_STATUSES = [
    'Created',      # –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –Ω–æ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω
    'New',          # –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ
    'Rejected',     # –û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω
    'PartiallyFilled',  # –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω
    'Filled',       # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω
    'Cancelled',    # –û—Ç–º–µ–Ω–µ–Ω
    'Untriggered',  # –£—Å–ª–æ–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    'Triggered',    # –£—Å–ª–æ–≤–Ω—ã–π –æ—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
    'Deactivated',  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
]

def analyze_status_mapping():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"""
    print("="*80)
    print("–ê–ù–ê–õ–ò–ó: Status Mapping –≤ exchange_response_adapter.py")
    print("="*80)
    print()

    status_map = {
        'Filled': 'closed',
        'PartiallyFilled': 'open',
        'New': 'open',
        'Cancelled': 'canceled',
        'Rejected': 'canceled',
    }

    print("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã:")
    for bybit_status, normalized in status_map.items():
        print(f"   {bybit_status:20} ‚Üí {normalized}")
    print()

    print("‚ùå –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã (—Å—Ç–∞–Ω—É—Ç 'unknown'):")
    for status in POSSIBLE_BYBIT_STATUSES:
        if status not in status_map:
            print(f"   {status:20} ‚Üí unknown ‚ö†Ô∏è")
    print()

    print("üîç –ß–¢–û –ú–û–ñ–ï–¢ –ü–û–ô–¢–ò –ù–ï –¢–ê–ö:")
    print()
    print("1. –°—Ç–∞—Ç—É—Å 'Created':")
    print("   - –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –Ω–æ –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ")
    print("   - –ë—É–¥–µ—Ç 'unknown' ‚Üí –æ—à–∏–±–∫–∞ 'Entry order failed: unknown'")
    print()
    print("2. –°—Ç–∞—Ç—É—Å 'Untriggered':")
    print("   - –î–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (stop-loss, take-profit)")
    print("   - –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É market orders")
    print()
    print("3. –°—Ç–∞—Ç—É—Å 'Triggered':")
    print("   - –£—Å–ª–æ–≤–Ω—ã–π –æ—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ market order")
    print("   - –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º")
    print()
    print("4. –°—Ç–∞—Ç—É—Å None:")
    print("   - –ï—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å")
    print("   - –ò–ª–∏ ccxt –Ω–µ —Å–º–æ–≥ –µ–≥–æ –∏–∑–≤–ª–µ—á—å")
    print()

    print("="*80)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    print("="*80)
    print()
    print("1. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ atomic_position_manager.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏")
    print("3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å raw_order['status'] –∏ raw_order['info']['orderStatus']")
    print("4. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ status_map")
    print()

if __name__ == "__main__":
    analyze_status_mapping()

    print()
    print("="*80)
    print("–ü–†–ò–ú–ï–† –£–°–ü–ï–®–ù–û–ì–û MARKET ORDER –û–¢ BYBIT:")
    print("="*80)
    print()
    print(json.dumps(EXAMPLE_BYBIT_MARKET_ORDER, indent=2))
    print()
