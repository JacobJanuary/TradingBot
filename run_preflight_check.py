#!/usr/bin/env python3
"""
Task 0.1: Pre-flight Database Checks
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
"""
import asyncio
import asyncpg
import os
import sys
from config.settings import Config

async def run_checks():
    """Run all pre-flight checks"""

    print("=" * 70)
    print("Task 0.1: Pre-flight Database Checks")
    print("=" * 70)

    # Load config
    config = Config()
    db = config.database

    print(f"\nüìä Connecting to: {db.host}:{db.port}/{db.database}")

    try:
        # Connect to database
        conn = await asyncpg.connect(
            host=db.host,
            port=db.port,
            database=db.database,
            user=db.user,
            password=db.password
        )

        print("‚úÖ Connected successfully\n")

        # Check 1: Active positions
        print("1Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
        count = await conn.fetchval(
            "SELECT COUNT(*) FROM monitoring.positions WHERE status = 'active'"
        )
        print(f"   Active positions: {count}")

        # Check 2: Schema size
        print("\n2Ô∏è‚É£ –†–∞–∑–º–µ—Ä monitoring schema:")
        size = await conn.fetchval("""
            SELECT pg_size_pretty(SUM(pg_total_relation_size(schemaname||'.'||tablename))::bigint)
            FROM pg_tables WHERE schemaname = 'monitoring'
        """)
        print(f"   Monitoring schema size: {size}")

        # Check 3: Truncated exit_reasons
        print("\n3Ô∏è‚É£ –ü–æ–∑–∏—Ü–∏–∏ —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º exit_reason (—Ä–æ–≤–Ω–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
        truncated = await conn.fetchval("""
            SELECT COUNT(*) FROM monitoring.positions
            WHERE LENGTH(exit_reason) = 100
        """)
        print(f"   Truncated exit_reasons: {truncated}")
        if truncated > 0:
            print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {truncated} –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –º–∏–≥—Ä–∞—Ü–∏—è –Ω—É–∂–Ω–∞!")

        # Check 4: Current exit_reason type
        print("\n4Ô∏è‚É£ –¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø–æ–ª—è exit_reason:")
        col_info = await conn.fetchrow("""
            SELECT column_name, data_type, character_maximum_length
            FROM information_schema.columns
            WHERE table_schema = 'monitoring'
              AND table_name = 'positions'
              AND column_name = 'exit_reason'
        """)
        if col_info:
            print(f"   Type: {col_info['data_type']}")
            if col_info['character_maximum_length']:
                print(f"   Max length: {col_info['character_maximum_length']}")
                print(f"   ‚ö†Ô∏è VARCHAR({col_info['character_maximum_length']}) - –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ TEXT")
            else:
                print(f"   ‚úÖ –£–∂–µ TEXT - –º–∏–≥—Ä–∞—Ü–∏—è exit_reason –Ω–µ –Ω—É–∂–Ω–∞")

        # Check 5: New fields existence
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:")
        new_fields = ['error_details', 'retry_count', 'last_error_at',
                      'last_sync_at', 'sync_status', 'exchange_order_id', 'sl_order_id']

        existing = await conn.fetch("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_schema = 'monitoring'
              AND table_name = 'positions'
              AND column_name = ANY($1::text[])
        """, new_fields)

        existing_names = {row['column_name'] for row in existing}

        for field in new_fields:
            if field in existing_names:
                print(f"   ‚úÖ {field} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå {field} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è)")

        # Check 6: New tables existence
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        new_tables = ['event_log', 'schema_migrations', 'sync_status']

        tables = await conn.fetch("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'monitoring'
              AND table_name = ANY($1::text[])
        """, new_tables)

        existing_tables = {row['table_name'] for row in tables}

        for table in new_tables:
            if table in existing_tables:
                print(f"   ‚úÖ {table} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå {table} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è)")

        # Check 7: Total DB size
        print("\n7Ô∏è‚É£ –†–∞–∑–º–µ—Ä –≤—Å–µ–π –ë–î:")
        total_size = await conn.fetchval(
            "SELECT pg_size_pretty(pg_database_size(current_database()))"
        )
        print(f"   Total database size: {total_size}")

        # Summary
        print("\n" + "=" * 70)
        print("üìã SUMMARY")
        print("=" * 70)

        needs_migration = []

        if col_info and col_info['character_maximum_length'] == 100:
            needs_migration.append("exit_reason VARCHAR(100) ‚Üí TEXT")

        missing_fields = [f for f in new_fields if f not in existing_names]
        if missing_fields:
            needs_migration.append(f"{len(missing_fields)} –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π")

        missing_tables = [t for t in new_tables if t not in existing_tables]
        if missing_tables:
            needs_migration.append(f"{len(missing_tables)} –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")

        if needs_migration:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ú–ò–ì–†–ê–¶–ò–Ø:")
            for item in needs_migration:
                print(f"   ‚Ä¢ {item}")
            print("\n‚úÖ Pre-flight checks –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")
        else:
            print("\n‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        await conn.close()

        print("\n" + "=" * 70)
        return True

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_checks())
    sys.exit(0 if success else 1)
