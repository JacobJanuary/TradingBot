#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é
"""

import sys
from dataclasses import dataclass


@dataclass
class MockPosition:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π mock –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    exchange: str


def test_fixed_logic():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò")
    print("=" * 80)
    print()

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—ç—à –ø–æ–∑–∏—Ü–∏–π
    positions = {
        'B3USDT': MockPosition(symbol='B3USDT', exchange='binance')
    }

    print("üìù –ö—ç—à –ø–æ–∑–∏—Ü–∏–π:")
    for symbol, pos in positions.items():
        print(f"   {symbol}: {pos.exchange}")
    print()

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–π –∂–µ –±–∏—Ä–∂–∏
    print("=" * 80)
    print("–¢–ï–°–¢ #1: –ü—Ä–æ–≤–µ—Ä–∫–∞ B3USDT –Ω–∞ binance")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: TRUE")
    print("-" * 80)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    symbol_to_check = 'B3USDT'
    exchange_to_check = 'binance'
    exchange_lower = exchange_to_check.lower()

    found = False
    for pos_symbol, position in positions.items():
        if pos_symbol == symbol_to_check and position.exchange.lower() == exchange_lower:
            found = True
            break

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {found}")
    if found:
        print("‚úÖ PASS")
        test1 = True
    else:
        print("‚ùå FAIL")
        test1 = False
    print()

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–æ–π –±–∏—Ä–∂–∏ (–ö–†–ò–¢–ò–ß–ù–´–ô)
    print("=" * 80)
    print("–¢–ï–°–¢ #2: –ü—Ä–æ–≤–µ—Ä–∫–∞ B3USDT –Ω–∞ bybit - –ö–†–ò–¢–ò–ß–ù–´–ô!")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: FALSE (–ø–æ–∑–∏—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ binance)")
    print("-" * 80)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    symbol_to_check = 'B3USDT'
    exchange_to_check = 'bybit'
    exchange_lower = exchange_to_check.lower()

    found = False
    for pos_symbol, position in positions.items():
        if pos_symbol == symbol_to_check and position.exchange.lower() == exchange_lower:
            found = True
            break

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {found}")
    if not found:
        print("‚úÖ PASS - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        test2 = True
    else:
        print("‚ùå FAIL - –ë–∞–≥ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å!")
        test2 = False
    print()

    # –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
    print("=" * 80)
    print("–¢–ï–°–¢ #3: –ü—Ä–æ–≤–µ—Ä–∫–∞ ETHUSDT –Ω–∞ binance")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: FALSE")
    print("-" * 80)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    symbol_to_check = 'ETHUSDT'
    exchange_to_check = 'binance'
    exchange_lower = exchange_to_check.lower()

    found = False
    for pos_symbol, position in positions.items():
        if pos_symbol == symbol_to_check and position.exchange.lower() == exchange_lower:
            found = True
            break

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {found}")
    if not found:
        print("‚úÖ PASS")
        test3 = True
    else:
        print("‚ùå FAIL")
        test3 = False
    print()

    # –ò—Ç–æ–≥–∏
    print("=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 80)
    print()

    all_passed = test1 and test2 and test3

    if test1:
        print("‚úÖ PASS: –¢–µ—Å—Ç #1 (—Ç–∞ –∂–µ –±–∏—Ä–∂–∞)")
    else:
        print("‚ùå FAIL: –¢–µ—Å—Ç #1 (—Ç–∞ –∂–µ –±–∏—Ä–∂–∞)")

    if test2:
        print("‚úÖ PASS: –¢–µ—Å—Ç #2 (–¥—Ä—É–≥–∞—è –±–∏—Ä–∂–∞) - –ö–†–ò–¢–ò–ß–ù–´–ô")
    else:
        print("‚ùå FAIL: –¢–µ—Å—Ç #2 (–¥—Ä—É–≥–∞—è –±–∏—Ä–∂–∞) - –ö–†–ò–¢–ò–ß–ù–´–ô")

    if test3:
        print("‚úÖ PASS: –¢–µ—Å—Ç #3 (–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)")
    else:
        print("‚ùå FAIL: –¢–µ—Å—Ç #3 (–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)")

    print()

    if all_passed:
        print("=" * 80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò - –õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê!")
        print("=" * 80)
        return 0
    else:
        print("=" * 80)
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("=" * 80)
        return 1


if __name__ == "__main__":
    exit_code = test_fixed_logic()
    sys.exit(exit_code)
