#!/usr/bin/env python3
"""
Test to verify the _position_exists() bug theory

THEORY:
The method _position_exists(symbol, exchange) at line 1349 checks:
    if symbol in self.positions:
        return True

Without verifying the exchange parameter.

This means if B3USDT exists on binance in cache, calling
_position_exists('B3USDT', 'bybit') will incorrectly return TRUE.

TEST:
1. Add B3USDT position on binance to mock cache
2. Call _position_exists('B3USDT', 'binance') - expect TRUE ‚úÖ
3. Call _position_exists('B3USDT', 'bybit') - expect FALSE (critical test)
4. If step 3 returns TRUE, bug confirmed ‚ùå

EXIT CODES:
- 0: Bug NOT found (theory disproven)
- 1: Bug CONFIRMED (fix needed)
- 2: Test error
"""

import asyncio
import sys
from dataclasses import dataclass
from typing import Dict


@dataclass
class MockPosition:
    """Minimal position mock"""
    symbol: str
    exchange: str
    id: int = 1


class MockRepository:
    """Mock repository that always returns None"""

    async def get_open_position(self, symbol: str, exchange: str):
        """Always return None - we're testing cache logic only"""
        return None


class SimplifiedPositionManager:
    """
    Simplified version with only the _position_exists method
    to test the bug in isolation

    This is an EXACT COPY of the buggy code from position_manager.py:1339-1359
    """

    def __init__(self):
        self.positions: Dict[str, MockPosition] = {}
        self.check_locks: Dict[str, asyncio.Lock] = {}
        self.repository = MockRepository()

    async def _position_exists(self, symbol: str, exchange: str) -> bool:
        """
        EXACT COPY of the buggy code from position_manager.py line 1339-1359
        """
        lock_key = f"{exchange}_{symbol}"

        if lock_key not in self.check_locks:
            self.check_locks[lock_key] = asyncio.Lock()

        async with self.check_locks[lock_key]:
            # Check local tracking
            if symbol in self.positions:  # ‚Üê BUG! Doesn't check exchange!
                return True

            # Check database
            db_position = await self.repository.get_open_position(symbol, exchange)
            if db_position:
                return True

            return False


async def run_test():
    """Run the bug verification test"""

    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –ë–ê–ì–ê –í _position_exists()")
    print("=" * 80)
    print()
    print("–¢–ï–û–†–ò–Ø:")
    print("  –ú–µ—Ç–æ–¥ _position_exists(symbol, exchange) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:")
    print("    if symbol in self.positions:")
    print("        return True")
    print()
    print("  –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ exchange!")
    print()
    print("  –≠—Ç–æ –∑–Ω–∞—á–∏—Ç –µ—Å–ª–∏ B3USDT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ binance –≤ –∫—ç—à–µ,")
    print("  –≤—ã–∑–æ–≤ _position_exists('B3USDT', 'bybit') –≤–µ—Ä–Ω–µ—Ç TRUE (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")
    print()

    # Setup
    manager = SimplifiedPositionManager()

    # Add B3USDT position on BINANCE to cache
    manager.positions['B3USDT'] = MockPosition(
        symbol='B3USDT',
        exchange='binance',
        id=874
    )

    print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞:")
    print(f"   –î–æ–±–∞–≤–∏–ª–∏ –≤ –∫—ç—à: B3USDT –Ω–∞ binance")
    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞: {list(manager.positions.keys())}")
    print()

    # Test 1: Check same symbol and exchange (should return TRUE)
    print("=" * 80)
    print("–¢–ï–°–¢ #1: _position_exists('B3USDT', 'binance')")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: TRUE (–ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ binance)")
    print("-" * 80)

    result1 = await manager._position_exists('B3USDT', 'binance')
    status1 = "‚úÖ PASS" if result1 else "‚ùå FAIL"
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    print(f"{status1}")
    print()

    if not result1:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å TRUE –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏")
        return 2

    # Test 2: Check same symbol, DIFFERENT exchange (should return FALSE)
    print("=" * 80)
    print("–¢–ï–°–¢ #2: _position_exists('B3USDT', 'bybit') - –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢!")
    print("–û–∂–∏–¥–∞–µ—Ç—Å—è: FALSE (–ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ binance, –ù–ï –Ω–∞ bybit)")
    print("=" * 80)
    print()
    print("üîç –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ - –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–≥:")
    print()

    result2 = await manager._position_exists('B3USDT', 'bybit')

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    print()

    if result2:
        # Bug confirmed!
        print("üêõ –ë–ê–ì –ü–û–î–¢–í–ï–†–ñ–î–Å–ù!")
        print()
        print("‚ùå _position_exists('B3USDT', 'bybit') –≤–µ—Ä–Ω—É–ª TRUE")
        print("   –Ω–æ B3USDT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ binance, –ù–ï –Ω–∞ bybit!")
        print()
        print("üìä –ü–†–ò–ß–ò–ù–ê:")
        print("   –°—Ç—Ä–æ–∫–∞ 1349 –≤ position_manager.py:")
        print("   ```python")
        print("   if symbol in self.positions:  # ‚Üê –ë–ê–ì!")
        print("       return True")
        print("   ```")
        print()
        print("   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å:")
        print("   ```python")
        print("   for pos_symbol, position in self.positions.items():")
        print("       if pos_symbol == symbol and position.exchange == exchange:")
        print("           return True")
        print("   ```")
        print()
        print("üí• –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:")
        print("   - Signal processor –≤—ã–∑—ã–≤–∞–µ—Ç _position_exists('B3USDT', 'bybit')")
        print("   - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç TRUE —Ö–æ—Ç—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ binance")
        print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç")
        print("   - –ü–æ–∑–∏—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ bybit")
        print()
        return 1  # Bug confirmed
    else:
        # Bug NOT found
        print("‚úÖ –ë–ê–ì –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù")
        print()
        print("_position_exists('B3USDT', 'bybit') –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª FALSE")
        print()
        print("‚ö†Ô∏è  –¢–µ–æ—Ä–∏—è –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞ - –±–∞–≥ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
        print()
        return 0  # Bug not found


async def main():
    try:
        exit_code = await run_test()

        print()
        print("=" * 80)
        print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
        print("=" * 80)
        print()

        if exit_code == 0:
            print("‚úÖ –¢–µ–æ—Ä–∏—è –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞ - –±–∞–≥ –ù–ï –≤ _position_exists()")
            print("   –ù—É–∂–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã")
        elif exit_code == 1:
            print("üêõ –ë–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω - _position_exists() –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç exchange")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ core/position_manager.py —Å—Ç—Ä–æ–∫–∞ 1349")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞")

        print()
        sys.exit(exit_code)

    except Exception as e:
        print()
        print("=" * 80)
        print("‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê")
        print("=" * 80)
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(2)


if __name__ == "__main__":
    asyncio.run(main())
