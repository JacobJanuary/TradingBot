#!/usr/bin/env python3
"""Check has_trailing_stop status for active positions"""

import asyncio
import asyncpg
from dotenv import load_dotenv
import os

async def check_active_positions_ts():
    # Load environment variables
    load_dotenv()

    # Get DB credentials from .env
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = int(os.getenv('DB_PORT', '5433'))
    db_name = os.getenv('DB_NAME', 'fox_crypto_test')
    db_user = os.getenv('DB_USER', 'elcrypto')
    db_password = os.getenv('DB_PASSWORD')

    print(f"Connecting to {db_name} at {db_host}:{db_port} as {db_user}...")

    # Connect to database
    conn = await asyncpg.connect(
        host=db_host,
        port=db_port,
        database=db_name,
        user=db_user,
        password=db_password
    )

    try:
        # Get statistics for active positions
        stats = await conn.fetchrow("""
            SELECT
                COUNT(*) as total_active,
                COUNT(CASE WHEN has_trailing_stop = true THEN 1 END) as ts_initialized,
                COUNT(CASE WHEN has_trailing_stop = false OR has_trailing_stop IS NULL THEN 1 END) as ts_not_initialized
            FROM monitoring.positions
            WHERE status = 'active'
        """)

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–û–ó–ò–¶–ò–ô:")
        print(f"  –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_active']}")
        print(f"  has_trailing_stop = TRUE: {stats['ts_initialized']}")
        print(f"  has_trailing_stop = FALSE/NULL: {stats['ts_not_initialized']}")

        if stats['ts_not_initialized'] > 0:
            print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: {stats['ts_not_initialized']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ë–ï–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ TS!")
        else:
            print(f"\n‚úÖ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç has_trailing_stop = TRUE")

        # Get detailed list of active positions
        active_positions = await conn.fetch("""
            SELECT
                id,
                symbol,
                exchange,
                side,
                entry_price,
                current_price,
                has_trailing_stop,
                trailing_activated,
                created_at
            FROM monitoring.positions
            WHERE status = 'active'
            ORDER BY has_trailing_stop NULLS FIRST, created_at DESC
        """)

        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ü–û–ó–ò–¶–ò–ô ({len(active_positions)}):\n")
        print(f"{'ID':<6} {'Symbol':<15} {'Exchange':<10} {'TS Init':<10} {'TS Active':<10} {'Created':<20}")
        print("=" * 80)

        for pos in active_positions:
            ts_init = "‚úÖ TRUE" if pos['has_trailing_stop'] else "‚ùå FALSE"
            ts_active = "‚úÖ TRUE" if pos['trailing_activated'] else "‚ùå FALSE"
            created = pos['created_at'].strftime('%Y-%m-%d %H:%M:%S') if pos['created_at'] else 'N/A'

            print(f"{pos['id']:<6} {pos['symbol']:<15} {pos['exchange']:<10} {ts_init:<10} {ts_active:<10} {created:<20}")

        # Get positions WITHOUT has_trailing_stop
        positions_without_ts = await conn.fetch("""
            SELECT
                id,
                symbol,
                exchange,
                entry_price,
                created_at
            FROM monitoring.positions
            WHERE status = 'active'
              AND (has_trailing_stop = false OR has_trailing_stop IS NULL)
            ORDER BY created_at DESC
        """)

        if positions_without_ts:
            print(f"\nüö® –ü–û–ó–ò–¶–ò–ò –ë–ï–ó –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û TS ({len(positions_without_ts)}):\n")
            for pos in positions_without_ts:
                created = pos['created_at'].strftime('%Y-%m-%d %H:%M:%S') if pos['created_at'] else 'N/A'
                print(f"  ID: {pos['id']:<6} | {pos['symbol']:<15} | {pos['exchange']:<10} | Created: {created}")

        # Check if TS should be initialized based on research
        print("\n\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –û–ñ–ò–î–ê–ù–ò–Ø–ú:")
        print("=" * 80)
        print("–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é TS_AUTOMATIC_ACTIVATION_LOGIC_DEEP_RESEARCH.md:")
        print("  - –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å has_trailing_stop = TRUE –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏")
        print("  - TS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ core/position_manager.py:832-849 (open_position)")
        print("  - TS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ core/position_manager.py:410-434 (load_positions_from_db)")

        if stats['ts_not_initialized'] > 0:
            print(f"\n‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: {stats['ts_not_initialized']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ë–ï–ó TS!")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  1. –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ñ–∏–∫—Å–∞ has_trailing_stop persistence")
            print("  2. –ë–æ—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ñ–∏–∫—Å–∞")
            print("  3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TS")
            print("\n–†–µ—à–µ–Ω–∏–µ:")
            print("  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Üí load_positions_from_db() –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TS –¥–ª—è –≤—Å–µ—Ö")
        else:
            print(f"\n‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –í–°–ï {stats['total_active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–º–µ—é—Ç TS!")

    finally:
        await conn.close()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    asyncio.run(check_active_positions_ts())
