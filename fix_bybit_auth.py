#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Bybit —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è V5 API
"""
import asyncio
import aiohttp
import hmac
import hashlib
import time
import json
import os
from urllib.parse import urlencode
from dotenv import load_dotenv

load_dotenv()


class BybitV5Auth:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Bybit V5 API"""
    
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        
    def generate_signature(self, timestamp, recv_window, query_string=""):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è V5 API"""
        # –§–æ—Ä–º–∞—Ç –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤: timestamp + api_key + recv_window + query_string
        param_str = f"{timestamp}{self.api_key}{recv_window}{query_string}"
        
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            param_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        return signature
    
    async def test_connection(self, base_url):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        
        timestamp = str(int(time.time() * 1000))
        recv_window = "5000"
        
        # –î–ª—è account/info –Ω–µ—Ç query parameters
        signature = self.generate_signature(timestamp, recv_window, "")
        
        headers = {
            'X-BAPI-API-KEY': self.api_key,
            'X-BAPI-SIGN': signature,
            'X-BAPI-TIMESTAMP': timestamp,
            'X-BAPI-RECV-WINDOW': recv_window,
            'Content-Type': 'application/json'
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º account info
                url = f"{base_url}/v5/account/info"
                async with session.get(url, headers=headers) as response:
                    data = await response.json()
                    return data
                    
            except Exception as e:
                return {"error": str(e)}
    
    async def get_wallet_balance(self, base_url):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        
        timestamp = str(int(time.time() * 1000))
        recv_window = "5000"
        
        # Query parameters –¥–ª—è wallet balance
        params = {
            'accountType': 'UNIFIED'
        }
        query_string = urlencode(sorted(params.items()))
        
        signature = self.generate_signature(timestamp, recv_window, query_string)
        
        headers = {
            'X-BAPI-API-KEY': self.api_key,
            'X-BAPI-SIGN': signature,
            'X-BAPI-TIMESTAMP': timestamp,
            'X-BAPI-RECV-WINDOW': recv_window
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                url = f"{base_url}/v5/account/wallet-balance"
                async with session.get(url, headers=headers, params=params) as response:
                    data = await response.json()
                    return data
                    
            except Exception as e:
                return {"error": str(e)}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')
    
    print("="*60)
    print("BYBIT V5 API - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    if not api_key or not api_secret:
        print("\n‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏:")
    print(f"   API Key: {api_key[:10]}...")
    print(f"   Secret: ***")
    
    auth = BybitV5Auth(api_key, api_secret)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ endpoint
    endpoints = [
        ("https://api-testnet.bybit.com", "TESTNET"),
        ("https://api.bybit.com", "MAINNET")
    ]
    
    for base_url, name in endpoints:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {name}:")
        print(f"   URL: {base_url}")
        
        # –¢–µ—Å—Ç 1: Account Info
        result = await auth.test_connection(base_url)
        
        if result.get('retCode') == 0:
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            data = result.get('result', {})
            if data:
                print(f"   Account UID: {data.get('uid', 'N/A')}")
                print(f"   Account Type: {data.get('accountType', 'N/A')}")
                
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                unified_status = data.get('unifiedMarginStatus')
                if unified_status is not None:
                    if unified_status == 1:
                        print(f"   ‚úÖ UNIFIED Account")
                    elif unified_status == 0:
                        print(f"   ‚ùå Standard Account (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ UNIFIED)")
                    else:
                        print(f"   Status Code: {unified_status}")
                
                # –î–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                uta = data.get('uta')
                if uta is not None:
                    if uta == 1:
                        print(f"   ‚úÖ UTA (Unified Trading Account) –∞–∫—Ç–∏–≤–µ–Ω")
                    else:
                        print(f"   ‚ùå UTA –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                
                # –¢–µ—Å—Ç 2: –ë–∞–ª–∞–Ω—Å
                balance_result = await auth.get_wallet_balance(base_url)
                
                if balance_result.get('retCode') == 0:
                    print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω")
                    
                    accounts = balance_result.get('result', {}).get('list', [])
                    for account in accounts:
                        account_type = account.get('accountType')
                        print(f"\n   üíº Account Type: {account_type}")
                        
                        coins = account.get('coin', [])
                        for coin in coins:
                            if coin['coin'] == 'USDT':
                                wallet_balance = float(coin.get('walletBalance') or 0)
                                available = float(coin.get('availableToWithdraw') or 0)
                                print(f"   üí∞ USDT Balance: {wallet_balance:.2f}")
                                print(f"   üíµ Available: {available:.2f}")
                                break
                                
                elif balance_result.get('retCode') == 10001:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: accountType only support UNIFIED")
                    print(f"   üìã –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å UNIFIED account –Ω–∞ {base_url.replace('api', 'www').replace('-testnet', '')}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {balance_result.get('retMsg')}")
                
                print(f"\n   üéâ –ö–õ–Æ–ß–ò –†–ê–ë–û–¢–ê–Æ–¢ –° {name}!")
                
                if 'testnet' in base_url:
                    print("\n‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–ª—é—á–∏ –æ—Ç TESTNET")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    print("\nüìù –î–æ–±–∞–≤—å—Ç–µ –≤ config/config.yaml:")
                    print("```yaml")
                    print("exchanges:")
                    print("  bybit:")
                    print("    enabled: true")
                    print("    testnet: true")
                    print("    api_key: ${BYBIT_API_KEY}")
                    print("    api_secret: ${BYBIT_API_SECRET}")
                    print("    options:")
                    print("      defaultType: 'future'")
                    print("      accountType: 'UNIFIED'")
                    print("```")
                else:
                    print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ PRODUCTION –∫–ª—é—á–∏")
                    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á–∏ –Ω–∞ testnet.bybit.com")
                
                break
                
        elif result.get('retCode') == 10003:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ –∫–ª—é—á–∏")
            
        elif result.get('retCode') == 10001:
            print(f"   ‚ùå Account –Ω–µ UNIFIED")
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('retMsg', 'Unknown error')}")
            
    print("\n" + "="*60)


if __name__ == "__main__":
    asyncio.run(main())